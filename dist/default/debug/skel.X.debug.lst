

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue May 08 15:44:27 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F6490
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    30  0000                     
    31                           ; Version 1.41
    32                           ; Generated 25/01/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F6490 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	smallconst
    67  000300                     __psmallconst:
    68                           	opt stack 0
    69  000300  00                 	db	0
    70  000301                     _regDflt:
    71                           	opt stack 0
    72  000301  FFFF               	dw	65535
    73  000303  5B15               	dw	23317
    74  000305  D0B9               	dw	53433
    75  000307  A010               	dw	40976
    76  000309  0780               	dw	1920
    77  00030B  28AB               	dw	10411
    78  00030D  6400               	dw	25600
    79  00030F  1EE7               	dw	7911
    80  000311  7141               	dw	28993
    81  000313  007D               	dw	125
    82  000315  82C6               	dw	33478
    83  000317  4F55               	dw	20309
    84  000319  970C               	dw	38668
    85  00031B  B845               	dw	47173
    86  00031D  FC2D               	dw	64557
    87  00031F  8097               	dw	32919
    88  000321  04A1               	dw	1185
    89  000323  DF6A               	dw	57194
    90  000325                     __end_of_regDflt:
    91                           	opt stack 0
    92  0000                     _LCDPS	set	3928
    93  0000                     _LCDCON	set	3929
    94  0000                     _LCDSE3	set	3933
    95  0000                     _LCDSE2	set	3932
    96  0000                     _LCDSE1	set	3931
    97  0000                     _LCDSE0	set	3930
    98  0000                     _TRISCbits	set	3988
    99  0000                     _PORTG	set	3974
   100  0000                     _PORTC	set	3970
   101  0000                     _PORTB	set	3969
   102  0000                     _PORTA	set	3968
   103  0000                     _TRISG	set	3992
   104  0000                     _TRISC	set	3988
   105  0000                     _TRISB	set	3987
   106  0000                     _TRISA	set	3986
   107  0000                     _PORTBbits	set	3969
   108  0000                     _PORTAbits	set	3968
   109  0000                     _LCDDATA0	set	3936
   110  0000                     _PIR1bits	set	3998
   111  0000                     _SSPCON1bits	set	4038
   112  0000                     _SSPBUF	set	4041
   113  0000                     _SSPCON1	set	4038
   114  0000                     _SSPSTAT	set	4039
   115  0000                     _SSPSTATbits	set	4039
   116  0000                     _SSPCON2	set	4037
   117  0000                     _SSPCON2bits	set	4037
   118  0000                     _SSPADD	set	4040
   119  0000                     _ADCON1	set	4033
   120  0000                     _OSCCON	set	4051
   121  0000                     _T0CONbits	set	4053
   122  0000                     _TMR0L	set	4054
   123  0000                     _TMR0H	set	4055
   124  0000                     _T0CON	set	4053
   125  0000                     _INTCONbits	set	4082
   126                           
   127                           ; #config settings
   128  000325  00                 	db	0	; dummy byte at the end
   129  0000                     
   130                           	psect	cinit
   131  0010A6                     __pcinit:
   132                           	opt stack 0
   133  0010A6                     start_initialization:
   134                           	opt stack 0
   135  0010A6                     __initialization:
   136                           	opt stack 0
   137                           
   138                           ; Clear objects allocated to COMRAM (38 bytes)
   139  0010A6  EE00  F001         	lfsr	0,__pbssCOMRAM
   140  0010AA  0E26               	movlw	38
   141  0010AC                     clear_0:
   142  0010AC  6AEE               	clrf	postinc0,c
   143  0010AE  06E8               	decf	wreg,f,c
   144  0010B0  E1FD               	bnz	clear_0
   145  0010B2                     end_of_initialization:
   146                           	opt stack 0
   147  0010B2                     __end_of__initialization:
   148                           	opt stack 0
   149  0010B2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   150  0010B4  6EF8               	movwf	tblptru,c
   151  0010B6  0100               	movlb	0
   152  0010B8  EFEB  F004         	goto	_main	;jump to C main() function
   153                           tblptru	equ	0xFF8
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           
   157                           	psect	bssCOMRAM
   158  000001                     __pbssCOMRAM:
   159                           	opt stack 0
   160  000001                     _regImg:
   161                           	opt stack 0
   162  000001                     	ds	36
   163  000025                     _freq:
   164                           	opt stack 0
   165  000025                     	ds	2
   166                           tblptru	equ	0xFF8
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	cstackCOMRAM
   171  000027                     __pcstackCOMRAM:
   172                           	opt stack 0
   173  000027                     ??_IdleI2C:
   174  000027                     OpenI2C@slew:
   175                           	opt stack 0
   176  000027                     dly@d:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x0
   180  000027                     	ds	1
   181  000028                     OpenI2C@sync_mode:
   182                           	opt stack 0
   183  000028                     WriteI2C@data_out:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0x1
   187  000028                     	ds	1
   188  000029                     ??_FMwrite:
   189  000029                     dly@i:
   190                           	opt stack 0
   191  000029                     FMread@data:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0x2
   195  000029                     	ds	2
   196  00002B                     ??_FMread:
   197  00002B                     FMwrite@firstByt:
   198                           	opt stack 0
   199  00002B                     butnEvent@btn:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x4
   203  00002B                     	ds	1
   204  00002C                     FMwrite@secndByt:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x5
   208  00002C                     	ds	1
   209  00002D                     FMwrite@adr:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x6
   213  00002D                     	ds	1
   214  00002E                     mute@mute:
   215                           	opt stack 0
   216  00002E                     setVolume@vol:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x7
   220  00002E                     	ds	1
   221  00002F                     FMread@regAddr:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x8
   225  00002F                     	ds	1
   226  000030                     ??_setVolume:
   227  000030                     FMread@firstByt:
   228                           	opt stack 0
   229                           
   230                           ; 1 bytes @ 0x9
   231  000030                     	ds	1
   232  000031                     FMread@secndByt:
   233                           	opt stack 0
   234                           
   235                           ; 1 bytes @ 0xA
   236  000031                     	ds	1
   237  000032                     scanNext@up:
   238                           	opt stack 0
   239  000032                     FMready@rdy:
   240                           	opt stack 0
   241  000032                     FMvers@vsn:
   242                           	opt stack 0
   243  000032                     setVolume@current2:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0xB
   247  000032                     	ds	1
   248  000033                     scanNext@STC:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0xC
   252  000033                     	ds	1
   253  000034                     ??_FMready:
   254  000034                     setVolume@current1:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0xD
   258  000034                     	ds	2
   259  000036                     FMready@sts:
   260                           	opt stack 0
   261  000036                     setVolume@current:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0xF
   265  000036                     	ds	2
   266  000038                     FMinit@dat:
   267                           	opt stack 0
   268  000038                     FMfrequenc@f:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x11
   272  000038                     	ds	2
   273  00003A                     ??_FMfrequenc:
   274  00003A                     FMinit@ad:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x13
   278  00003A                     	ds	4
   279  00003E                     FMfrequenc@cn:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x17
   283  00003E                     	ds	2
   284  000040                     FMfrequenc@dat:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x19
   288  000040                     	ds	2
   289  000042                     ??_nextChan:
   290                           
   291                           ; 1 bytes @ 0x1B
   292  000042                     	ds	4
   293  000046                     nextChan@up:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x1F
   297  000046                     	ds	1
   298  000047                     main@evt:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x20
   302  000047                     	ds	1
   303  000048                     main@ui:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x21
   307  000048                     	ds	2
   308  00004A                     main@btn:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x23
   312  00004A                     	ds	1
   313                           tblptru	equ	0xFF8
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           
   317 ;;
   318 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   319 ;;
   320 ;; *************** function _main *****************
   321 ;; Defined at:
   322 ;;		line 1034 in file "main.c"
   323 ;; Parameters:    Size  Location     Type
   324 ;;		None
   325 ;; Auto vars:     Size  Location     Type
   326 ;;  ui              2   33[COMRAM] unsigned int 
   327 ;;  btn             1   35[COMRAM] unsigned char 
   328 ;;  evt             1   32[COMRAM] unsigned char 
   329 ;; Return value:  Size  Location     Type
   330 ;;                  1    wreg      void 
   331 ;; Registers used:
   332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   333 ;; Tracked objects:
   334 ;;		On entry : 0/0
   335 ;;		On exit  : 0/0
   336 ;;		Unchanged: 0/0
   337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   338 ;;      Params:         0       0       0       0
   339 ;;      Locals:         4       0       0       0
   340 ;;      Temps:          0       0       0       0
   341 ;;      Totals:         4       0       0       0
   342 ;;Total ram usage:        4 bytes
   343 ;; Hardware stack levels required when called:    6
   344 ;; This function calls:
   345 ;;		_FMfrequenc
   346 ;;		_FMinit
   347 ;;		_FMvers
   348 ;;		_FMwrite
   349 ;;		_Init
   350 ;;		_butnEvent
   351 ;;		_dly
   352 ;;		_errfm
   353 ;;		_nextChan
   354 ;;		_scanNext
   355 ;;		_setVolume
   356 ;; This function is called by:
   357 ;;		Startup code after reset
   358 ;; This function uses a non-reentrant model
   359 ;;
   360                           
   361                           	psect	text0
   362  0009D6                     __ptext0:
   363                           	opt stack 0
   364  0009D6                     _main:
   365                           	opt stack 25
   366                           
   367                           ;main.c: 1036: unsigned char btn;
   368                           ;main.c: 1037: unsigned char evt;
   369                           ;main.c: 1038: unsigned int ui;
   370                           ;main.c: 1040: dly(2);
   371                           
   372                           ;incstack = 0
   373  0009D6  0E00               	movlw	0
   374  0009D8  6E28               	movwf	dly@d+1,c
   375  0009DA  0E02               	movlw	2
   376  0009DC  6E27               	movwf	dly@d,c
   377  0009DE  EC0F  F008         	call	_dly	;wreg free
   378                           
   379                           ;main.c: 1041: Init();
   380  0009E2  EC8B  F007         	call	_Init	;wreg free
   381                           
   382                           ;main.c: 1042: FMvers(&ui);
   383  0009E6  0E48               	movlw	low main@ui
   384  0009E8  6E32               	movwf	FMvers@vsn,c
   385  0009EA  0E00               	movlw	high main@ui
   386  0009EC  6E33               	movwf	FMvers@vsn+1,c
   387  0009EE  EC67  F008         	call	_FMvers	;wreg free
   388                           
   389                           ;main.c: 1043: if (ui != 0x1010) errfm();
   390  0009F2  0E10               	movlw	16
   391  0009F4  1848               	xorwf	main@ui,w,c
   392  0009F6  E103               	bnz	u1240
   393  0009F8  0E10               	movlw	16
   394  0009FA  1849               	xorwf	main@ui+1,w,c
   395  0009FC  A4D8               	btfss	status,2,c
   396  0009FE                     u1240:
   397  0009FE  EC6F  F008         	call	_errfm	;wreg free
   398                           
   399                           ;main.c: 1044: if (FMinit() != 0) errfm();
   400  000A02  EC33  F006         	call	_FMinit	;wreg free
   401  000A06  0900               	iorlw	0
   402  000A08  A4D8               	btfss	status,2,c
   403  000A0A  EC6F  F008         	call	_errfm	;wreg free
   404                           
   405                           ;main.c: 1045: freq = 964;
   406  000A0E  0E03               	movlw	3
   407  000A10  6E26               	movwf	_freq+1,c
   408  000A12  0EC4               	movlw	196
   409  000A14  6E25               	movwf	_freq,c
   410                           
   411                           ;main.c: 1046: FMfrequenc(freq);
   412  000A16  C025  F038         	movff	_freq,FMfrequenc@f
   413  000A1A  C026  F039         	movff	_freq+1,FMfrequenc@f+1
   414  000A1E  EC52  F007         	call	_FMfrequenc	;wreg free
   415                           
   416                           ;main.c: 1047: regImg[3] |= 0x0480;
   417  000A22  0E80               	movlw	128
   418  000A24  1207               	iorwf	_regImg+6,f,c
   419  000A26  0E04               	movlw	4
   420  000A28  1208               	iorwf	_regImg+7,f,c
   421                           
   422                           ;main.c: 1048: FMwrite(3);
   423  000A2A  0E03               	movlw	3
   424  000A2C  ECD8  F006         	call	_FMwrite
   425                           
   426                           ;main.c: 1049: regImg[14] |= 0xF000;
   427  000A30  0E00               	movlw	0
   428  000A32  121D               	iorwf	_regImg+28,f,c
   429  000A34  0EF0               	movlw	240
   430  000A36  121E               	iorwf	_regImg+29,f,c
   431                           
   432                           ;main.c: 1050: FMwrite(14);
   433  000A38  0E0E               	movlw	14
   434  000A3A  ECD8  F006         	call	_FMwrite
   435  000A3E                     l3458:
   436                           
   437                           ;main.c: 1054: evt = butnEvent(&btn);
   438  000A3E  0E4A               	movlw	low main@btn
   439  000A40  6E2B               	movwf	butnEvent@btn,c
   440  000A42  0E00               	movlw	high main@btn
   441  000A44  6E2C               	movwf	butnEvent@btn+1,c
   442  000A46  EC60  F005         	call	_butnEvent	;wreg free
   443  000A4A  6E47               	movwf	main@evt,c
   444                           
   445                           ;main.c: 1056: if (evt == 1)
   446  000A4C  0447               	decf	main@evt,w,c
   447  000A4E  B4D8               	btfsc	status,2,c
   448  000A50  D01F               	goto	l3478
   449  000A52  D7F5               	goto	l3458
   450  000A54                     l3464:
   451  000A54  0E01               	movlw	1
   452  000A56  EC94  F006         	call	_nextChan
   453  000A5A  D7F1               	goto	l3458
   454  000A5C                     l3466:
   455  000A5C  0E00               	movlw	0
   456  000A5E  EC94  F006         	call	_nextChan
   457  000A62  D7ED               	goto	l3458
   458  000A64                     l3468:
   459  000A64  0E01               	movlw	1
   460  000A66  EC19  F007         	call	_scanNext
   461  000A6A  D7E9               	goto	l3458
   462  000A6C                     l3470:
   463  000A6C  0E00               	movlw	0
   464  000A6E  EC19  F007         	call	_scanNext
   465  000A72  D7E5               	goto	l3458
   466  000A74                     l3472:
   467  000A74  0E00               	movlw	0
   468  000A76  6E2F               	movwf	setVolume@vol+1,c
   469  000A78  0E01               	movlw	1
   470  000A7A  6E2E               	movwf	setVolume@vol,c
   471  000A7C  EC93  F001         	call	_setVolume	;wreg free
   472  000A80  D7DE               	goto	l3458
   473  000A82                     l3474:
   474  000A82  0E00               	movlw	0
   475  000A84  6E2F               	movwf	setVolume@vol+1,c
   476  000A86  0E00               	movlw	0
   477  000A88  6E2E               	movwf	setVolume@vol,c
   478  000A8A  EC93  F001         	call	_setVolume	;wreg free
   479                           
   480                           ;main.c: 1069: }
   481                           
   482                           ;main.c: 1068: default : break;
   483                           
   484                           ;main.c: 1066: case 0b10000000 : ; break;
   485                           
   486                           ;main.c: 1065: case 0b01000000 : ; break;
   487  000A8E  D7D7               	goto	l3458
   488  000A90                     l3478:
   489  000A90  504A               	movf	main@btn,w,c
   490                           
   491                           ; Switch size 1, requested type "space"
   492                           ; Number of cases is 8, Range of values is 1 to 128
   493                           ; switch strategies available:
   494                           ; Name         Instructions Cycles
   495                           ; simple_byte           25    13 (average)
   496                           ;	Chosen strategy is simple_byte
   497  000A92  0A01               	xorlw	1	; case 1
   498  000A94  B4D8               	btfsc	status,2,c
   499  000A96  D7DE               	goto	l3464
   500  000A98  0A03               	xorlw	3	; case 2
   501  000A9A  B4D8               	btfsc	status,2,c
   502  000A9C  D7DF               	goto	l3466
   503  000A9E  0A06               	xorlw	6	; case 4
   504  000AA0  B4D8               	btfsc	status,2,c
   505  000AA2  D7E0               	goto	l3468
   506  000AA4  0A0C               	xorlw	12	; case 8
   507  000AA6  B4D8               	btfsc	status,2,c
   508  000AA8  D7E1               	goto	l3470
   509  000AAA  0A18               	xorlw	24	; case 16
   510  000AAC  B4D8               	btfsc	status,2,c
   511  000AAE  D7E2               	goto	l3472
   512  000AB0  0A30               	xorlw	48	; case 32
   513  000AB2  B4D8               	btfsc	status,2,c
   514  000AB4  D7E6               	goto	l3474
   515  000AB6  0A60               	xorlw	96	; case 64
   516  000AB8  B4D8               	btfsc	status,2,c
   517  000ABA  D7C1               	goto	l3458
   518  000ABC  0AC0               	xorlw	192	; case 128
   519                           
   520                           ;main.c: 1070: }
   521  000ABE  D7BF               	goto	l3458
   522  000AC0                     __end_of_main:
   523                           	opt stack 0
   524                           tblptru	equ	0xFF8
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           status	equ	0xFD8
   528                           
   529 ;; *************** function _setVolume *****************
   530 ;; Defined at:
   531 ;;		line 767 in file "main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;  vol             2    7[COMRAM] int 
   534 ;; Auto vars:     Size  Location     Type
   535 ;;  current         2   15[COMRAM] unsigned int 
   536 ;;  current1        2   13[COMRAM] unsigned int 
   537 ;;  current2        2   11[COMRAM] unsigned int 
   538 ;;  a               2    0        int 
   539 ;; Return value:  Size  Location     Type
   540 ;;                  1    wreg      void 
   541 ;; Registers used:
   542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   543 ;; Tracked objects:
   544 ;;		On entry : 0/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   548 ;;      Params:         2       0       0       0
   549 ;;      Locals:         6       0       0       0
   550 ;;      Temps:          2       0       0       0
   551 ;;      Totals:        10       0       0       0
   552 ;;Total ram usage:       10 bytes
   553 ;; Hardware stack levels used:    1
   554 ;; Hardware stack levels required when called:    3
   555 ;; This function calls:
   556 ;;		_FMwrite
   557 ;; This function is called by:
   558 ;;		_main
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562                           	psect	text1
   563  000326                     __ptext1:
   564                           	opt stack 0
   565  000326                     _setVolume:
   566                           	opt stack 27
   567                           
   568                           ;main.c: 770: int a;
   569                           ;main.c: 772: unsigned int current1, current2, current;
   570                           ;main.c: 776: current1 = (regImg[3]&0x0780);
   571                           
   572                           ;incstack = 0
   573  000326  0E80               	movlw	128
   574  000328  1407               	andwf	_regImg+6,w,c
   575  00032A  6E34               	movwf	setVolume@current1,c
   576  00032C  0E07               	movlw	7
   577  00032E  1408               	andwf	_regImg+7,w,c
   578  000330  6E35               	movwf	setVolume@current1+1,c
   579                           
   580                           ;main.c: 777: current1 <<= 1;
   581  000332  90D8               	bcf	status,0,c
   582  000334  3634               	rlcf	setVolume@current1,f,c
   583  000336  3635               	rlcf	setVolume@current1+1,f,c
   584                           
   585                           ;main.c: 778: current2 = (regImg[14]&0xF000);
   586  000338  0E00               	movlw	0
   587  00033A  141D               	andwf	_regImg+28,w,c
   588  00033C  6E32               	movwf	setVolume@current2,c
   589  00033E  0EF0               	movlw	240
   590  000340  141E               	andwf	_regImg+29,w,c
   591  000342  6E33               	movwf	setVolume@current2+1,c
   592                           
   593                           ;main.c: 779: current = (current1 | current2);
   594  000344  5032               	movf	setVolume@current2,w,c
   595  000346  1034               	iorwf	setVolume@current1,w,c
   596  000348  6E36               	movwf	setVolume@current,c
   597  00034A  5033               	movf	setVolume@current2+1,w,c
   598  00034C  1035               	iorwf	setVolume@current1+1,w,c
   599  00034E  6E37               	movwf	setVolume@current+1,c
   600                           
   601                           ;main.c: 783: if (vol == 1)
   602  000350  042E               	decf	setVolume@vol,w,c
   603  000352  102F               	iorwf	setVolume@vol+1,w,c
   604  000354  B4D8               	btfsc	status,2,c
   605  000356  D102               	goto	l3146
   606  000358  D19C               	goto	l3148
   607  00035A                     l3030:
   608                           
   609                           ;main.c: 787: regImg[3] |= 0x0780;
   610  00035A  0E80               	movlw	128
   611  00035C  1207               	iorwf	_regImg+6,f,c
   612  00035E  0E07               	movlw	7
   613  000360  1208               	iorwf	_regImg+7,f,c
   614                           
   615                           ;main.c: 788: FMwrite(3);
   616  000362  0E03               	movlw	3
   617  000364  ECD8  F006         	call	_FMwrite
   618                           
   619                           ;main.c: 789: regImg[14] |= 0xC000;
   620  000368  0E00               	movlw	0
   621  00036A  121D               	iorwf	_regImg+28,f,c
   622  00036C  0EC0               	movlw	192
   623  00036E  121E               	iorwf	_regImg+29,f,c
   624                           
   625                           ;main.c: 790: FMwrite(14);
   626  000370  0E0E               	movlw	14
   627  000372  ECD8  F006         	call	_FMwrite
   628                           
   629                           ;main.c: 791: break;
   630  000376  D18D               	goto	l3148
   631  000378                     l3036:
   632                           
   633                           ;main.c: 794: regImg[3] |= 0x0780;
   634  000378  0E80               	movlw	128
   635  00037A  1207               	iorwf	_regImg+6,f,c
   636  00037C  0E07               	movlw	7
   637  00037E  1208               	iorwf	_regImg+7,f,c
   638                           
   639                           ;main.c: 795: FMwrite(3);
   640  000380  0E03               	movlw	3
   641  000382  ECD8  F006         	call	_FMwrite
   642                           
   643                           ;main.c: 796: regImg[14] |= 0xD000;
   644  000386  0E00               	movlw	0
   645  000388  121D               	iorwf	_regImg+28,f,c
   646  00038A  0ED0               	movlw	208
   647  00038C  121E               	iorwf	_regImg+29,f,c
   648                           
   649                           ;main.c: 797: FMwrite(14);
   650  00038E  0E0E               	movlw	14
   651  000390  ECD8  F006         	call	_FMwrite
   652                           
   653                           ;main.c: 798: break;
   654  000394  D17E               	goto	l3148
   655  000396                     l3042:
   656                           
   657                           ;main.c: 801: regImg[3] |= 0x0780;
   658  000396  0E80               	movlw	128
   659  000398  1207               	iorwf	_regImg+6,f,c
   660  00039A  0E07               	movlw	7
   661  00039C  1208               	iorwf	_regImg+7,f,c
   662                           
   663                           ;main.c: 802: FMwrite(3);
   664  00039E  0E03               	movlw	3
   665  0003A0  ECD8  F006         	call	_FMwrite
   666                           
   667                           ;main.c: 803: regImg[14] |= 0xF000;
   668  0003A4  0E00               	movlw	0
   669  0003A6  121D               	iorwf	_regImg+28,f,c
   670  0003A8  0EF0               	movlw	240
   671  0003AA  121E               	iorwf	_regImg+29,f,c
   672                           
   673                           ;main.c: 804: FMwrite(14);
   674  0003AC  0E0E               	movlw	14
   675  0003AE  ECD8  F006         	call	_FMwrite
   676                           
   677                           ;main.c: 805: break;
   678  0003B2  D16F               	goto	l3148
   679  0003B4                     l3048:
   680                           
   681                           ;main.c: 808: regImg[3] |= 0x0580;
   682  0003B4  0E80               	movlw	128
   683  0003B6  1207               	iorwf	_regImg+6,f,c
   684  0003B8  0E05               	movlw	5
   685  0003BA  1208               	iorwf	_regImg+7,f,c
   686                           
   687                           ;main.c: 809: FMwrite(3);
   688  0003BC  0E03               	movlw	3
   689  0003BE  ECD8  F006         	call	_FMwrite
   690                           
   691                           ;main.c: 810: regImg[14] |= 0xC000;
   692  0003C2  0E00               	movlw	0
   693  0003C4  121D               	iorwf	_regImg+28,f,c
   694  0003C6  0EC0               	movlw	192
   695  0003C8  121E               	iorwf	_regImg+29,f,c
   696                           
   697                           ;main.c: 811: FMwrite(14);
   698  0003CA  0E0E               	movlw	14
   699  0003CC  ECD8  F006         	call	_FMwrite
   700                           
   701                           ;main.c: 812: break;
   702  0003D0  D160               	goto	l3148
   703  0003D2                     l3054:
   704                           
   705                           ;main.c: 815: regImg[3] |= 0x0580;
   706  0003D2  0E80               	movlw	128
   707  0003D4  1207               	iorwf	_regImg+6,f,c
   708  0003D6  0E05               	movlw	5
   709  0003D8  1208               	iorwf	_regImg+7,f,c
   710                           
   711                           ;main.c: 816: FMwrite(3);
   712  0003DA  0E03               	movlw	3
   713  0003DC  ECD8  F006         	call	_FMwrite
   714                           
   715                           ;main.c: 817: regImg[14] |= 0xD000;
   716  0003E0  0E00               	movlw	0
   717  0003E2  121D               	iorwf	_regImg+28,f,c
   718  0003E4  0ED0               	movlw	208
   719  0003E6  121E               	iorwf	_regImg+29,f,c
   720                           
   721                           ;main.c: 818: FMwrite(14);
   722  0003E8  0E0E               	movlw	14
   723  0003EA  ECD8  F006         	call	_FMwrite
   724                           
   725                           ;main.c: 819: break;
   726  0003EE  D151               	goto	l3148
   727  0003F0                     l3060:
   728                           
   729                           ;main.c: 821: regImg[3] |= 0x0580;
   730  0003F0  0E80               	movlw	128
   731  0003F2  1207               	iorwf	_regImg+6,f,c
   732  0003F4  0E05               	movlw	5
   733  0003F6  1208               	iorwf	_regImg+7,f,c
   734                           
   735                           ;main.c: 822: FMwrite(3);
   736  0003F8  0E03               	movlw	3
   737  0003FA  ECD8  F006         	call	_FMwrite
   738                           
   739                           ;main.c: 823: regImg[14] |= 0xF000;
   740  0003FE  0E00               	movlw	0
   741  000400  121D               	iorwf	_regImg+28,f,c
   742  000402  0EF0               	movlw	240
   743  000404  121E               	iorwf	_regImg+29,f,c
   744                           
   745                           ;main.c: 824: FMwrite(14);
   746  000406  0E0E               	movlw	14
   747  000408  ECD8  F006         	call	_FMwrite
   748                           
   749                           ;main.c: 825: break;
   750  00040C  D142               	goto	l3148
   751  00040E                     l3066:
   752                           
   753                           ;main.c: 827: regImg[3] |= 0x0500;
   754  00040E  0E00               	movlw	0
   755  000410  1207               	iorwf	_regImg+6,f,c
   756  000412  0E05               	movlw	5
   757  000414  1208               	iorwf	_regImg+7,f,c
   758                           
   759                           ;main.c: 828: FMwrite(3);
   760  000416  0E03               	movlw	3
   761  000418  ECD8  F006         	call	_FMwrite
   762                           
   763                           ;main.c: 829: regImg[14] |= 0xF000;
   764  00041C  0E00               	movlw	0
   765  00041E  121D               	iorwf	_regImg+28,f,c
   766  000420  0EF0               	movlw	240
   767  000422  121E               	iorwf	_regImg+29,f,c
   768                           
   769                           ;main.c: 830: FMwrite(14);
   770  000424  0E0E               	movlw	14
   771  000426  ECD8  F006         	call	_FMwrite
   772                           
   773                           ;main.c: 831: break;
   774  00042A  D133               	goto	l3148
   775  00042C                     l3072:
   776                           
   777                           ;main.c: 833: regImg[3] |= 0x0480;
   778  00042C  0E80               	movlw	128
   779  00042E  1207               	iorwf	_regImg+6,f,c
   780  000430  0E04               	movlw	4
   781  000432  1208               	iorwf	_regImg+7,f,c
   782                           
   783                           ;main.c: 834: FMwrite(3);
   784  000434  0E03               	movlw	3
   785  000436  ECD8  F006         	call	_FMwrite
   786                           
   787                           ;main.c: 835: regImg[14] |= 0xF000;
   788  00043A  0E00               	movlw	0
   789  00043C  121D               	iorwf	_regImg+28,f,c
   790  00043E  0EF0               	movlw	240
   791  000440  121E               	iorwf	_regImg+29,f,c
   792                           
   793                           ;main.c: 836: FMwrite(14);
   794  000442  0E0E               	movlw	14
   795  000444  ECD8  F006         	call	_FMwrite
   796                           
   797                           ;main.c: 837: break;
   798  000448  D124               	goto	l3148
   799  00044A                     l3078:
   800                           
   801                           ;main.c: 839: regImg[3] |= 0x0400;
   802  00044A  8408               	bsf	_regImg+7,2,c
   803                           
   804                           ;main.c: 840: FMwrite(3);
   805  00044C  0E03               	movlw	3
   806  00044E  ECD8  F006         	call	_FMwrite
   807                           
   808                           ;main.c: 841: regImg[14] |= 0xF000;
   809  000452  0E00               	movlw	0
   810  000454  121D               	iorwf	_regImg+28,f,c
   811  000456  0EF0               	movlw	240
   812  000458  121E               	iorwf	_regImg+29,f,c
   813                           
   814                           ;main.c: 842: FMwrite(14);
   815  00045A  0E0E               	movlw	14
   816  00045C  ECD8  F006         	call	_FMwrite
   817                           
   818                           ;main.c: 843: break;
   819  000460  D118               	goto	l3148
   820  000462                     l3086:
   821                           
   822                           ;main.c: 845: regImg[3] |= 0x0380;
   823  000462  0E80               	movlw	128
   824  000464  1207               	iorwf	_regImg+6,f,c
   825  000466  0E03               	movlw	3
   826  000468  1208               	iorwf	_regImg+7,f,c
   827                           
   828                           ;main.c: 846: FMwrite(3);
   829  00046A  0E03               	movlw	3
   830  00046C  ECD8  F006         	call	_FMwrite
   831                           
   832                           ;main.c: 847: regImg[14] |= 0xF000;
   833  000470  0E00               	movlw	0
   834  000472  121D               	iorwf	_regImg+28,f,c
   835  000474  0EF0               	movlw	240
   836  000476  121E               	iorwf	_regImg+29,f,c
   837                           
   838                           ;main.c: 848: FMwrite(14);
   839  000478  0E0E               	movlw	14
   840  00047A  ECD8  F006         	call	_FMwrite
   841                           
   842                           ;main.c: 849: break;
   843  00047E  D109               	goto	l3148
   844  000480                     l3092:
   845                           
   846                           ;main.c: 851: regImg[3] |= 0x0300;
   847  000480  0E00               	movlw	0
   848  000482  1207               	iorwf	_regImg+6,f,c
   849  000484  0E03               	movlw	3
   850  000486  1208               	iorwf	_regImg+7,f,c
   851                           
   852                           ;main.c: 852: FMwrite(3);
   853  000488  0E03               	movlw	3
   854  00048A  ECD8  F006         	call	_FMwrite
   855                           
   856                           ;main.c: 853: regImg[14] |= 0xD000;
   857  00048E  0E00               	movlw	0
   858  000490  121D               	iorwf	_regImg+28,f,c
   859  000492  0ED0               	movlw	208
   860  000494  121E               	iorwf	_regImg+29,f,c
   861                           
   862                           ;main.c: 854: FMwrite(14);
   863  000496  0E0E               	movlw	14
   864  000498  ECD8  F006         	call	_FMwrite
   865                           
   866                           ;main.c: 855: break;
   867  00049C  D0FA               	goto	l3148
   868  00049E                     l3098:
   869                           
   870                           ;main.c: 857: regImg[3] |= 0x0300;
   871  00049E  0E00               	movlw	0
   872  0004A0  1207               	iorwf	_regImg+6,f,c
   873  0004A2  0E03               	movlw	3
   874  0004A4  1208               	iorwf	_regImg+7,f,c
   875                           
   876                           ;main.c: 858: FMwrite(3);
   877  0004A6  0E03               	movlw	3
   878  0004A8  ECD8  F006         	call	_FMwrite
   879                           
   880                           ;main.c: 859: regImg[14] |= 0xE000;
   881  0004AC  0E00               	movlw	0
   882  0004AE  121D               	iorwf	_regImg+28,f,c
   883  0004B0  0EE0               	movlw	224
   884  0004B2  121E               	iorwf	_regImg+29,f,c
   885                           
   886                           ;main.c: 860: FMwrite(14);
   887  0004B4  0E0E               	movlw	14
   888  0004B6  ECD8  F006         	call	_FMwrite
   889                           
   890                           ;main.c: 861: break;
   891  0004BA  D0EB               	goto	l3148
   892  0004BC                     l3104:
   893                           
   894                           ;main.c: 863: regImg[3] |= 0x0300;
   895  0004BC  0E00               	movlw	0
   896  0004BE  1207               	iorwf	_regImg+6,f,c
   897  0004C0  0E03               	movlw	3
   898  0004C2  1208               	iorwf	_regImg+7,f,c
   899                           
   900                           ;main.c: 864: FMwrite(3);
   901  0004C4  0E03               	movlw	3
   902  0004C6  ECD8  F006         	call	_FMwrite
   903                           
   904                           ;main.c: 865: regImg[14] |= 0xF000;
   905  0004CA  0E00               	movlw	0
   906  0004CC  121D               	iorwf	_regImg+28,f,c
   907  0004CE  0EF0               	movlw	240
   908  0004D0  121E               	iorwf	_regImg+29,f,c
   909                           
   910                           ;main.c: 866: FMwrite(14);
   911  0004D2  0E0E               	movlw	14
   912  0004D4  ECD8  F006         	call	_FMwrite
   913                           
   914                           ;main.c: 867: break;
   915  0004D8  D0DC               	goto	l3148
   916  0004DA                     l3110:
   917                           
   918                           ;main.c: 869: regImg[3] |= 0x0180;
   919  0004DA  0E80               	movlw	128
   920  0004DC  1207               	iorwf	_regImg+6,f,c
   921  0004DE  0E01               	movlw	1
   922  0004E0  1208               	iorwf	_regImg+7,f,c
   923                           
   924                           ;main.c: 870: FMwrite(3);
   925  0004E2  0E03               	movlw	3
   926  0004E4  ECD8  F006         	call	_FMwrite
   927                           
   928                           ;main.c: 871: regImg[14] |= 0xE000;
   929  0004E8  0E00               	movlw	0
   930  0004EA  121D               	iorwf	_regImg+28,f,c
   931  0004EC  0EE0               	movlw	224
   932  0004EE  121E               	iorwf	_regImg+29,f,c
   933                           
   934                           ;main.c: 872: FMwrite(14);
   935  0004F0  0E0E               	movlw	14
   936  0004F2  ECD8  F006         	call	_FMwrite
   937                           
   938                           ;main.c: 873: break;
   939  0004F6  D0CD               	goto	l3148
   940  0004F8                     l3116:
   941                           
   942                           ;main.c: 875: regImg[3] |= 0x0180;
   943  0004F8  0E80               	movlw	128
   944  0004FA  1207               	iorwf	_regImg+6,f,c
   945  0004FC  0E01               	movlw	1
   946  0004FE  1208               	iorwf	_regImg+7,f,c
   947                           
   948                           ;main.c: 876: FMwrite(3);
   949  000500  0E03               	movlw	3
   950  000502  ECD8  F006         	call	_FMwrite
   951                           
   952                           ;main.c: 877: regImg[14] |= 0xF000;
   953  000506  0E00               	movlw	0
   954  000508  121D               	iorwf	_regImg+28,f,c
   955  00050A  0EF0               	movlw	240
   956  00050C  121E               	iorwf	_regImg+29,f,c
   957                           
   958                           ;main.c: 878: FMwrite(14);
   959  00050E  0E0E               	movlw	14
   960  000510  ECD8  F006         	call	_FMwrite
   961                           
   962                           ;main.c: 879: break;
   963  000514  D0BE               	goto	l3148
   964  000516                     l3122:
   965                           
   966                           ;main.c: 881: regImg[3] |= 0x0100;
   967  000516  8008               	bsf	_regImg+7,0,c
   968                           
   969                           ;main.c: 882: FMwrite(3);
   970  000518  0E03               	movlw	3
   971  00051A  ECD8  F006         	call	_FMwrite
   972                           
   973                           ;main.c: 883: regImg[14] |= 0xF000;
   974  00051E  0E00               	movlw	0
   975  000520  121D               	iorwf	_regImg+28,f,c
   976  000522  0EF0               	movlw	240
   977  000524  121E               	iorwf	_regImg+29,f,c
   978                           
   979                           ;main.c: 884: FMwrite(14);
   980  000526  0E0E               	movlw	14
   981  000528  ECD8  F006         	call	_FMwrite
   982                           
   983                           ;main.c: 885: break;
   984  00052C  D0B2               	goto	l3148
   985  00052E                     l3130:
   986                           
   987                           ;main.c: 887: regImg[3] |= 0x0080;
   988  00052E  8E07               	bsf	_regImg+6,7,c
   989                           
   990                           ;main.c: 888: FMwrite(3);
   991  000530  0E03               	movlw	3
   992  000532  ECD8  F006         	call	_FMwrite
   993                           
   994                           ;main.c: 889: regImg[14] |= 0xF000;
   995  000536  0E00               	movlw	0
   996  000538  121D               	iorwf	_regImg+28,f,c
   997  00053A  0EF0               	movlw	240
   998  00053C  121E               	iorwf	_regImg+29,f,c
   999                           
  1000                           ;main.c: 890: FMwrite(14);
  1001  00053E  0E0E               	movlw	14
  1002  000540  ECD8  F006         	call	_FMwrite
  1003                           
  1004                           ;main.c: 891: break;
  1005  000544  D0A6               	goto	l3148
  1006  000546                     l3138:
  1007                           
  1008                           ;main.c: 894: FMwrite(3);
  1009  000546  0E03               	movlw	3
  1010  000548  ECD8  F006         	call	_FMwrite
  1011                           
  1012                           ;main.c: 895: regImg[14] |= 0xF000;
  1013  00054C  0E00               	movlw	0
  1014  00054E  121D               	iorwf	_regImg+28,f,c
  1015  000550  0EF0               	movlw	240
  1016  000552  121E               	iorwf	_regImg+29,f,c
  1017                           
  1018                           ;main.c: 896: FMwrite(14);
  1019  000554  0E0E               	movlw	14
  1020  000556  ECD8  F006         	call	_FMwrite
  1021                           
  1022                           ;main.c: 903: }
  1023                           
  1024                           ;main.c: 902: default : break;
  1025                           
  1026                           ;main.c: 900: break;
  1027                           
  1028                           ;main.c: 898: case 0xF000 :
  1029                           
  1030                           ;main.c: 897: break;
  1031  00055A  D09B               	goto	l3148
  1032  00055C                     l3146:
  1033  00055C  C036  F030         	movff	setVolume@current,??_setVolume
  1034  000560  C037  F031         	movff	setVolume@current+1,??_setVolume+1
  1035                           
  1036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 19 sub-s
      +                          witches
  1037                           ; Switch size 1, requested type "space"
  1038                           ; Number of cases is 19, Range of values is 15 to 255
  1039                           ; switch strategies available:
  1040                           ; Name         Instructions Cycles
  1041                           ; simple_byte           58    30 (average)
  1042                           ;	Chosen strategy is simple_byte
  1043  000564  5031               	movf	??_setVolume+1,w,c
  1044  000566  0A0F               	xorlw	15	; case 15
  1045  000568  B4D8               	btfsc	status,2,c
  1046  00056A  D037               	goto	l4240
  1047  00056C  0AC4               	xorlw	196	; case 203
  1048  00056E  B4D8               	btfsc	status,2,c
  1049  000570  D039               	goto	l4242
  1050  000572  0A04               	xorlw	4	; case 207
  1051  000574  B4D8               	btfsc	status,2,c
  1052  000576  D03B               	goto	l4244
  1053  000578  0A19               	xorlw	25	; case 214
  1054  00057A  B4D8               	btfsc	status,2,c
  1055  00057C  D03D               	goto	l4246
  1056  00057E  0A0D               	xorlw	13	; case 219
  1057  000580  B4D8               	btfsc	status,2,c
  1058  000582  D03F               	goto	l4248
  1059  000584  0A04               	xorlw	4	; case 223
  1060  000586  B4D8               	btfsc	status,2,c
  1061  000588  D041               	goto	l4250
  1062  00058A  0A3C               	xorlw	60	; case 227
  1063  00058C  B4D8               	btfsc	status,2,c
  1064  00058E  D043               	goto	l4252
  1065  000590  0A05               	xorlw	5	; case 230
  1066  000592  B4D8               	btfsc	status,2,c
  1067  000594  D045               	goto	l4254
  1068  000596  0A16               	xorlw	22	; case 240
  1069  000598  B4D8               	btfsc	status,2,c
  1070  00059A  D047               	goto	l4256
  1071  00059C  0A01               	xorlw	1	; case 241
  1072  00059E  B4D8               	btfsc	status,2,c
  1073  0005A0  D047               	goto	l4258
  1074  0005A2  0A03               	xorlw	3	; case 242
  1075  0005A4  B4D8               	btfsc	status,2,c
  1076  0005A6  D049               	goto	l4260
  1077  0005A8  0A01               	xorlw	1	; case 243
  1078  0005AA  B4D8               	btfsc	status,2,c
  1079  0005AC  D04B               	goto	l4262
  1080  0005AE  0A05               	xorlw	5	; case 246
  1081  0005B0  B4D8               	btfsc	status,2,c
  1082  0005B2  D04D               	goto	l4264
  1083  0005B4  0A01               	xorlw	1	; case 247
  1084  0005B6  B4D8               	btfsc	status,2,c
  1085  0005B8  D04F               	goto	l4266
  1086  0005BA  0A0F               	xorlw	15	; case 248
  1087  0005BC  B4D8               	btfsc	status,2,c
  1088  0005BE  D051               	goto	l4268
  1089  0005C0  0A01               	xorlw	1	; case 249
  1090  0005C2  B4D8               	btfsc	status,2,c
  1091  0005C4  D053               	goto	l4270
  1092  0005C6  0A03               	xorlw	3	; case 250
  1093  0005C8  B4D8               	btfsc	status,2,c
  1094  0005CA  D055               	goto	l4272
  1095  0005CC  0A01               	xorlw	1	; case 251
  1096  0005CE  B4D8               	btfsc	status,2,c
  1097  0005D0  D057               	goto	l4274
  1098  0005D2  0A04               	xorlw	4	; case 255
  1099  0005D4  B4D8               	btfsc	status,2,c
  1100  0005D6  D059               	goto	l4276
  1101  0005D8  D05C               	goto	l3148
  1102  0005DA                     l4240:
  1103                           
  1104                           ; Switch size 1, requested type "space"
  1105                           ; Number of cases is 1, Range of values is 0 to 0
  1106                           ; switch strategies available:
  1107                           ; Name         Instructions Cycles
  1108                           ; simple_byte            4     3 (average)
  1109                           ;	Chosen strategy is simple_byte
  1110  0005DA  5030               	movf	??_setVolume,w,c
  1111  0005DC  0A00               	xorlw	0	; case 0
  1112  0005DE  B4D8               	btfsc	status,2,c
  1113  0005E0  D6BC               	goto	l3030
  1114  0005E2  D057               	goto	l3148
  1115  0005E4                     l4242:
  1116                           
  1117                           ; Switch size 1, requested type "space"
  1118                           ; Number of cases is 1, Range of values is 0 to 0
  1119                           ; switch strategies available:
  1120                           ; Name         Instructions Cycles
  1121                           ; simple_byte            4     3 (average)
  1122                           ;	Chosen strategy is simple_byte
  1123  0005E4  5030               	movf	??_setVolume,w,c
  1124  0005E6  0A00               	xorlw	0	; case 0
  1125  0005E8  B4D8               	btfsc	status,2,c
  1126  0005EA  D6F3               	goto	l3054
  1127  0005EC  D052               	goto	l3148
  1128  0005EE                     l4244:
  1129                           
  1130                           ; Switch size 1, requested type "space"
  1131                           ; Number of cases is 1, Range of values is 0 to 0
  1132                           ; switch strategies available:
  1133                           ; Name         Instructions Cycles
  1134                           ; simple_byte            4     3 (average)
  1135                           ;	Chosen strategy is simple_byte
  1136  0005EE  5030               	movf	??_setVolume,w,c
  1137  0005F0  0A00               	xorlw	0	; case 0
  1138  0005F2  B4D8               	btfsc	status,2,c
  1139  0005F4  D6C1               	goto	l3036
  1140  0005F6  D04D               	goto	l3148
  1141  0005F8                     l4246:
  1142                           
  1143                           ; Switch size 1, requested type "space"
  1144                           ; Number of cases is 1, Range of values is 0 to 0
  1145                           ; switch strategies available:
  1146                           ; Name         Instructions Cycles
  1147                           ; simple_byte            4     3 (average)
  1148                           ;	Chosen strategy is simple_byte
  1149  0005F8  5030               	movf	??_setVolume,w,c
  1150  0005FA  0A00               	xorlw	0	; case 0
  1151  0005FC  B4D8               	btfsc	status,2,c
  1152  0005FE  D74F               	goto	l3098
  1153  000600  D048               	goto	l3148
  1154  000602                     l4248:
  1155                           
  1156                           ; Switch size 1, requested type "space"
  1157                           ; Number of cases is 1, Range of values is 0 to 0
  1158                           ; switch strategies available:
  1159                           ; Name         Instructions Cycles
  1160                           ; simple_byte            4     3 (average)
  1161                           ;	Chosen strategy is simple_byte
  1162  000602  5030               	movf	??_setVolume,w,c
  1163  000604  0A00               	xorlw	0	; case 0
  1164  000606  B4D8               	btfsc	status,2,c
  1165  000608  D6F3               	goto	l3060
  1166  00060A  D043               	goto	l3148
  1167  00060C                     l4250:
  1168                           
  1169                           ; Switch size 1, requested type "space"
  1170                           ; Number of cases is 1, Range of values is 0 to 0
  1171                           ; switch strategies available:
  1172                           ; Name         Instructions Cycles
  1173                           ; simple_byte            4     3 (average)
  1174                           ;	Chosen strategy is simple_byte
  1175  00060C  5030               	movf	??_setVolume,w,c
  1176  00060E  0A00               	xorlw	0	; case 0
  1177  000610  B4D8               	btfsc	status,2,c
  1178  000612  D6C1               	goto	l3042
  1179  000614  D03E               	goto	l3148
  1180  000616                     l4252:
  1181                           
  1182                           ; Switch size 1, requested type "space"
  1183                           ; Number of cases is 1, Range of values is 0 to 0
  1184                           ; switch strategies available:
  1185                           ; Name         Instructions Cycles
  1186                           ; simple_byte            4     3 (average)
  1187                           ;	Chosen strategy is simple_byte
  1188  000616  5030               	movf	??_setVolume,w,c
  1189  000618  0A00               	xorlw	0	; case 0
  1190  00061A  B4D8               	btfsc	status,2,c
  1191  00061C  D76D               	goto	l3116
  1192  00061E  D039               	goto	l3148
  1193  000620                     l4254:
  1194                           
  1195                           ; Switch size 1, requested type "space"
  1196                           ; Number of cases is 1, Range of values is 0 to 0
  1197                           ; switch strategies available:
  1198                           ; Name         Instructions Cycles
  1199                           ; simple_byte            4     3 (average)
  1200                           ;	Chosen strategy is simple_byte
  1201  000620  5030               	movf	??_setVolume,w,c
  1202  000622  0A00               	xorlw	0	; case 0
  1203  000624  B4D8               	btfsc	status,2,c
  1204  000626  D74A               	goto	l3104
  1205  000628  D034               	goto	l3148
  1206  00062A                     l4256:
  1207                           
  1208                           ; Switch size 1, requested type "space"
  1209                           ; Number of cases is 1, Range of values is 0 to 0
  1210                           ; switch strategies available:
  1211                           ; Name         Instructions Cycles
  1212                           ; simple_byte            4     3 (average)
  1213                           ;	Chosen strategy is simple_byte
  1214  00062A  5030               	movf	??_setVolume,w,c
  1215  00062C  0A00               	xorlw	0	; case 0
  1216  00062E  D031               	goto	l3148
  1217  000630                     l4258:
  1218                           
  1219                           ; Switch size 1, requested type "space"
  1220                           ; Number of cases is 1, Range of values is 0 to 0
  1221                           ; switch strategies available:
  1222                           ; Name         Instructions Cycles
  1223                           ; simple_byte            4     3 (average)
  1224                           ;	Chosen strategy is simple_byte
  1225  000630  5030               	movf	??_setVolume,w,c
  1226  000632  0A00               	xorlw	0	; case 0
  1227  000634  B4D8               	btfsc	status,2,c
  1228  000636  D787               	goto	l3138
  1229  000638  D02C               	goto	l3148
  1230  00063A                     l4260:
  1231                           
  1232                           ; Switch size 1, requested type "space"
  1233                           ; Number of cases is 1, Range of values is 0 to 0
  1234                           ; switch strategies available:
  1235                           ; Name         Instructions Cycles
  1236                           ; simple_byte            4     3 (average)
  1237                           ;	Chosen strategy is simple_byte
  1238  00063A  5030               	movf	??_setVolume,w,c
  1239  00063C  0A00               	xorlw	0	; case 0
  1240  00063E  B4D8               	btfsc	status,2,c
  1241  000640  D776               	goto	l3130
  1242  000642  D027               	goto	l3148
  1243  000644                     l4262:
  1244                           
  1245                           ; Switch size 1, requested type "space"
  1246                           ; Number of cases is 1, Range of values is 0 to 0
  1247                           ; switch strategies available:
  1248                           ; Name         Instructions Cycles
  1249                           ; simple_byte            4     3 (average)
  1250                           ;	Chosen strategy is simple_byte
  1251  000644  5030               	movf	??_setVolume,w,c
  1252  000646  0A00               	xorlw	0	; case 0
  1253  000648  B4D8               	btfsc	status,2,c
  1254  00064A  D765               	goto	l3122
  1255  00064C  D022               	goto	l3148
  1256  00064E                     l4264:
  1257                           
  1258                           ; Switch size 1, requested type "space"
  1259                           ; Number of cases is 1, Range of values is 0 to 0
  1260                           ; switch strategies available:
  1261                           ; Name         Instructions Cycles
  1262                           ; simple_byte            4     3 (average)
  1263                           ;	Chosen strategy is simple_byte
  1264  00064E  5030               	movf	??_setVolume,w,c
  1265  000650  0A00               	xorlw	0	; case 0
  1266  000652  B4D8               	btfsc	status,2,c
  1267  000654  D742               	goto	l3110
  1268  000656  D01D               	goto	l3148
  1269  000658                     l4266:
  1270                           
  1271                           ; Switch size 1, requested type "space"
  1272                           ; Number of cases is 1, Range of values is 0 to 0
  1273                           ; switch strategies available:
  1274                           ; Name         Instructions Cycles
  1275                           ; simple_byte            4     3 (average)
  1276                           ;	Chosen strategy is simple_byte
  1277  000658  5030               	movf	??_setVolume,w,c
  1278  00065A  0A00               	xorlw	0	; case 0
  1279  00065C  B4D8               	btfsc	status,2,c
  1280  00065E  D710               	goto	l3092
  1281  000660  D018               	goto	l3148
  1282  000662                     l4268:
  1283                           
  1284                           ; Switch size 1, requested type "space"
  1285                           ; Number of cases is 1, Range of values is 0 to 0
  1286                           ; switch strategies available:
  1287                           ; Name         Instructions Cycles
  1288                           ; simple_byte            4     3 (average)
  1289                           ;	Chosen strategy is simple_byte
  1290  000662  5030               	movf	??_setVolume,w,c
  1291  000664  0A00               	xorlw	0	; case 0
  1292  000666  B4D8               	btfsc	status,2,c
  1293  000668  D6FC               	goto	l3086
  1294  00066A  D013               	goto	l3148
  1295  00066C                     l4270:
  1296                           
  1297                           ; Switch size 1, requested type "space"
  1298                           ; Number of cases is 1, Range of values is 0 to 0
  1299                           ; switch strategies available:
  1300                           ; Name         Instructions Cycles
  1301                           ; simple_byte            4     3 (average)
  1302                           ;	Chosen strategy is simple_byte
  1303  00066C  5030               	movf	??_setVolume,w,c
  1304  00066E  0A00               	xorlw	0	; case 0
  1305  000670  B4D8               	btfsc	status,2,c
  1306  000672  D6EB               	goto	l3078
  1307  000674  D00E               	goto	l3148
  1308  000676                     l4272:
  1309                           
  1310                           ; Switch size 1, requested type "space"
  1311                           ; Number of cases is 1, Range of values is 0 to 0
  1312                           ; switch strategies available:
  1313                           ; Name         Instructions Cycles
  1314                           ; simple_byte            4     3 (average)
  1315                           ;	Chosen strategy is simple_byte
  1316  000676  5030               	movf	??_setVolume,w,c
  1317  000678  0A00               	xorlw	0	; case 0
  1318  00067A  B4D8               	btfsc	status,2,c
  1319  00067C  D6D7               	goto	l3072
  1320  00067E  D009               	goto	l3148
  1321  000680                     l4274:
  1322                           
  1323                           ; Switch size 1, requested type "space"
  1324                           ; Number of cases is 1, Range of values is 0 to 0
  1325                           ; switch strategies available:
  1326                           ; Name         Instructions Cycles
  1327                           ; simple_byte            4     3 (average)
  1328                           ;	Chosen strategy is simple_byte
  1329  000680  5030               	movf	??_setVolume,w,c
  1330  000682  0A00               	xorlw	0	; case 0
  1331  000684  B4D8               	btfsc	status,2,c
  1332  000686  D6C3               	goto	l3066
  1333  000688  D004               	goto	l3148
  1334  00068A                     l4276:
  1335                           
  1336                           ; Switch size 1, requested type "space"
  1337                           ; Number of cases is 1, Range of values is 0 to 0
  1338                           ; switch strategies available:
  1339                           ; Name         Instructions Cycles
  1340                           ; simple_byte            4     3 (average)
  1341                           ;	Chosen strategy is simple_byte
  1342  00068A  5030               	movf	??_setVolume,w,c
  1343  00068C  0A00               	xorlw	0	; case 0
  1344  00068E  B4D8               	btfsc	status,2,c
  1345  000690  D691               	goto	l3048
  1346  000692                     l3148:
  1347                           
  1348                           ;main.c: 904: }
  1349                           ;main.c: 906: if (vol == 0)
  1350  000692  502E               	movf	setVolume@vol,w,c
  1351  000694  102F               	iorwf	setVolume@vol+1,w,c
  1352  000696  A4D8               	btfss	status,2,c
  1353  000698  0012               	return	
  1354  00069A  D101               	goto	l3268
  1355  00069C                     l3152:
  1356                           
  1357                           ;main.c: 914: regImg[3] |= 0x0780;
  1358  00069C  0E80               	movlw	128
  1359  00069E  1207               	iorwf	_regImg+6,f,c
  1360  0006A0  0E07               	movlw	7
  1361  0006A2  1208               	iorwf	_regImg+7,f,c
  1362                           
  1363                           ;main.c: 915: FMwrite(3);
  1364  0006A4  0E03               	movlw	3
  1365  0006A6  ECD8  F006         	call	_FMwrite
  1366                           
  1367                           ;main.c: 917: FMwrite(14);
  1368  0006AA  0E0E               	movlw	14
  1369  0006AC  ECD8  F006         	call	_FMwrite
  1370                           
  1371                           ;main.c: 918: break;
  1372  0006B0  0012               	return	
  1373  0006B2                     l3158:
  1374                           
  1375                           ;main.c: 921: regImg[3] |= 0x0780;
  1376  0006B2  0E80               	movlw	128
  1377  0006B4  1207               	iorwf	_regImg+6,f,c
  1378  0006B6  0E07               	movlw	7
  1379  0006B8  1208               	iorwf	_regImg+7,f,c
  1380                           
  1381                           ;main.c: 922: FMwrite(3);
  1382  0006BA  0E03               	movlw	3
  1383  0006BC  ECD8  F006         	call	_FMwrite
  1384                           
  1385                           ;main.c: 923: regImg[14] |= 0xC000;
  1386  0006C0  0E00               	movlw	0
  1387  0006C2  121D               	iorwf	_regImg+28,f,c
  1388  0006C4  0EC0               	movlw	192
  1389  0006C6  121E               	iorwf	_regImg+29,f,c
  1390                           
  1391                           ;main.c: 924: FMwrite(14);
  1392  0006C8  0E0E               	movlw	14
  1393  0006CA  ECD8  F006         	call	_FMwrite
  1394                           
  1395                           ;main.c: 925: break;
  1396  0006CE  0012               	return	
  1397  0006D0                     l3164:
  1398                           
  1399                           ;main.c: 928: regImg[3] |= 0x0780;
  1400  0006D0  0E80               	movlw	128
  1401  0006D2  1207               	iorwf	_regImg+6,f,c
  1402  0006D4  0E07               	movlw	7
  1403  0006D6  1208               	iorwf	_regImg+7,f,c
  1404                           
  1405                           ;main.c: 929: FMwrite(3);
  1406  0006D8  0E03               	movlw	3
  1407  0006DA  ECD8  F006         	call	_FMwrite
  1408                           
  1409                           ;main.c: 930: regImg[14] |= 0xD000;
  1410  0006DE  0E00               	movlw	0
  1411  0006E0  121D               	iorwf	_regImg+28,f,c
  1412  0006E2  0ED0               	movlw	208
  1413  0006E4  121E               	iorwf	_regImg+29,f,c
  1414                           
  1415                           ;main.c: 931: FMwrite(14);
  1416  0006E6  0E0E               	movlw	14
  1417  0006E8  ECD8  F006         	call	_FMwrite
  1418                           
  1419                           ;main.c: 932: break;
  1420  0006EC  0012               	return	
  1421  0006EE                     l3170:
  1422                           
  1423                           ;main.c: 935: regImg[3] |= 0x0780;
  1424  0006EE  0E80               	movlw	128
  1425  0006F0  1207               	iorwf	_regImg+6,f,c
  1426  0006F2  0E07               	movlw	7
  1427  0006F4  1208               	iorwf	_regImg+7,f,c
  1428                           
  1429                           ;main.c: 936: FMwrite(3);
  1430  0006F6  0E03               	movlw	3
  1431  0006F8  ECD8  F006         	call	_FMwrite
  1432                           
  1433                           ;main.c: 937: regImg[14] |= 0xF000;
  1434  0006FC  0E00               	movlw	0
  1435  0006FE  121D               	iorwf	_regImg+28,f,c
  1436  000700  0EF0               	movlw	240
  1437  000702  121E               	iorwf	_regImg+29,f,c
  1438                           
  1439                           ;main.c: 938: FMwrite(14);
  1440  000704  0E0E               	movlw	14
  1441  000706  ECD8  F006         	call	_FMwrite
  1442                           
  1443                           ;main.c: 939: break;
  1444  00070A  0012               	return	
  1445  00070C                     l3176:
  1446                           
  1447                           ;main.c: 941: regImg[3] |= 0x0580;
  1448  00070C  0E80               	movlw	128
  1449  00070E  1207               	iorwf	_regImg+6,f,c
  1450  000710  0E05               	movlw	5
  1451  000712  1208               	iorwf	_regImg+7,f,c
  1452                           
  1453                           ;main.c: 942: FMwrite(3);
  1454  000714  0E03               	movlw	3
  1455  000716  ECD8  F006         	call	_FMwrite
  1456                           
  1457                           ;main.c: 943: regImg[14] |= 0xC000;
  1458  00071A  0E00               	movlw	0
  1459  00071C  121D               	iorwf	_regImg+28,f,c
  1460  00071E  0EC0               	movlw	192
  1461  000720  121E               	iorwf	_regImg+29,f,c
  1462                           
  1463                           ;main.c: 944: FMwrite(14);
  1464  000722  0E0E               	movlw	14
  1465  000724  ECD8  F006         	call	_FMwrite
  1466                           
  1467                           ;main.c: 945: break;
  1468  000728  0012               	return	
  1469  00072A                     l3182:
  1470                           
  1471                           ;main.c: 947: regImg[3] |= 0x0580;
  1472  00072A  0E80               	movlw	128
  1473  00072C  1207               	iorwf	_regImg+6,f,c
  1474  00072E  0E05               	movlw	5
  1475  000730  1208               	iorwf	_regImg+7,f,c
  1476                           
  1477                           ;main.c: 948: FMwrite(3);
  1478  000732  0E03               	movlw	3
  1479  000734  ECD8  F006         	call	_FMwrite
  1480                           
  1481                           ;main.c: 949: regImg[14] |= 0xD000;
  1482  000738  0E00               	movlw	0
  1483  00073A  121D               	iorwf	_regImg+28,f,c
  1484  00073C  0ED0               	movlw	208
  1485  00073E  121E               	iorwf	_regImg+29,f,c
  1486                           
  1487                           ;main.c: 950: FMwrite(14);
  1488  000740  0E0E               	movlw	14
  1489  000742  ECD8  F006         	call	_FMwrite
  1490                           
  1491                           ;main.c: 951: break;
  1492  000746  0012               	return	
  1493  000748                     l3188:
  1494                           
  1495                           ;main.c: 953: regImg[3] |= 0x0580;
  1496  000748  0E80               	movlw	128
  1497  00074A  1207               	iorwf	_regImg+6,f,c
  1498  00074C  0E05               	movlw	5
  1499  00074E  1208               	iorwf	_regImg+7,f,c
  1500                           
  1501                           ;main.c: 954: FMwrite(3);
  1502  000750  0E03               	movlw	3
  1503  000752  ECD8  F006         	call	_FMwrite
  1504                           
  1505                           ;main.c: 955: regImg[14] |= 0xF000;
  1506  000756  0E00               	movlw	0
  1507  000758  121D               	iorwf	_regImg+28,f,c
  1508  00075A  0EF0               	movlw	240
  1509  00075C  121E               	iorwf	_regImg+29,f,c
  1510                           
  1511                           ;main.c: 956: FMwrite(14);
  1512  00075E  0E0E               	movlw	14
  1513  000760  ECD8  F006         	call	_FMwrite
  1514                           
  1515                           ;main.c: 957: break;
  1516  000764  0012               	return	
  1517  000766                     l3194:
  1518                           
  1519                           ;main.c: 959: regImg[3] |= 0x0500;
  1520  000766  0E00               	movlw	0
  1521  000768  1207               	iorwf	_regImg+6,f,c
  1522  00076A  0E05               	movlw	5
  1523  00076C  1208               	iorwf	_regImg+7,f,c
  1524                           
  1525                           ;main.c: 960: FMwrite(3);
  1526  00076E  0E03               	movlw	3
  1527  000770  ECD8  F006         	call	_FMwrite
  1528                           
  1529                           ;main.c: 961: regImg[14] |= 0xF000;
  1530  000774  0E00               	movlw	0
  1531  000776  121D               	iorwf	_regImg+28,f,c
  1532  000778  0EF0               	movlw	240
  1533  00077A  121E               	iorwf	_regImg+29,f,c
  1534                           
  1535                           ;main.c: 962: FMwrite(14);
  1536  00077C  0E0E               	movlw	14
  1537  00077E  ECD8  F006         	call	_FMwrite
  1538                           
  1539                           ;main.c: 963: break;
  1540  000782  0012               	return	
  1541  000784                     l3200:
  1542                           
  1543                           ;main.c: 965: regImg[3] |= 0x0480;
  1544  000784  0E80               	movlw	128
  1545  000786  1207               	iorwf	_regImg+6,f,c
  1546  000788  0E04               	movlw	4
  1547  00078A  1208               	iorwf	_regImg+7,f,c
  1548                           
  1549                           ;main.c: 966: FMwrite(3);
  1550  00078C  0E03               	movlw	3
  1551  00078E  ECD8  F006         	call	_FMwrite
  1552                           
  1553                           ;main.c: 967: regImg[14] |= 0xF000;
  1554  000792  0E00               	movlw	0
  1555  000794  121D               	iorwf	_regImg+28,f,c
  1556  000796  0EF0               	movlw	240
  1557  000798  121E               	iorwf	_regImg+29,f,c
  1558                           
  1559                           ;main.c: 968: FMwrite(14);
  1560  00079A  0E0E               	movlw	14
  1561  00079C  ECD8  F006         	call	_FMwrite
  1562                           
  1563                           ;main.c: 969: break;
  1564  0007A0  0012               	return	
  1565  0007A2                     l3206:
  1566                           
  1567                           ;main.c: 971: regImg[3] |= 0x0400;
  1568  0007A2  8408               	bsf	_regImg+7,2,c
  1569                           
  1570                           ;main.c: 972: FMwrite(3);
  1571  0007A4  0E03               	movlw	3
  1572  0007A6  ECD8  F006         	call	_FMwrite
  1573                           
  1574                           ;main.c: 973: regImg[14] |= 0xF000;
  1575  0007AA  0E00               	movlw	0
  1576  0007AC  121D               	iorwf	_regImg+28,f,c
  1577  0007AE  0EF0               	movlw	240
  1578  0007B0  121E               	iorwf	_regImg+29,f,c
  1579                           
  1580                           ;main.c: 974: FMwrite(14);
  1581  0007B2  0E0E               	movlw	14
  1582  0007B4  ECD8  F006         	call	_FMwrite
  1583                           
  1584                           ;main.c: 975: break;
  1585  0007B8  0012               	return	
  1586  0007BA                     l3214:
  1587                           
  1588                           ;main.c: 977: regImg[3] |= 0x0380;
  1589  0007BA  0E80               	movlw	128
  1590  0007BC  1207               	iorwf	_regImg+6,f,c
  1591  0007BE  0E03               	movlw	3
  1592  0007C0  1208               	iorwf	_regImg+7,f,c
  1593                           
  1594                           ;main.c: 978: FMwrite(3);
  1595  0007C2  0E03               	movlw	3
  1596  0007C4  ECD8  F006         	call	_FMwrite
  1597                           
  1598                           ;main.c: 979: regImg[14] |= 0xF000;
  1599  0007C8  0E00               	movlw	0
  1600  0007CA  121D               	iorwf	_regImg+28,f,c
  1601  0007CC  0EF0               	movlw	240
  1602  0007CE  121E               	iorwf	_regImg+29,f,c
  1603                           
  1604                           ;main.c: 980: FMwrite(14);
  1605  0007D0  0E0E               	movlw	14
  1606  0007D2  ECD8  F006         	call	_FMwrite
  1607                           
  1608                           ;main.c: 981: break;
  1609  0007D6  0012               	return	
  1610  0007D8                     l3220:
  1611                           
  1612                           ;main.c: 983: regImg[3] |= 0x0300;
  1613  0007D8  0E00               	movlw	0
  1614  0007DA  1207               	iorwf	_regImg+6,f,c
  1615  0007DC  0E03               	movlw	3
  1616  0007DE  1208               	iorwf	_regImg+7,f,c
  1617                           
  1618                           ;main.c: 984: FMwrite(3);
  1619  0007E0  0E03               	movlw	3
  1620  0007E2  ECD8  F006         	call	_FMwrite
  1621                           
  1622                           ;main.c: 985: regImg[14] |= 0xD000;
  1623  0007E6  0E00               	movlw	0
  1624  0007E8  121D               	iorwf	_regImg+28,f,c
  1625  0007EA  0ED0               	movlw	208
  1626  0007EC  121E               	iorwf	_regImg+29,f,c
  1627                           
  1628                           ;main.c: 986: FMwrite(14);
  1629  0007EE  0E0E               	movlw	14
  1630  0007F0  ECD8  F006         	call	_FMwrite
  1631                           
  1632                           ;main.c: 987: break;
  1633  0007F4  0012               	return	
  1634  0007F6                     l3226:
  1635                           
  1636                           ;main.c: 989: regImg[3] |= 0x0300;
  1637  0007F6  0E00               	movlw	0
  1638  0007F8  1207               	iorwf	_regImg+6,f,c
  1639  0007FA  0E03               	movlw	3
  1640  0007FC  1208               	iorwf	_regImg+7,f,c
  1641                           
  1642                           ;main.c: 990: FMwrite(3);
  1643  0007FE  0E03               	movlw	3
  1644  000800  ECD8  F006         	call	_FMwrite
  1645                           
  1646                           ;main.c: 991: regImg[14] |= 0xE000;
  1647  000804  0E00               	movlw	0
  1648  000806  121D               	iorwf	_regImg+28,f,c
  1649  000808  0EE0               	movlw	224
  1650  00080A  121E               	iorwf	_regImg+29,f,c
  1651                           
  1652                           ;main.c: 992: FMwrite(14);
  1653  00080C  0E0E               	movlw	14
  1654  00080E  ECD8  F006         	call	_FMwrite
  1655                           
  1656                           ;main.c: 993: break;
  1657  000812  0012               	return	
  1658  000814                     l3232:
  1659                           
  1660                           ;main.c: 995: regImg[3] |= 0x0300;
  1661  000814  0E00               	movlw	0
  1662  000816  1207               	iorwf	_regImg+6,f,c
  1663  000818  0E03               	movlw	3
  1664  00081A  1208               	iorwf	_regImg+7,f,c
  1665                           
  1666                           ;main.c: 996: FMwrite(3);
  1667  00081C  0E03               	movlw	3
  1668  00081E  ECD8  F006         	call	_FMwrite
  1669                           
  1670                           ;main.c: 997: regImg[14] |= 0xF000;
  1671  000822  0E00               	movlw	0
  1672  000824  121D               	iorwf	_regImg+28,f,c
  1673  000826  0EF0               	movlw	240
  1674  000828  121E               	iorwf	_regImg+29,f,c
  1675                           
  1676                           ;main.c: 998: FMwrite(14);
  1677  00082A  0E0E               	movlw	14
  1678  00082C  ECD8  F006         	call	_FMwrite
  1679                           
  1680                           ;main.c: 999: break;
  1681  000830  0012               	return	
  1682  000832                     l3238:
  1683                           
  1684                           ;main.c: 1001: regImg[3] |= 0x0180;
  1685  000832  0E80               	movlw	128
  1686  000834  1207               	iorwf	_regImg+6,f,c
  1687  000836  0E01               	movlw	1
  1688  000838  1208               	iorwf	_regImg+7,f,c
  1689                           
  1690                           ;main.c: 1002: FMwrite(3);
  1691  00083A  0E03               	movlw	3
  1692  00083C  ECD8  F006         	call	_FMwrite
  1693                           
  1694                           ;main.c: 1003: regImg[14] |= 0xE000;
  1695  000840  0E00               	movlw	0
  1696  000842  121D               	iorwf	_regImg+28,f,c
  1697  000844  0EE0               	movlw	224
  1698  000846  121E               	iorwf	_regImg+29,f,c
  1699                           
  1700                           ;main.c: 1004: FMwrite(14);
  1701  000848  0E0E               	movlw	14
  1702  00084A  ECD8  F006         	call	_FMwrite
  1703                           
  1704                           ;main.c: 1005: break;
  1705  00084E  0012               	return	
  1706  000850                     l3244:
  1707                           
  1708                           ;main.c: 1007: regImg[3] |= 0x0180;
  1709  000850  0E80               	movlw	128
  1710  000852  1207               	iorwf	_regImg+6,f,c
  1711  000854  0E01               	movlw	1
  1712  000856  1208               	iorwf	_regImg+7,f,c
  1713                           
  1714                           ;main.c: 1008: FMwrite(3);
  1715  000858  0E03               	movlw	3
  1716  00085A  ECD8  F006         	call	_FMwrite
  1717                           
  1718                           ;main.c: 1009: regImg[14] |= 0xF000;
  1719  00085E  0E00               	movlw	0
  1720  000860  121D               	iorwf	_regImg+28,f,c
  1721  000862  0EF0               	movlw	240
  1722  000864  121E               	iorwf	_regImg+29,f,c
  1723                           
  1724                           ;main.c: 1010: FMwrite(14);
  1725  000866  0E0E               	movlw	14
  1726  000868  ECD8  F006         	call	_FMwrite
  1727                           
  1728                           ;main.c: 1011: break;
  1729  00086C  0012               	return	
  1730  00086E                     l3250:
  1731                           
  1732                           ;main.c: 1013: regImg[3] |= 0x0100;
  1733  00086E  8008               	bsf	_regImg+7,0,c
  1734                           
  1735                           ;main.c: 1014: FMwrite(3);
  1736  000870  0E03               	movlw	3
  1737  000872  ECD8  F006         	call	_FMwrite
  1738                           
  1739                           ;main.c: 1015: regImg[14] |= 0xF000;
  1740  000876  0E00               	movlw	0
  1741  000878  121D               	iorwf	_regImg+28,f,c
  1742  00087A  0EF0               	movlw	240
  1743  00087C  121E               	iorwf	_regImg+29,f,c
  1744                           
  1745                           ;main.c: 1016: FMwrite(14);
  1746  00087E  0E0E               	movlw	14
  1747  000880  ECD8  F006         	call	_FMwrite
  1748                           
  1749                           ;main.c: 1017: break;
  1750  000884  0012               	return	
  1751  000886                     l3258:
  1752                           
  1753                           ;main.c: 1019: regImg[3] |= 0x0080;
  1754  000886  8E07               	bsf	_regImg+6,7,c
  1755                           
  1756                           ;main.c: 1020: FMwrite(3);
  1757  000888  0E03               	movlw	3
  1758  00088A  ECD8  F006         	call	_FMwrite
  1759                           
  1760                           ;main.c: 1021: regImg[14] |= 0xF000;
  1761  00088E  0E00               	movlw	0
  1762  000890  121D               	iorwf	_regImg+28,f,c
  1763  000892  0EF0               	movlw	240
  1764  000894  121E               	iorwf	_regImg+29,f,c
  1765                           
  1766                           ;main.c: 1022: FMwrite(14);
  1767  000896  0E0E               	movlw	14
  1768  000898  ECD8  F006         	call	_FMwrite
  1769                           
  1770                           ;main.c: 1026: }
  1771                           
  1772                           ;main.c: 1025: default : break;
  1773                           
  1774                           ;main.c: 1023: break;
  1775  00089C  0012               	return	
  1776  00089E                     l3268:
  1777  00089E  C036  F030         	movff	setVolume@current,??_setVolume
  1778  0008A2  C037  F031         	movff	setVolume@current+1,??_setVolume+1
  1779                           
  1780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 19 sub-s
      +                          witches
  1781                           ; Switch size 1, requested type "space"
  1782                           ; Number of cases is 19, Range of values is 15 to 255
  1783                           ; switch strategies available:
  1784                           ; Name         Instructions Cycles
  1785                           ; simple_byte           58    30 (average)
  1786                           ;	Chosen strategy is simple_byte
  1787  0008A6  5031               	movf	??_setVolume+1,w,c
  1788  0008A8  0A0F               	xorlw	15	; case 15
  1789  0008AA  B4D8               	btfsc	status,2,c
  1790  0008AC  D037               	goto	l4278
  1791  0008AE  0AC4               	xorlw	196	; case 203
  1792  0008B0  B4D8               	btfsc	status,2,c
  1793  0008B2  D037               	goto	l4280
  1794  0008B4  0A04               	xorlw	4	; case 207
  1795  0008B6  B4D8               	btfsc	status,2,c
  1796  0008B8  D039               	goto	l4282
  1797  0008BA  0A19               	xorlw	25	; case 214
  1798  0008BC  B4D8               	btfsc	status,2,c
  1799  0008BE  D03B               	goto	l4284
  1800  0008C0  0A0D               	xorlw	13	; case 219
  1801  0008C2  B4D8               	btfsc	status,2,c
  1802  0008C4  D03D               	goto	l4286
  1803  0008C6  0A04               	xorlw	4	; case 223
  1804  0008C8  B4D8               	btfsc	status,2,c
  1805  0008CA  D03F               	goto	l4288
  1806  0008CC  0A3C               	xorlw	60	; case 227
  1807  0008CE  B4D8               	btfsc	status,2,c
  1808  0008D0  D041               	goto	l4290
  1809  0008D2  0A05               	xorlw	5	; case 230
  1810  0008D4  B4D8               	btfsc	status,2,c
  1811  0008D6  D043               	goto	l4292
  1812  0008D8  0A16               	xorlw	22	; case 240
  1813  0008DA  B4D8               	btfsc	status,2,c
  1814  0008DC  D045               	goto	l4294
  1815  0008DE  0A01               	xorlw	1	; case 241
  1816  0008E0  B4D8               	btfsc	status,2,c
  1817  0008E2  D047               	goto	l4296
  1818  0008E4  0A03               	xorlw	3	; case 242
  1819  0008E6  B4D8               	btfsc	status,2,c
  1820  0008E8  D049               	goto	l4298
  1821  0008EA  0A01               	xorlw	1	; case 243
  1822  0008EC  B4D8               	btfsc	status,2,c
  1823  0008EE  D04B               	goto	l4300
  1824  0008F0  0A05               	xorlw	5	; case 246
  1825  0008F2  B4D8               	btfsc	status,2,c
  1826  0008F4  D04D               	goto	l4302
  1827  0008F6  0A01               	xorlw	1	; case 247
  1828  0008F8  B4D8               	btfsc	status,2,c
  1829  0008FA  D04F               	goto	l4304
  1830  0008FC  0A0F               	xorlw	15	; case 248
  1831  0008FE  B4D8               	btfsc	status,2,c
  1832  000900  D051               	goto	l4306
  1833  000902  0A01               	xorlw	1	; case 249
  1834  000904  B4D8               	btfsc	status,2,c
  1835  000906  D053               	goto	l4308
  1836  000908  0A03               	xorlw	3	; case 250
  1837  00090A  B4D8               	btfsc	status,2,c
  1838  00090C  D055               	goto	l4310
  1839  00090E  0A01               	xorlw	1	; case 251
  1840  000910  B4D8               	btfsc	status,2,c
  1841  000912  D057               	goto	l4312
  1842  000914  0A04               	xorlw	4	; case 255
  1843  000916  A4D8               	btfss	status,2,c
  1844  000918  0012               	return	
  1845  00091A  D058               	goto	l4314
  1846  00091C                     l4278:
  1847                           
  1848                           ; Switch size 1, requested type "space"
  1849                           ; Number of cases is 1, Range of values is 0 to 0
  1850                           ; switch strategies available:
  1851                           ; Name         Instructions Cycles
  1852                           ; simple_byte            4     3 (average)
  1853                           ;	Chosen strategy is simple_byte
  1854  00091C  5030               	movf	??_setVolume,w,c
  1855  00091E  0A00               	xorlw	0	; case 0
  1856  000920  0012               	return	
  1857  000922                     l4280:
  1858                           
  1859                           ; Switch size 1, requested type "space"
  1860                           ; Number of cases is 1, Range of values is 0 to 0
  1861                           ; switch strategies available:
  1862                           ; Name         Instructions Cycles
  1863                           ; simple_byte            4     3 (average)
  1864                           ;	Chosen strategy is simple_byte
  1865  000922  5030               	movf	??_setVolume,w,c
  1866  000924  0A00               	xorlw	0	; case 0
  1867  000926  A4D8               	btfss	status,2,c
  1868  000928  0012               	return	
  1869  00092A  D6E1               	goto	l3170
  1870  00092C                     l4282:
  1871                           
  1872                           ; Switch size 1, requested type "space"
  1873                           ; Number of cases is 1, Range of values is 0 to 0
  1874                           ; switch strategies available:
  1875                           ; Name         Instructions Cycles
  1876                           ; simple_byte            4     3 (average)
  1877                           ;	Chosen strategy is simple_byte
  1878  00092C  5030               	movf	??_setVolume,w,c
  1879  00092E  0A00               	xorlw	0	; case 0
  1880  000930  A4D8               	btfss	status,2,c
  1881  000932  0012               	return	
  1882  000934  D6B3               	goto	l3152
  1883  000936                     l4284:
  1884                           
  1885                           ; Switch size 1, requested type "space"
  1886                           ; Number of cases is 1, Range of values is 0 to 0
  1887                           ; switch strategies available:
  1888                           ; Name         Instructions Cycles
  1889                           ; simple_byte            4     3 (average)
  1890                           ;	Chosen strategy is simple_byte
  1891  000936  5030               	movf	??_setVolume,w,c
  1892  000938  0A00               	xorlw	0	; case 0
  1893  00093A  A4D8               	btfss	status,2,c
  1894  00093C  0012               	return	
  1895  00093E  D73D               	goto	l3214
  1896  000940                     l4286:
  1897                           
  1898                           ; Switch size 1, requested type "space"
  1899                           ; Number of cases is 1, Range of values is 0 to 0
  1900                           ; switch strategies available:
  1901                           ; Name         Instructions Cycles
  1902                           ; simple_byte            4     3 (average)
  1903                           ;	Chosen strategy is simple_byte
  1904  000940  5030               	movf	??_setVolume,w,c
  1905  000942  0A00               	xorlw	0	; case 0
  1906  000944  A4D8               	btfss	status,2,c
  1907  000946  0012               	return	
  1908  000948  D6E1               	goto	l3176
  1909  00094A                     l4288:
  1910                           
  1911                           ; Switch size 1, requested type "space"
  1912                           ; Number of cases is 1, Range of values is 0 to 0
  1913                           ; switch strategies available:
  1914                           ; Name         Instructions Cycles
  1915                           ; simple_byte            4     3 (average)
  1916                           ;	Chosen strategy is simple_byte
  1917  00094A  5030               	movf	??_setVolume,w,c
  1918  00094C  0A00               	xorlw	0	; case 0
  1919  00094E  A4D8               	btfss	status,2,c
  1920  000950  0012               	return	
  1921  000952  D6AF               	goto	l3158
  1922  000954                     l4290:
  1923                           
  1924                           ; Switch size 1, requested type "space"
  1925                           ; Number of cases is 1, Range of values is 0 to 0
  1926                           ; switch strategies available:
  1927                           ; Name         Instructions Cycles
  1928                           ; simple_byte            4     3 (average)
  1929                           ;	Chosen strategy is simple_byte
  1930  000954  5030               	movf	??_setVolume,w,c
  1931  000956  0A00               	xorlw	0	; case 0
  1932  000958  A4D8               	btfss	status,2,c
  1933  00095A  0012               	return	
  1934  00095C  D75B               	goto	l3232
  1935  00095E                     l4292:
  1936                           
  1937                           ; Switch size 1, requested type "space"
  1938                           ; Number of cases is 1, Range of values is 0 to 0
  1939                           ; switch strategies available:
  1940                           ; Name         Instructions Cycles
  1941                           ; simple_byte            4     3 (average)
  1942                           ;	Chosen strategy is simple_byte
  1943  00095E  5030               	movf	??_setVolume,w,c
  1944  000960  0A00               	xorlw	0	; case 0
  1945  000962  A4D8               	btfss	status,2,c
  1946  000964  0012               	return	
  1947  000966  D738               	goto	l3220
  1948  000968                     l4294:
  1949                           
  1950                           ; Switch size 1, requested type "space"
  1951                           ; Number of cases is 1, Range of values is 0 to 0
  1952                           ; switch strategies available:
  1953                           ; Name         Instructions Cycles
  1954                           ; simple_byte            4     3 (average)
  1955                           ;	Chosen strategy is simple_byte
  1956  000968  5030               	movf	??_setVolume,w,c
  1957  00096A  0A00               	xorlw	0	; case 0
  1958  00096C  A4D8               	btfss	status,2,c
  1959  00096E  0012               	return	
  1960  000970  D78A               	goto	l3258
  1961  000972                     l4296:
  1962                           
  1963                           ; Switch size 1, requested type "space"
  1964                           ; Number of cases is 1, Range of values is 0 to 0
  1965                           ; switch strategies available:
  1966                           ; Name         Instructions Cycles
  1967                           ; simple_byte            4     3 (average)
  1968                           ;	Chosen strategy is simple_byte
  1969  000972  5030               	movf	??_setVolume,w,c
  1970  000974  0A00               	xorlw	0	; case 0
  1971  000976  A4D8               	btfss	status,2,c
  1972  000978  0012               	return	
  1973  00097A  D779               	goto	l3250
  1974  00097C                     l4298:
  1975                           
  1976                           ; Switch size 1, requested type "space"
  1977                           ; Number of cases is 1, Range of values is 0 to 0
  1978                           ; switch strategies available:
  1979                           ; Name         Instructions Cycles
  1980                           ; simple_byte            4     3 (average)
  1981                           ;	Chosen strategy is simple_byte
  1982  00097C  5030               	movf	??_setVolume,w,c
  1983  00097E  0A00               	xorlw	0	; case 0
  1984  000980  A4D8               	btfss	status,2,c
  1985  000982  0012               	return	
  1986  000984  D765               	goto	l3244
  1987  000986                     l4300:
  1988                           
  1989                           ; Switch size 1, requested type "space"
  1990                           ; Number of cases is 1, Range of values is 0 to 0
  1991                           ; switch strategies available:
  1992                           ; Name         Instructions Cycles
  1993                           ; simple_byte            4     3 (average)
  1994                           ;	Chosen strategy is simple_byte
  1995  000986  5030               	movf	??_setVolume,w,c
  1996  000988  0A00               	xorlw	0	; case 0
  1997  00098A  A4D8               	btfss	status,2,c
  1998  00098C  0012               	return	
  1999  00098E  D751               	goto	l3238
  2000  000990                     l4302:
  2001                           
  2002                           ; Switch size 1, requested type "space"
  2003                           ; Number of cases is 1, Range of values is 0 to 0
  2004                           ; switch strategies available:
  2005                           ; Name         Instructions Cycles
  2006                           ; simple_byte            4     3 (average)
  2007                           ;	Chosen strategy is simple_byte
  2008  000990  5030               	movf	??_setVolume,w,c
  2009  000992  0A00               	xorlw	0	; case 0
  2010  000994  A4D8               	btfss	status,2,c
  2011  000996  0012               	return	
  2012  000998  D72E               	goto	l3226
  2013  00099A                     l4304:
  2014                           
  2015                           ; Switch size 1, requested type "space"
  2016                           ; Number of cases is 1, Range of values is 0 to 0
  2017                           ; switch strategies available:
  2018                           ; Name         Instructions Cycles
  2019                           ; simple_byte            4     3 (average)
  2020                           ;	Chosen strategy is simple_byte
  2021  00099A  5030               	movf	??_setVolume,w,c
  2022  00099C  0A00               	xorlw	0	; case 0
  2023  00099E  A4D8               	btfss	status,2,c
  2024  0009A0  0012               	return	
  2025  0009A2  D6FF               	goto	l3206
  2026  0009A4                     l4306:
  2027                           
  2028                           ; Switch size 1, requested type "space"
  2029                           ; Number of cases is 1, Range of values is 0 to 0
  2030                           ; switch strategies available:
  2031                           ; Name         Instructions Cycles
  2032                           ; simple_byte            4     3 (average)
  2033                           ;	Chosen strategy is simple_byte
  2034  0009A4  5030               	movf	??_setVolume,w,c
  2035  0009A6  0A00               	xorlw	0	; case 0
  2036  0009A8  A4D8               	btfss	status,2,c
  2037  0009AA  0012               	return	
  2038  0009AC  D6EB               	goto	l3200
  2039  0009AE                     l4308:
  2040                           
  2041                           ; Switch size 1, requested type "space"
  2042                           ; Number of cases is 1, Range of values is 0 to 0
  2043                           ; switch strategies available:
  2044                           ; Name         Instructions Cycles
  2045                           ; simple_byte            4     3 (average)
  2046                           ;	Chosen strategy is simple_byte
  2047  0009AE  5030               	movf	??_setVolume,w,c
  2048  0009B0  0A00               	xorlw	0	; case 0
  2049  0009B2  A4D8               	btfss	status,2,c
  2050  0009B4  0012               	return	
  2051  0009B6  D6D7               	goto	l3194
  2052  0009B8                     l4310:
  2053                           
  2054                           ; Switch size 1, requested type "space"
  2055                           ; Number of cases is 1, Range of values is 0 to 0
  2056                           ; switch strategies available:
  2057                           ; Name         Instructions Cycles
  2058                           ; simple_byte            4     3 (average)
  2059                           ;	Chosen strategy is simple_byte
  2060  0009B8  5030               	movf	??_setVolume,w,c
  2061  0009BA  0A00               	xorlw	0	; case 0
  2062  0009BC  A4D8               	btfss	status,2,c
  2063  0009BE  0012               	return	
  2064  0009C0  D6C3               	goto	l3188
  2065  0009C2                     l4312:
  2066                           
  2067                           ; Switch size 1, requested type "space"
  2068                           ; Number of cases is 1, Range of values is 0 to 0
  2069                           ; switch strategies available:
  2070                           ; Name         Instructions Cycles
  2071                           ; simple_byte            4     3 (average)
  2072                           ;	Chosen strategy is simple_byte
  2073  0009C2  5030               	movf	??_setVolume,w,c
  2074  0009C4  0A00               	xorlw	0	; case 0
  2075  0009C6  A4D8               	btfss	status,2,c
  2076  0009C8  0012               	return	
  2077  0009CA  D6AF               	goto	l3182
  2078  0009CC                     l4314:
  2079                           
  2080                           ; Switch size 1, requested type "space"
  2081                           ; Number of cases is 1, Range of values is 0 to 0
  2082                           ; switch strategies available:
  2083                           ; Name         Instructions Cycles
  2084                           ; simple_byte            4     3 (average)
  2085                           ;	Chosen strategy is simple_byte
  2086  0009CC  5030               	movf	??_setVolume,w,c
  2087  0009CE  0A00               	xorlw	0	; case 0
  2088  0009D0  A4D8               	btfss	status,2,c
  2089  0009D2  0012               	return	
  2090  0009D4  D67D               	goto	l3164
  2091  0009D6                     __end_of_setVolume:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           postinc0	equ	0xFEE
  2095                           wreg	equ	0xFE8
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _scanNext *****************
  2099 ;; Defined at:
  2100 ;;		line 529 in file "main.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  up              1    wreg     unsigned char 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  up              1   11[COMRAM] unsigned char 
  2105 ;;  STC             2   12[COMRAM] unsigned int 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      unsigned char 
  2108 ;; Registers used:
  2109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2115 ;;      Params:         0       0       0       0
  2116 ;;      Locals:         3       0       0       0
  2117 ;;      Temps:          0       0       0       0
  2118 ;;      Totals:         3       0       0       0
  2119 ;;Total ram usage:        3 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    4
  2122 ;; This function calls:
  2123 ;;		_FMread
  2124 ;;		_FMwrite
  2125 ;;		_dly
  2126 ;;		_mute
  2127 ;; This function is called by:
  2128 ;;		_main
  2129 ;; This function uses a non-reentrant model
  2130 ;;
  2131                           
  2132                           	psect	text2
  2133  000E32                     __ptext2:
  2134                           	opt stack 0
  2135  000E32                     _scanNext:
  2136                           	opt stack 26
  2137                           
  2138                           ;incstack = 0
  2139                           ;scanNext@up stored from wreg
  2140  000E32  6E32               	movwf	scanNext@up,c
  2141                           
  2142                           ;main.c: 531: mute(1);
  2143  000E34  0E01               	movlw	1
  2144  000E36  EC37  F008         	call	_mute
  2145                           
  2146                           ;main.c: 532: regImg[2] &= ~0x0200;
  2147  000E3A  9206               	bcf	_regImg+5,1,c
  2148                           
  2149                           ;main.c: 533: if (FMwrite(2) != 0) return 1;
  2150  000E3C  0E02               	movlw	2
  2151  000E3E  ECD8  F006         	call	_FMwrite
  2152  000E42  0900               	iorlw	0
  2153  000E44  A4D8               	btfss	status,2,c
  2154  000E46  0012               	return	
  2155                           
  2156                           ;main.c: 534: regImg[3] &= ~0x4000;
  2157                           
  2158                           ;	Return value of _scanNext is never used
  2159  000E48  9C08               	bcf	_regImg+7,6,c
  2160                           
  2161                           ;main.c: 535: if (FMwrite(3) != 0) return 1;
  2162  000E4A  0E03               	movlw	3
  2163  000E4C  ECD8  F006         	call	_FMwrite
  2164  000E50  0900               	iorlw	0
  2165  000E52  A4D8               	btfss	status,2,c
  2166  000E54  0012               	return	
  2167                           
  2168                           ;main.c: 536: if (up) regImg[3] |= 0x8000; else regImg[3] &= ~0x8000;
  2169                           
  2170                           ;	Return value of _scanNext is never used
  2171  000E56  5032               	movf	scanNext@up,w,c
  2172  000E58  B4D8               	btfsc	status,2,c
  2173  000E5A  D002               	goto	l3000
  2174  000E5C  8E08               	bsf	_regImg+7,7,c
  2175  000E5E  D001               	goto	l183
  2176  000E60                     l3000:
  2177  000E60  9E08               	bcf	_regImg+7,7,c
  2178  000E62                     l183:
  2179                           
  2180                           ;main.c: 538: regImg[3] |= 0x4000;
  2181  000E62  8C08               	bsf	_regImg+7,6,c
  2182                           
  2183                           ;main.c: 539: if (FMwrite(3) != 0) return 1;
  2184  000E64  0E03               	movlw	3
  2185  000E66  ECD8  F006         	call	_FMwrite
  2186  000E6A  0900               	iorlw	0
  2187  000E6C  A4D8               	btfss	status,2,c
  2188  000E6E  0012               	return	
  2189  000E70  D011               	goto	l3012
  2190  000E72                     l3006:
  2191                           
  2192                           ;main.c: 541: FMread(0x13,&STC);
  2193  000E72  0E33               	movlw	low scanNext@STC
  2194  000E74  6E29               	movwf	FMread@data,c
  2195  000E76  0E00               	movlw	high scanNext@STC
  2196  000E78  6E2A               	movwf	FMread@data+1,c
  2197  000E7A  0E13               	movlw	19
  2198  000E7C  ECCE  F005         	call	_FMread
  2199                           
  2200                           ;main.c: 542: STC &= 0x0020;
  2201  000E80  0E20               	movlw	32
  2202  000E82  1633               	andwf	scanNext@STC,f,c
  2203  000E84  0E00               	movlw	0
  2204  000E86  1634               	andwf	scanNext@STC+1,f,c
  2205  000E88  0E00               	movlw	0
  2206  000E8A  6E28               	movwf	dly@d+1,c
  2207  000E8C  0E0A               	movlw	10
  2208  000E8E  6E27               	movwf	dly@d,c
  2209  000E90  EC0F  F008         	call	_dly	;wreg free
  2210  000E94                     l3012:
  2211  000E94  5033               	movf	scanNext@STC,w,c
  2212  000E96  1034               	iorwf	scanNext@STC+1,w,c
  2213  000E98  B4D8               	btfsc	status,2,c
  2214  000E9A  D7EB               	goto	l3006
  2215                           
  2216                           ;main.c: 543: }
  2217                           ;main.c: 544: mute(0);
  2218  000E9C  0E00               	movlw	0
  2219  000E9E  EC37  F008         	call	_mute
  2220  000EA2  0012               	return	
  2221  000EA4                     __end_of_scanNext:
  2222                           	opt stack 0
  2223                           tblptru	equ	0xFF8
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           status	equ	0xFD8
  2227                           
  2228 ;; *************** function _nextChan *****************
  2229 ;; Defined at:
  2230 ;;		line 492 in file "main.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  up              1    wreg     unsigned char 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  up              1   31[COMRAM] unsigned char 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      unsigned char 
  2237 ;; Registers used:
  2238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2244 ;;      Params:         0       0       0       0
  2245 ;;      Locals:         1       0       0       0
  2246 ;;      Temps:          4       0       0       0
  2247 ;;      Totals:         5       0       0       0
  2248 ;;Total ram usage:        5 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    5
  2251 ;; This function calls:
  2252 ;;		_FMfrequenc
  2253 ;;		_mute
  2254 ;; This function is called by:
  2255 ;;		_main
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text3
  2260  000D28                     __ptext3:
  2261                           	opt stack 0
  2262  000D28                     _nextChan:
  2263                           	opt stack 25
  2264                           
  2265                           ;incstack = 0
  2266                           ;nextChan@up stored from wreg
  2267  000D28  6E46               	movwf	nextChan@up,c
  2268                           
  2269                           ;main.c: 494: if(up){
  2270  000D2A  5046               	movf	nextChan@up,w,c
  2271  000D2C  B4D8               	btfsc	status,2,c
  2272  000D2E  D01B               	goto	l2968
  2273                           
  2274                           ;main.c: 495: if((freq + 1)<= (1080)){
  2275  000D30  0E01               	movlw	1
  2276  000D32  2425               	addwf	_freq,w,c
  2277  000D34  6E42               	movwf	??_nextChan& (0+255),c
  2278  000D36  0E00               	movlw	0
  2279  000D38  2026               	addwfc	_freq+1,w,c
  2280  000D3A  6E43               	movwf	(??_nextChan+1)& (0+255),c
  2281  000D3C  0E39               	movlw	57
  2282  000D3E  5C42               	subwf	??_nextChan,w,c
  2283  000D40  0E04               	movlw	4
  2284  000D42  5843               	subwfb	??_nextChan+1,w,c
  2285  000D44  B0D8               	btfsc	status,0,c
  2286  000D46  0012               	return	
  2287                           
  2288                           ;main.c: 496: freq += 1;
  2289  000D48  4A25               	infsnz	_freq,f,c
  2290  000D4A  2A26               	incf	_freq+1,f,c
  2291                           
  2292                           ;main.c: 497: mute(1);
  2293  000D4C  0E01               	movlw	1
  2294  000D4E  EC37  F008         	call	_mute
  2295                           
  2296                           ;main.c: 498: FMfrequenc(freq);
  2297  000D52  C025  F038         	movff	_freq,FMfrequenc@f
  2298  000D56  C026  F039         	movff	_freq+1,FMfrequenc@f+1
  2299  000D5A  EC52  F007         	call	_FMfrequenc	;wreg free
  2300                           
  2301                           ;main.c: 499: mute(0);
  2302  000D5E  0E00               	movlw	0
  2303  000D60  EC37  F008         	call	_mute
  2304                           
  2305                           ;main.c: 501: }
  2306                           ;main.c: 502: }else if(!up){
  2307                           
  2308                           ;main.c: 500: return 0;
  2309                           ;	Return value of _nextChan is never used
  2310  000D64  0012               	return	
  2311  000D66                     l2968:
  2312  000D66  5046               	movf	nextChan@up,w,c
  2313  000D68  A4D8               	btfss	status,2,c
  2314  000D6A  0012               	return	
  2315                           
  2316                           ;main.c: 503: if((freq - 1)>= (875)){
  2317  000D6C  0EFF               	movlw	255
  2318  000D6E  6E42               	movwf	??_nextChan& (0+255),c
  2319  000D70  0EFF               	movlw	255
  2320  000D72  6E43               	movwf	(??_nextChan+1)& (0+255),c
  2321  000D74  C025  F044         	movff	_freq,??_nextChan+2
  2322  000D78  C026  F045         	movff	_freq+1,??_nextChan+3
  2323  000D7C  5042               	movf	??_nextChan,w,c
  2324  000D7E  2644               	addwf	??_nextChan+2,f,c
  2325  000D80  5043               	movf	??_nextChan+1,w,c
  2326  000D82  2245               	addwfc	??_nextChan+3,f,c
  2327  000D84  0E6B               	movlw	107
  2328  000D86  5C44               	subwf	??_nextChan+2,w,c
  2329  000D88  0E03               	movlw	3
  2330  000D8A  5845               	subwfb	??_nextChan+3,w,c
  2331  000D8C  A0D8               	btfss	status,0,c
  2332  000D8E  0012               	return	
  2333                           
  2334                           ;main.c: 504: freq -= 1;
  2335  000D90  0625               	decf	_freq,f,c
  2336  000D92  A0D8               	btfss	status,0,c
  2337  000D94  0626               	decf	_freq+1,f,c
  2338                           
  2339                           ;main.c: 505: mute(1);
  2340  000D96  0E01               	movlw	1
  2341  000D98  EC37  F008         	call	_mute
  2342                           
  2343                           ;main.c: 506: FMfrequenc(freq);
  2344  000D9C  C025  F038         	movff	_freq,FMfrequenc@f
  2345  000DA0  C026  F039         	movff	_freq+1,FMfrequenc@f+1
  2346  000DA4  EC52  F007         	call	_FMfrequenc	;wreg free
  2347                           
  2348                           ;main.c: 507: mute(0);
  2349  000DA8  0E00               	movlw	0
  2350  000DAA  EC37  F008         	call	_mute
  2351                           
  2352                           ;main.c: 508: return 0;
  2353                           ;	Return value of _nextChan is never used
  2354  000DAE  0012               	return	
  2355  000DB0                     __end_of_nextChan:
  2356                           	opt stack 0
  2357                           tblptru	equ	0xFF8
  2358                           postinc0	equ	0xFEE
  2359                           wreg	equ	0xFE8
  2360                           status	equ	0xFD8
  2361                           
  2362 ;; *************** function _mute *****************
  2363 ;; Defined at:
  2364 ;;		line 587 in file "main.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  mute            1    wreg     unsigned char 
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  mute            1    7[COMRAM] unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  1    wreg      unsigned char 
  2371 ;; Registers used:
  2372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2378 ;;      Params:         0       0       0       0
  2379 ;;      Locals:         1       0       0       0
  2380 ;;      Temps:          0       0       0       0
  2381 ;;      Totals:         1       0       0       0
  2382 ;;Total ram usage:        1 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    3
  2385 ;; This function calls:
  2386 ;;		_FMwrite
  2387 ;; This function is called by:
  2388 ;;		_nextChan
  2389 ;;		_scanNext
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           	psect	text4
  2394  00106E                     __ptext4:
  2395                           	opt stack 0
  2396  00106E                     _mute:
  2397                           	opt stack 26
  2398                           
  2399                           ;incstack = 0
  2400                           ;mute@mute stored from wreg
  2401  00106E  6E2E               	movwf	mute@mute,c
  2402                           
  2403                           ;main.c: 588: if(mute){
  2404  001070  502E               	movf	mute@mute,w,c
  2405  001072  B4D8               	btfsc	status,2,c
  2406  001074  D005               	goto	l1170
  2407                           
  2408                           ;main.c: 589: regImg[1] |= 0x0001;
  2409  001076  8003               	bsf	_regImg+2,0,c
  2410                           
  2411                           ;main.c: 590: return FMwrite(1);
  2412                           ;	Return value of _mute is never used
  2413  001078  0E01               	movlw	1
  2414  00107A  ECD8  F006         	call	_FMwrite
  2415                           
  2416                           ;main.c: 591: }else{
  2417  00107E  0012               	return	
  2418  001080                     l1170:
  2419                           
  2420                           ;main.c: 592: regImg[1] &= ~0x0001;
  2421  001080  9003               	bcf	_regImg+2,0,c
  2422                           
  2423                           ;main.c: 593: return FMwrite(1);
  2424                           ;	Return value of _mute is never used
  2425  001082  0E01               	movlw	1
  2426  001084  ECD8  F006         	call	_FMwrite
  2427  001088  0012               	return	
  2428  00108A                     __end_of_mute:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           status	equ	0xFD8
  2434                           
  2435 ;; *************** function _FMfrequenc *****************
  2436 ;; Defined at:
  2437 ;;		line 421 in file "main.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  f               2   17[COMRAM] unsigned int 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;  dat             2   25[COMRAM] unsigned int 
  2442 ;;  cn              2   23[COMRAM] unsigned int 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      unsigned char 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2452 ;;      Params:         2       0       0       0
  2453 ;;      Locals:         4       0       0       0
  2454 ;;      Temps:          4       0       0       0
  2455 ;;      Totals:        10       0       0       0
  2456 ;;Total ram usage:       10 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    4
  2459 ;; This function calls:
  2460 ;;		_FMready
  2461 ;;		_FMwrite
  2462 ;;		_dly
  2463 ;; This function is called by:
  2464 ;;		_nextChan
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text5
  2470  000EA4                     __ptext5:
  2471                           	opt stack 0
  2472  000EA4                     _FMfrequenc:
  2473                           	opt stack 25
  2474                           
  2475                           ;main.c: 423: unsigned int dat;
  2476                           ;main.c: 424: unsigned int cn;
  2477                           ;main.c: 426: cn = f - 690;
  2478                           
  2479                           ;incstack = 0
  2480  000EA4  0E4E               	movlw	78
  2481  000EA6  2438               	addwf	FMfrequenc@f,w,c
  2482  000EA8  6E3E               	movwf	FMfrequenc@cn,c
  2483  000EAA  0EFD               	movlw	253
  2484  000EAC  2039               	addwfc	FMfrequenc@f+1,w,c
  2485  000EAE  6E3F               	movwf	FMfrequenc@cn+1,c
  2486                           
  2487                           ;main.c: 429: regImg[2] &= ~0x0200;
  2488  000EB0  9206               	bcf	_regImg+5,1,c
  2489                           
  2490                           ;main.c: 430: if (FMwrite(2) != 0) return 1;
  2491  000EB2  0E02               	movlw	2
  2492  000EB4  ECD8  F006         	call	_FMwrite
  2493  000EB8  0900               	iorlw	0
  2494  000EBA  A4D8               	btfss	status,2,c
  2495  000EBC  0012               	return	
  2496                           
  2497                           ;main.c: 431: regImg[2] &= 0xfe00;
  2498                           
  2499                           ;	Return value of _FMfrequenc is never used
  2500  000EBE  0E00               	movlw	0
  2501  000EC0  1605               	andwf	_regImg+4,f,c
  2502  000EC2  0EFE               	movlw	254
  2503  000EC4  1606               	andwf	_regImg+5,f,c
  2504                           
  2505                           ;main.c: 432: regImg[2] |= (cn | 0x0200);
  2506  000EC6  0E00               	movlw	0
  2507  000EC8  6E3A               	movwf	??_FMfrequenc& (0+255),c
  2508  000ECA  0E02               	movlw	2
  2509  000ECC  6E3B               	movwf	(??_FMfrequenc+1)& (0+255),c
  2510  000ECE  C03E  F03C         	movff	FMfrequenc@cn,??_FMfrequenc+2
  2511  000ED2  C03F  F03D         	movff	FMfrequenc@cn+1,??_FMfrequenc+3
  2512  000ED6  503A               	movf	??_FMfrequenc,w,c
  2513  000ED8  123C               	iorwf	??_FMfrequenc+2,f,c
  2514  000EDA  503B               	movf	??_FMfrequenc+1,w,c
  2515  000EDC  123D               	iorwf	??_FMfrequenc+3,f,c
  2516  000EDE  503C               	movf	??_FMfrequenc+2,w,c
  2517  000EE0  1205               	iorwf	_regImg+4,f,c
  2518  000EE2  503D               	movf	??_FMfrequenc+3,w,c
  2519  000EE4  1206               	iorwf	_regImg+5,f,c
  2520                           
  2521                           ;main.c: 433: if (FMwrite(2) != 0) return 1;
  2522  000EE6  0E02               	movlw	2
  2523  000EE8  ECD8  F006         	call	_FMwrite
  2524  000EEC  0900               	iorlw	0
  2525  000EEE  A4D8               	btfss	status,2,c
  2526  000EF0  0012               	return	
  2527                           
  2528                           ;main.c: 435: dly(2);
  2529                           
  2530                           ;main.c: 434: do {
  2531                           
  2532                           ;	Return value of _FMfrequenc is never used
  2533  000EF2  0E00               	movlw	0
  2534  000EF4  6E28               	movwf	dly@d+1,c
  2535  000EF6  0E02               	movlw	2
  2536  000EF8  6E27               	movwf	dly@d,c
  2537  000EFA  EC0F  F008         	call	_dly	;wreg free
  2538                           
  2539                           ;main.c: 436: if (FMready(&dat) != 0) return 1;
  2540  000EFE  0E40               	movlw	low FMfrequenc@dat
  2541  000F00  6E32               	movwf	FMready@rdy,c
  2542  000F02  0E00               	movlw	high FMfrequenc@dat
  2543  000F04  6E33               	movwf	FMready@rdy+1,c
  2544  000F06  ECEC  F007         	call	_FMready	;wreg free
  2545  000F0A  0900               	iorlw	0
  2546  000F0C  A4D8               	btfss	status,2,c
  2547  000F0E  0012               	return	
  2548                           
  2549                           ;main.c: 437: } while (!dat);
  2550                           
  2551                           ;	Return value of _FMfrequenc is never used
  2552  000F10  5040               	movf	FMfrequenc@dat,w,c
  2553  000F12  1041               	iorwf	FMfrequenc@dat+1,w,c
  2554  000F14  D7EC               	goto	L1
  2555  000F16                     __end_of_FMfrequenc:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           postinc0	equ	0xFEE
  2559                           wreg	equ	0xFE8
  2560                           status	equ	0xFD8
  2561                           
  2562 ;; *************** function _errfm *****************
  2563 ;; Defined at:
  2564 ;;		line 568 in file "main.c"
  2565 ;; Parameters:    Size  Location     Type
  2566 ;;		None
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;		None
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		None
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2578 ;;      Params:         0       0       0       0
  2579 ;;      Locals:         0       0       0       0
  2580 ;;      Temps:          0       0       0       0
  2581 ;;      Totals:         0       0       0       0
  2582 ;;Total ram usage:        0 bytes
  2583 ;; Hardware stack levels used:    1
  2584 ;; This function calls:
  2585 ;;		Nothing
  2586 ;; This function is called by:
  2587 ;;		_main
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text6
  2592  0010DE                     __ptext6:
  2593                           	opt stack 0
  2594  0010DE                     _errfm:
  2595                           	opt stack 30
  2596  0010DE                     l193:
  2597  0010DE  D7FF               	goto	l193
  2598  0010E0                     __end_of_errfm:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           postinc0	equ	0xFEE
  2602                           wreg	equ	0xFE8
  2603                           status	equ	0xFD8
  2604                           
  2605 ;; *************** function _butnEvent *****************
  2606 ;; Defined at:
  2607 ;;		line 87 in file "main.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  btn             2    4[COMRAM] PTR unsigned char 
  2610 ;;		 -> main@btn(1), 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      unsigned char 
  2615 ;; Registers used:
  2616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2622 ;;      Params:         2       0       0       0
  2623 ;;      Locals:         0       0       0       0
  2624 ;;      Temps:          0       0       0       0
  2625 ;;      Totals:         2       0       0       0
  2626 ;;Total ram usage:        2 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    1
  2629 ;; This function calls:
  2630 ;;		_dly
  2631 ;; This function is called by:
  2632 ;;		_main
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text7
  2637  000AC0                     __ptext7:
  2638                           	opt stack 0
  2639  000AC0                     _butnEvent:
  2640                           	opt stack 29
  2641                           
  2642                           ;incstack = 0
  2643  000AC0  B280               	btfsc	3968,1,c	;volatile
  2644  000AC2  D024               	goto	l75
  2645                           
  2646                           ;main.c: 89: {
  2647                           ;main.c: 90: dly(100);
  2648  000AC4  0E00               	movlw	0
  2649  000AC6  6E28               	movwf	dly@d+1,c
  2650  000AC8  0E64               	movlw	100
  2651  000ACA  6E27               	movwf	dly@d,c
  2652  000ACC  EC0F  F008         	call	_dly	;wreg free
  2653                           
  2654                           ;main.c: 91: if(PORTAbits.RA1){
  2655  000AD0  A280               	btfss	3968,1,c	;volatile
  2656  000AD2  D00E               	goto	l2826
  2657                           
  2658                           ;main.c: 92: *btn = 0b00000001;
  2659  000AD4  C02B  FFD9         	movff	butnEvent@btn,fsr2l
  2660  000AD8  C02C  FFDA         	movff	butnEvent@btn+1,fsr2h
  2661  000ADC  0E01               	movlw	1
  2662  000ADE  6EDF               	movwf	indf2,c
  2663                           
  2664                           ;main.c: 93: dly(200);
  2665  000AE0  0E00               	movlw	0
  2666  000AE2  6E28               	movwf	dly@d+1,c
  2667  000AE4  0EC8               	movlw	200
  2668  000AE6  6E27               	movwf	dly@d,c
  2669  000AE8  EC0F  F008         	call	_dly	;wreg free
  2670                           
  2671                           ;main.c: 94: return 1;
  2672  000AEC  0E01               	movlw	1
  2673  000AEE  0012               	return	
  2674  000AF0                     l2826:
  2675                           
  2676                           ;main.c: 97: *btn = 0b00000100;
  2677  000AF0  C02B  FFD9         	movff	butnEvent@btn,fsr2l
  2678  000AF4  C02C  FFDA         	movff	butnEvent@btn+1,fsr2h
  2679  000AF8  0E04               	movlw	4
  2680  000AFA  6EDF               	movwf	indf2,c
  2681                           
  2682                           ;main.c: 98: dly(200);
  2683  000AFC  0E00               	movlw	0
  2684  000AFE  6E28               	movwf	dly@d+1,c
  2685  000B00  0EC8               	movlw	200
  2686  000B02  6E27               	movwf	dly@d,c
  2687  000B04  EC0F  F008         	call	_dly	;wreg free
  2688                           
  2689                           ;main.c: 99: return 1;
  2690  000B08  0E01               	movlw	1
  2691  000B0A  0012               	return	
  2692  000B0C                     l75:
  2693                           
  2694                           ;main.c: 100: }
  2695                           ;main.c: 101: }
  2696                           ;main.c: 103: if (PORTAbits.RA0 == 0)
  2697  000B0C  B080               	btfsc	3968,0,c	;volatile
  2698  000B0E  D024               	goto	l79
  2699                           
  2700                           ;main.c: 104: {
  2701                           ;main.c: 105: dly(100);
  2702  000B10  0E00               	movlw	0
  2703  000B12  6E28               	movwf	dly@d+1,c
  2704  000B14  0E64               	movlw	100
  2705  000B16  6E27               	movwf	dly@d,c
  2706  000B18  EC0F  F008         	call	_dly	;wreg free
  2707                           
  2708                           ;main.c: 106: if(PORTAbits.RA0){
  2709  000B1C  A080               	btfss	3968,0,c	;volatile
  2710  000B1E  D00E               	goto	l2848
  2711                           
  2712                           ;main.c: 107: *btn = 0b00000010;
  2713  000B20  C02B  FFD9         	movff	butnEvent@btn,fsr2l
  2714  000B24  C02C  FFDA         	movff	butnEvent@btn+1,fsr2h
  2715  000B28  0E02               	movlw	2
  2716  000B2A  6EDF               	movwf	indf2,c
  2717                           
  2718                           ;main.c: 108: dly(200);
  2719  000B2C  0E00               	movlw	0
  2720  000B2E  6E28               	movwf	dly@d+1,c
  2721  000B30  0EC8               	movlw	200
  2722  000B32  6E27               	movwf	dly@d,c
  2723  000B34  EC0F  F008         	call	_dly	;wreg free
  2724                           
  2725                           ;main.c: 109: return 1;
  2726  000B38  0E01               	movlw	1
  2727  000B3A  0012               	return	
  2728  000B3C                     l2848:
  2729                           
  2730                           ;main.c: 111: *btn = 0b00001000;
  2731  000B3C  C02B  FFD9         	movff	butnEvent@btn,fsr2l
  2732  000B40  C02C  FFDA         	movff	butnEvent@btn+1,fsr2h
  2733  000B44  0E08               	movlw	8
  2734  000B46  6EDF               	movwf	indf2,c
  2735                           
  2736                           ;main.c: 112: dly(200);
  2737  000B48  0E00               	movlw	0
  2738  000B4A  6E28               	movwf	dly@d+1,c
  2739  000B4C  0EC8               	movlw	200
  2740  000B4E  6E27               	movwf	dly@d,c
  2741  000B50  EC0F  F008         	call	_dly	;wreg free
  2742                           
  2743                           ;main.c: 113: return 1;
  2744  000B54  0E01               	movlw	1
  2745  000B56  0012               	return	
  2746  000B58                     l79:
  2747                           
  2748                           ;main.c: 114: }
  2749                           ;main.c: 115: }
  2750                           ;main.c: 117: if (PORTBbits.RB5 == 0)
  2751  000B58  BA81               	btfsc	3969,5,c	;volatile
  2752  000B5A  D00E               	goto	l82
  2753                           
  2754                           ;main.c: 118: {
  2755                           ;main.c: 119: *btn = 0b00010000;
  2756  000B5C  C02B  FFD9         	movff	butnEvent@btn,fsr2l
  2757  000B60  C02C  FFDA         	movff	butnEvent@btn+1,fsr2h
  2758  000B64  0E10               	movlw	16
  2759  000B66  6EDF               	movwf	indf2,c
  2760                           
  2761                           ;main.c: 120: dly(200);
  2762  000B68  0E00               	movlw	0
  2763  000B6A  6E28               	movwf	dly@d+1,c
  2764  000B6C  0EC8               	movlw	200
  2765  000B6E  6E27               	movwf	dly@d,c
  2766  000B70  EC0F  F008         	call	_dly	;wreg free
  2767                           
  2768                           ;main.c: 121: return 1;
  2769  000B74  0E01               	movlw	1
  2770  000B76  0012               	return	
  2771  000B78                     l82:
  2772                           
  2773                           ;main.c: 122: }
  2774                           ;main.c: 124: if (PORTBbits.RB0 == 0)
  2775  000B78  B081               	btfsc	3969,0,c	;volatile
  2776  000B7A  D00E               	goto	l2872
  2777                           
  2778                           ;main.c: 125: {
  2779                           ;main.c: 126: *btn = 0b00100000;
  2780  000B7C  C02B  FFD9         	movff	butnEvent@btn,fsr2l
  2781  000B80  C02C  FFDA         	movff	butnEvent@btn+1,fsr2h
  2782  000B84  0E20               	movlw	32
  2783  000B86  6EDF               	movwf	indf2,c
  2784                           
  2785                           ;main.c: 127: dly(200);
  2786  000B88  0E00               	movlw	0
  2787  000B8A  6E28               	movwf	dly@d+1,c
  2788  000B8C  0EC8               	movlw	200
  2789  000B8E  6E27               	movwf	dly@d,c
  2790  000B90  EC0F  F008         	call	_dly	;wreg free
  2791                           
  2792                           ;main.c: 128: return 1;
  2793  000B94  0E01               	movlw	1
  2794  000B96  0012               	return	
  2795  000B98                     l2872:
  2796                           
  2797                           ;main.c: 129: }
  2798                           ;main.c: 160: return 0;
  2799  000B98  0E00               	movlw	0
  2800  000B9A  0012               	return	
  2801  000B9C                     __end_of_butnEvent:
  2802                           	opt stack 0
  2803                           tblptru	equ	0xFF8
  2804                           postinc0	equ	0xFEE
  2805                           wreg	equ	0xFE8
  2806                           indf2	equ	0xFDF
  2807                           fsr2h	equ	0xFDA
  2808                           fsr2l	equ	0xFD9
  2809                           status	equ	0xFD8
  2810                           
  2811 ;; *************** function _Init *****************
  2812 ;; Defined at:
  2813 ;;		line 198 in file "main.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  i               2    0        int 
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, status,2, status,0, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2827 ;;      Params:         0       0       0       0
  2828 ;;      Locals:         0       0       0       0
  2829 ;;      Temps:          0       0       0       0
  2830 ;;      Totals:         0       0       0       0
  2831 ;;Total ram usage:        0 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    1
  2834 ;; This function calls:
  2835 ;;		_OpenI2C
  2836 ;; This function is called by:
  2837 ;;		_main
  2838 ;; This function uses a non-reentrant model
  2839 ;;
  2840                           
  2841                           	psect	text8
  2842  000F16                     __ptext8:
  2843                           	opt stack 0
  2844  000F16                     _Init:
  2845                           	opt stack 29
  2846                           
  2847                           ;main.c: 200: int i;
  2848                           ;main.c: 202: OSCCON = 0b01110010;
  2849                           
  2850                           ;incstack = 0
  2851  000F16  0E72               	movlw	114
  2852  000F18  6ED3               	movwf	4051,c	;volatile
  2853                           
  2854                           ;main.c: 203: LCDSE0 = 0b11111111;
  2855  000F1A  010F               	movlb	15	; () banked
  2856  000F1C  695A               	setf	90,b	;volatile
  2857                           
  2858                           ; BSR set to: 15
  2859                           ;main.c: 204: LCDSE1 = 0b11111111;
  2860  000F1E  010F               	movlb	15	; () banked
  2861  000F20  695B               	setf	91,b	;volatile
  2862                           
  2863                           ; BSR set to: 15
  2864                           ;main.c: 205: LCDSE2 = 0b11111111;
  2865  000F22  010F               	movlb	15	; () banked
  2866  000F24  695C               	setf	92,b	;volatile
  2867                           
  2868                           ;main.c: 206: LCDSE3 = 0b00000000;
  2869  000F26  0E00               	movlw	0
  2870  000F28  010F               	movlb	15	; () banked
  2871  000F2A  6F5D               	movwf	93,b	;volatile
  2872                           
  2873                           ;main.c: 207: LCDCON = 0b10001000;
  2874  000F2C  0E88               	movlw	136
  2875  000F2E  010F               	movlb	15	; () banked
  2876  000F30  6F59               	movwf	89,b	;volatile
  2877                           
  2878                           ;main.c: 208: LCDPS = 0b00110110;
  2879  000F32  0E36               	movlw	54
  2880  000F34  010F               	movlb	15	; () banked
  2881  000F36  6F58               	movwf	88,b	;volatile
  2882                           
  2883                           ;main.c: 209: ADCON1 = 0b00111111;
  2884  000F38  0E3F               	movlw	63
  2885  000F3A  6EC1               	movwf	4033,c	;volatile
  2886                           
  2887                           ;main.c: 210: TRISA = 0b00000011;
  2888  000F3C  0E03               	movlw	3
  2889  000F3E  6E92               	movwf	3986,c	;volatile
  2890                           
  2891                           ;main.c: 211: TRISB = 0b00100001;
  2892  000F40  0E21               	movlw	33
  2893  000F42  6E93               	movwf	3987,c	;volatile
  2894                           
  2895                           ;main.c: 212: TRISC = 0b00011000;
  2896  000F44  0E18               	movlw	24
  2897  000F46  6E94               	movwf	3988,c	;volatile
  2898                           
  2899                           ; BSR set to: 15
  2900                           ;main.c: 213: TRISG = 0b11111111;
  2901  000F48  6898               	setf	3992,c	;volatile
  2902                           
  2903                           ;main.c: 214: PORTA = 0;
  2904  000F4A  0E00               	movlw	0
  2905  000F4C  6E80               	movwf	3968,c	;volatile
  2906                           
  2907                           ;main.c: 215: PORTB = 0;
  2908  000F4E  0E00               	movlw	0
  2909  000F50  6E81               	movwf	3969,c	;volatile
  2910                           
  2911                           ;main.c: 216: PORTC = 0;
  2912  000F52  0E00               	movlw	0
  2913  000F54  6E82               	movwf	3970,c	;volatile
  2914                           
  2915                           ;main.c: 217: PORTG = 0;
  2916  000F56  0E00               	movlw	0
  2917  000F58  6E86               	movwf	3974,c	;volatile
  2918                           
  2919                           ; BSR set to: 15
  2920                           ;main.c: 218: INTCONbits.TMR0IF = 0;
  2921  000F5A  94F2               	bcf	intcon,2,c	;volatile
  2922                           
  2923                           ;main.c: 220: T0CON = 0b00001000;
  2924  000F5C  0E08               	movlw	8
  2925  000F5E  6ED5               	movwf	4053,c	;volatile
  2926                           
  2927                           ;main.c: 221: TMR0H = 0;
  2928  000F60  0E00               	movlw	0
  2929  000F62  6ED7               	movwf	4055,c	;volatile
  2930                           
  2931                           ;main.c: 222: TMR0L = 0;
  2932  000F64  0E00               	movlw	0
  2933  000F66  6ED6               	movwf	4054,c	;volatile
  2934                           
  2935                           ; BSR set to: 15
  2936                           ;main.c: 223: T0CONbits.TMR0ON = 1;
  2937  000F68  8ED5               	bsf	4053,7,c	;volatile
  2938                           
  2939                           ; BSR set to: 15
  2940                           ;main.c: 224: OpenI2C( 0b00001000, 0b10000000);
  2941  000F6A  0E80               	movlw	128
  2942  000F6C  6E27               	movwf	OpenI2C@slew,c
  2943  000F6E  0E08               	movlw	8
  2944  000F70  EC28  F008         	call	_OpenI2C
  2945                           
  2946                           ;main.c: 225: SSPADD = 0x3F;
  2947  000F74  0E3F               	movlw	63
  2948  000F76  6EC8               	movwf	4040,c	;volatile
  2949  000F78  0012               	return		;funcret
  2950  000F7A                     __end_of_Init:
  2951                           	opt stack 0
  2952                           tblptru	equ	0xFF8
  2953                           intcon	equ	0xFF2
  2954                           postinc0	equ	0xFEE
  2955                           wreg	equ	0xFE8
  2956                           indf2	equ	0xFDF
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _OpenI2C *****************
  2962 ;; Defined at:
  2963 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;  sync_mode       1    wreg     unsigned char 
  2966 ;;  slew            1    0[COMRAM] unsigned char 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  sync_mode       1    1[COMRAM] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg, status,2, status,0
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2978 ;;      Params:         1       0       0       0
  2979 ;;      Locals:         1       0       0       0
  2980 ;;      Temps:          0       0       0       0
  2981 ;;      Totals:         2       0       0       0
  2982 ;;Total ram usage:        2 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_Init
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text9
  2992  001050                     __ptext9:
  2993                           	opt stack 0
  2994  001050                     _OpenI2C:
  2995                           	opt stack 29
  2996                           
  2997                           ;incstack = 0
  2998                           ;OpenI2C@sync_mode stored from wreg
  2999  001050  6E28               	movwf	OpenI2C@sync_mode,c
  3000  001052  0E3F               	movlw	63
  3001  001054  16C7               	andwf	4039,f,c	;volatile
  3002  001056  0E00               	movlw	0
  3003  001058  6EC6               	movwf	4038,c	;volatile
  3004  00105A  0E00               	movlw	0
  3005  00105C  6EC5               	movwf	4037,c	;volatile
  3006  00105E  5028               	movf	OpenI2C@sync_mode,w,c
  3007  001060  12C6               	iorwf	4038,f,c	;volatile
  3008  001062  5027               	movf	OpenI2C@slew,w,c
  3009  001064  12C7               	iorwf	4039,f,c	;volatile
  3010  001066  8694               	bsf	3988,3,c	;volatile
  3011  001068  8894               	bsf	3988,4,c	;volatile
  3012  00106A  8AC6               	bsf	4038,5,c	;volatile
  3013  00106C  0012               	return		;funcret
  3014  00106E                     __end_of_OpenI2C:
  3015                           	opt stack 0
  3016                           tblptru	equ	0xFF8
  3017                           intcon	equ	0xFF2
  3018                           postinc0	equ	0xFEE
  3019                           wreg	equ	0xFE8
  3020                           indf2	equ	0xFDF
  3021                           fsr2h	equ	0xFDA
  3022                           fsr2l	equ	0xFD9
  3023                           status	equ	0xFD8
  3024                           
  3025 ;; *************** function _FMvers *****************
  3026 ;; Defined at:
  3027 ;;		line 455 in file "main.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  vsn             2   11[COMRAM] PTR unsigned int 
  3030 ;;		 -> main@ui(2), 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      unsigned char 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3042 ;;      Params:         2       0       0       0
  3043 ;;      Locals:         0       0       0       0
  3044 ;;      Temps:          0       0       0       0
  3045 ;;      Totals:         2       0       0       0
  3046 ;;Total ram usage:        2 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    3
  3049 ;; This function calls:
  3050 ;;		_FMread
  3051 ;; This function is called by:
  3052 ;;		_main
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text10
  3057  0010CE                     __ptext10:
  3058                           	opt stack 0
  3059  0010CE                     _FMvers:
  3060                           	opt stack 27
  3061                           
  3062                           ;main.c: 456: if (FMread(0x1C, vsn) != 0) return 1;
  3063                           
  3064                           ;incstack = 0
  3065  0010CE  C032  F029         	movff	FMvers@vsn,FMread@data
  3066  0010D2  C033  F02A         	movff	FMvers@vsn+1,FMread@data+1
  3067  0010D6  0E1C               	movlw	28
  3068  0010D8  ECCE  F005         	call	_FMread
  3069                           
  3070                           ;	Return value of _FMvers is never used
  3071  0010DC  0012               	return	
  3072  0010DE                     __end_of_FMvers:
  3073                           	opt stack 0
  3074                           tblptru	equ	0xFF8
  3075                           intcon	equ	0xFF2
  3076                           postinc0	equ	0xFEE
  3077                           wreg	equ	0xFE8
  3078                           indf2	equ	0xFDF
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _FMinit *****************
  3084 ;; Defined at:
  3085 ;;		line 382 in file "main.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  dat             2   17[COMRAM] unsigned int 
  3090 ;;  ad              1   19[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      unsigned char 
  3093 ;; Registers used:
  3094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3100 ;;      Params:         0       0       0       0
  3101 ;;      Locals:         3       0       0       0
  3102 ;;      Temps:          0       0       0       0
  3103 ;;      Totals:         3       0       0       0
  3104 ;;Total ram usage:        3 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    4
  3107 ;; This function calls:
  3108 ;;		_FMready
  3109 ;;		_FMwrite
  3110 ;;		_dly
  3111 ;; This function is called by:
  3112 ;;		_main
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           	psect	text11
  3117  000C66                     __ptext11:
  3118                           	opt stack 0
  3119  000C66                     _FMinit:
  3120                           	opt stack 26
  3121                           
  3122                           ;main.c: 384: unsigned char ad;
  3123                           ;main.c: 385: unsigned int dat;
  3124                           ;main.c: 388: for(ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];
  3125                           
  3126                           ;incstack = 0
  3127  000C66  0E00               	movlw	0
  3128  000C68  6E3A               	movwf	FMinit@ad,c
  3129  000C6A                     l2896:
  3130  000C6A  0E11               	movlw	17
  3131  000C6C  643A               	cpfsgt	FMinit@ad,c
  3132  000C6E  D001               	goto	l2900
  3133  000C70  D018               	goto	l143
  3134  000C72                     l2900:
  3135  000C72  503A               	movf	FMinit@ad,w,c
  3136  000C74  0D02               	mullw	2
  3137  000C76  0E01               	movlw	low _regDflt
  3138  000C78  24F3               	addwf	prodl,w,c
  3139  000C7A  6EF6               	movwf	tblptrl,c
  3140  000C7C  0E03               	movlw	high _regDflt
  3141  000C7E  20F4               	addwfc	prodh,w,c
  3142  000C80  6EF7               	movwf	tblptrh,c
  3143  000C82                     	if	0	;There are less than 3 active tblptr bytes
  3144  000C82                     	endif
  3145  000C82  503A               	movf	FMinit@ad,w,c
  3146  000C84  0D02               	mullw	2
  3147  000C86  0E01               	movlw	low _regImg
  3148  000C88  24F3               	addwf	prodl,w,c
  3149  000C8A  6ED9               	movwf	fsr2l,c
  3150  000C8C  0E00               	movlw	high _regImg
  3151  000C8E  20F4               	addwfc	prodh,w,c
  3152  000C90  6EDA               	movwf	fsr2h,c
  3153  000C92  0009               	tblrd		*+
  3154  000C94  CFF5 FFDE          	movff	tablat,postinc2
  3155  000C98  0008               	tblrd		*
  3156  000C9A  CFF5 FFDD          	movff	tablat,postdec2
  3157  000C9E  2A3A               	incf	FMinit@ad,f,c
  3158  000CA0  D7E4               	goto	l2896
  3159  000CA2                     l143:
  3160                           
  3161                           ;main.c: 390: dat = regImg[0];
  3162  000CA2  C001  F038         	movff	_regImg,FMinit@dat
  3163  000CA6  C002  F039         	movff	_regImg+1,FMinit@dat+1
  3164                           
  3165                           ;main.c: 391: regImg[0] &= ~1;
  3166  000CAA  9001               	bcf	_regImg,0,c
  3167                           
  3168                           ;main.c: 392: if (FMwrite(0) != 0) return 1;
  3169  000CAC  0E00               	movlw	0
  3170  000CAE  ECD8  F006         	call	_FMwrite
  3171  000CB2  0900               	iorlw	0
  3172  000CB4  B4D8               	btfsc	status,2,c
  3173  000CB6  D002               	goto	l2914
  3174  000CB8  0E01               	movlw	1
  3175  000CBA  0012               	return	
  3176  000CBC                     l2914:
  3177                           
  3178                           ;main.c: 393: for(ad = 1; ad < 18; ad++) {
  3179  000CBC  0E01               	movlw	1
  3180  000CBE  6E3A               	movwf	FMinit@ad,c
  3181  000CC0                     l2916:
  3182  000CC0  0E11               	movlw	17
  3183  000CC2  643A               	cpfsgt	FMinit@ad,c
  3184  000CC4  D001               	goto	l2920
  3185  000CC6  D00A               	goto	l2930
  3186  000CC8                     l2920:
  3187                           
  3188                           ;main.c: 394: if (FMwrite(ad) != 0)return 1;
  3189  000CC8  503A               	movf	FMinit@ad,w,c
  3190  000CCA  ECD8  F006         	call	_FMwrite
  3191  000CCE  0900               	iorlw	0
  3192  000CD0  B4D8               	btfsc	status,2,c
  3193  000CD2  D002               	goto	l2926
  3194  000CD4  0E01               	movlw	1
  3195  000CD6  0012               	return	
  3196  000CD8                     l2926:
  3197  000CD8  2A3A               	incf	FMinit@ad,f,c
  3198  000CDA  D7F2               	goto	l2916
  3199  000CDC                     l2930:
  3200                           
  3201                           ;main.c: 395: }
  3202                           ;main.c: 397: regImg[0] = dat | 1;
  3203  000CDC  0E01               	movlw	1
  3204  000CDE  1038               	iorwf	FMinit@dat,w,c
  3205  000CE0  6E01               	movwf	_regImg,c
  3206  000CE2  5039               	movf	FMinit@dat+1,w,c
  3207  000CE4  6E02               	movwf	_regImg+1,c
  3208                           
  3209                           ;main.c: 398: if (FMwrite(0) != 0) return 1;
  3210  000CE6  0E00               	movlw	0
  3211  000CE8  ECD8  F006         	call	_FMwrite
  3212  000CEC  0900               	iorlw	0
  3213  000CEE  B4D8               	btfsc	status,2,c
  3214  000CF0  D002               	goto	l2938
  3215  000CF2  0E01               	movlw	1
  3216  000CF4  0012               	return	
  3217  000CF6                     l2938:
  3218                           
  3219                           ;main.c: 399: dly(20);
  3220  000CF6  0E00               	movlw	0
  3221  000CF8  6E28               	movwf	dly@d+1,c
  3222  000CFA  0E14               	movlw	20
  3223  000CFC  6E27               	movwf	dly@d,c
  3224  000CFE  EC0F  F008         	call	_dly	;wreg free
  3225                           
  3226                           ;main.c: 400: while (FMready(&dat), !dat) dly(2);
  3227  000D02  D006               	goto	l2942
  3228  000D04                     l2940:
  3229  000D04  0E00               	movlw	0
  3230  000D06  6E28               	movwf	dly@d+1,c
  3231  000D08  0E02               	movlw	2
  3232  000D0A  6E27               	movwf	dly@d,c
  3233  000D0C  EC0F  F008         	call	_dly	;wreg free
  3234  000D10                     l2942:
  3235  000D10  0E38               	movlw	low FMinit@dat
  3236  000D12  6E32               	movwf	FMready@rdy,c
  3237  000D14  0E00               	movlw	high FMinit@dat
  3238  000D16  6E33               	movwf	FMready@rdy+1,c
  3239  000D18  ECEC  F007         	call	_FMready	;wreg free
  3240  000D1C  5038               	movf	FMinit@dat,w,c
  3241  000D1E  1039               	iorwf	FMinit@dat+1,w,c
  3242  000D20  B4D8               	btfsc	status,2,c
  3243  000D22  D7F0               	goto	l2940
  3244                           
  3245                           ;main.c: 402: return 0;
  3246  000D24  0E00               	movlw	0
  3247  000D26  0012               	return	
  3248  000D28                     __end_of_FMinit:
  3249                           	opt stack 0
  3250                           tblptru	equ	0xFF8
  3251                           tblptrh	equ	0xFF7
  3252                           tblptrl	equ	0xFF6
  3253                           tablat	equ	0xFF5
  3254                           prodh	equ	0xFF4
  3255                           prodl	equ	0xFF3
  3256                           intcon	equ	0xFF2
  3257                           postinc0	equ	0xFEE
  3258                           wreg	equ	0xFE8
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _dly *****************
  3267 ;; Defined at:
  3268 ;;		line 167 in file "main.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  d               2    0[COMRAM] int 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  i               2    2[COMRAM] int 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      void 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3282 ;;      Params:         2       0       0       0
  3283 ;;      Locals:         2       0       0       0
  3284 ;;      Temps:          0       0       0       0
  3285 ;;      Totals:         4       0       0       0
  3286 ;;Total ram usage:        4 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; This function calls:
  3289 ;;		Nothing
  3290 ;; This function is called by:
  3291 ;;		_butnEvent
  3292 ;;		_FMinit
  3293 ;;		_FMfrequenc
  3294 ;;		_scanNext
  3295 ;;		_main
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text12
  3300  00101E                     __ptext12:
  3301                           	opt stack 0
  3302  00101E                     _dly:
  3303                           	opt stack 29
  3304                           
  3305                           ;main.c: 169: int i = 0;
  3306                           
  3307                           ;incstack = 0
  3308  00101E  0E00               	movlw	0
  3309  001020  6E2A               	movwf	dly@i+1,c
  3310  001022  0E00               	movlw	0
  3311  001024  6E29               	movwf	dly@i,c
  3312                           
  3313                           ;main.c: 171: for ( ; d; --d)
  3314  001026  D00F               	goto	l2760
  3315  001028                     l2752:
  3316                           
  3317                           ;main.c: 172: for (i = 1000; i; --i) ;
  3318  001028  0E03               	movlw	3
  3319  00102A  6E2A               	movwf	dly@i+1,c
  3320  00102C  0EE8               	movlw	232
  3321  00102E  6E29               	movwf	dly@i,c
  3322  001030  D003               	goto	l2756
  3323  001032                     l2754:
  3324  001032  0629               	decf	dly@i,f,c
  3325  001034  A0D8               	btfss	status,0,c
  3326  001036  062A               	decf	dly@i+1,f,c
  3327  001038                     l2756:
  3328  001038  5029               	movf	dly@i,w,c
  3329  00103A  102A               	iorwf	dly@i+1,w,c
  3330  00103C  A4D8               	btfss	status,2,c
  3331  00103E  D7F9               	goto	l2754
  3332  001040  0627               	decf	dly@d,f,c
  3333  001042  A0D8               	btfss	status,0,c
  3334  001044  0628               	decf	dly@d+1,f,c
  3335  001046                     l2760:
  3336  001046  5027               	movf	dly@d,w,c
  3337  001048  1028               	iorwf	dly@d+1,w,c
  3338  00104A  B4D8               	btfsc	status,2,c
  3339  00104C  0012               	return	
  3340  00104E  D7EC               	goto	l2752
  3341  001050                     __end_of_dly:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           intcon	equ	0xFF2
  3350                           postinc0	equ	0xFEE
  3351                           wreg	equ	0xFE8
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _FMwrite *****************
  3360 ;; Defined at:
  3361 ;;		line 269 in file "main.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  adr             1    wreg     unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  adr             1    6[COMRAM] unsigned char 
  3366 ;;  secndByt        1    5[COMRAM] unsigned char 
  3367 ;;  firstByt        1    4[COMRAM] unsigned char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      unsigned char 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3377 ;;      Params:         0       0       0       0
  3378 ;;      Locals:         3       0       0       0
  3379 ;;      Temps:          2       0       0       0
  3380 ;;      Totals:         5       0       0       0
  3381 ;;Total ram usage:        5 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    2
  3384 ;; This function calls:
  3385 ;;		_IdleI2C
  3386 ;;		_WriteI2C
  3387 ;; This function is called by:
  3388 ;;		_FMinit
  3389 ;;		_FMfrequenc
  3390 ;;		_scanNext
  3391 ;;		_mute
  3392 ;;		_setVolume
  3393 ;;		_main
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text13
  3398  000DB0                     __ptext13:
  3399                           	opt stack 0
  3400  000DB0                     _FMwrite:
  3401                           	opt stack 27
  3402                           
  3403                           ;incstack = 0
  3404                           ;FMwrite@adr stored from wreg
  3405  000DB0  6E2D               	movwf	FMwrite@adr,c
  3406                           
  3407                           ;main.c: 271: unsigned char firstByt;
  3408                           ;main.c: 272: unsigned char secndByt;
  3409                           ;main.c: 274: firstByt = regImg[adr] >> 8;
  3410  000DB2  502D               	movf	FMwrite@adr,w,c
  3411  000DB4  0D02               	mullw	2
  3412  000DB6  0E01               	movlw	low _regImg
  3413  000DB8  24F3               	addwf	prodl,w,c
  3414  000DBA  6ED9               	movwf	fsr2l,c
  3415  000DBC  0E00               	movlw	high _regImg
  3416  000DBE  20F4               	addwfc	prodh,w,c
  3417  000DC0  6EDA               	movwf	fsr2h,c
  3418  000DC2  CFDE F029          	movff	postinc2,??_FMwrite
  3419  000DC6  CFDD F02A          	movff	postdec2,??_FMwrite+1
  3420  000DCA  C02A  F029         	movff	??_FMwrite+1,??_FMwrite
  3421  000DCE  6A2A               	clrf	??_FMwrite+1,c
  3422  000DD0  5029               	movf	??_FMwrite,w,c
  3423  000DD2  6E2B               	movwf	FMwrite@firstByt,c
  3424                           
  3425                           ;main.c: 275: secndByt = regImg[adr];
  3426  000DD4  502D               	movf	FMwrite@adr,w,c
  3427  000DD6  0D02               	mullw	2
  3428  000DD8  0E01               	movlw	low _regImg
  3429  000DDA  24F3               	addwf	prodl,w,c
  3430  000DDC  6ED9               	movwf	fsr2l,c
  3431  000DDE  0E00               	movlw	high _regImg
  3432  000DE0  20F4               	addwfc	prodh,w,c
  3433  000DE2  6EDA               	movwf	fsr2h,c
  3434  000DE4  50DF               	movf	indf2,w,c
  3435  000DE6  6E2C               	movwf	FMwrite@secndByt,c
  3436                           
  3437                           ;main.c: 277: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3438  000DE8  80C5               	bsf	4037,0,c	;volatile
  3439  000DEA                     l109:
  3440  000DEA  B0C5               	btfsc	4037,0,c	;volatile
  3441  000DEC  D7FE               	goto	l109
  3442                           
  3443                           ;main.c: 278: IdleI2C();
  3444  000DEE  EC5E  F008         	call	_IdleI2C	;wreg free
  3445                           
  3446                           ;main.c: 281: if (WriteI2C(0x20)) return 1;
  3447  000DF2  0E20               	movlw	32
  3448  000DF4  ECBD  F007         	call	_WriteI2C
  3449  000DF8  0900               	iorlw	0
  3450  000DFA  B4D8               	btfsc	status,2,c
  3451  000DFC  D002               	goto	l1102
  3452  000DFE  0E01               	movlw	1
  3453  000E00  0012               	return	
  3454  000E02                     l1102:
  3455                           
  3456                           ;main.c: 282: IdleI2C();
  3457  000E02  EC5E  F008         	call	_IdleI2C	;wreg free
  3458                           
  3459                           ;main.c: 283: WriteI2C(adr);
  3460  000E06  502D               	movf	FMwrite@adr,w,c
  3461  000E08  ECBD  F007         	call	_WriteI2C
  3462                           
  3463                           ;main.c: 284: IdleI2C();
  3464  000E0C  EC5E  F008         	call	_IdleI2C	;wreg free
  3465                           
  3466                           ;main.c: 285: WriteI2C(firstByt);
  3467  000E10  502B               	movf	FMwrite@firstByt,w,c
  3468  000E12  ECBD  F007         	call	_WriteI2C
  3469                           
  3470                           ;main.c: 286: IdleI2C();
  3471  000E16  EC5E  F008         	call	_IdleI2C	;wreg free
  3472                           
  3473                           ;main.c: 287: WriteI2C(secndByt);
  3474  000E1A  502C               	movf	FMwrite@secndByt,w,c
  3475  000E1C  ECBD  F007         	call	_WriteI2C
  3476                           
  3477                           ;main.c: 288: IdleI2C();
  3478  000E20  EC5E  F008         	call	_IdleI2C	;wreg free
  3479                           
  3480                           ;main.c: 289: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3481  000E24  84C5               	bsf	4037,2,c	;volatile
  3482  000E26                     l114:
  3483  000E26  B4C5               	btfsc	4037,2,c	;volatile
  3484  000E28  D7FE               	goto	l114
  3485                           
  3486                           ;main.c: 290: IdleI2C();
  3487  000E2A  EC5E  F008         	call	_IdleI2C	;wreg free
  3488                           
  3489                           ;main.c: 291: return 0;
  3490  000E2E  0E00               	movlw	0
  3491  000E30  0012               	return	
  3492  000E32                     __end_of_FMwrite:
  3493                           	opt stack 0
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           intcon	equ	0xFF2
  3501                           postinc0	equ	0xFEE
  3502                           wreg	equ	0xFE8
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _FMready *****************
  3511 ;; Defined at:
  3512 ;;		line 361 in file "main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  rdy             2   11[COMRAM] PTR unsigned int 
  3515 ;;		 -> FMfrequenc@dat(2), FMinit@dat(2), 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  sts             2   15[COMRAM] unsigned int 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      unsigned char 
  3520 ;; Registers used:
  3521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3527 ;;      Params:         2       0       0       0
  3528 ;;      Locals:         2       0       0       0
  3529 ;;      Temps:          2       0       0       0
  3530 ;;      Totals:         6       0       0       0
  3531 ;;Total ram usage:        6 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    3
  3534 ;; This function calls:
  3535 ;;		_FMread
  3536 ;; This function is called by:
  3537 ;;		_FMinit
  3538 ;;		_FMfrequenc
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text14
  3543  000FD8                     __ptext14:
  3544                           	opt stack 0
  3545  000FD8                     _FMready:
  3546                           	opt stack 25
  3547                           
  3548                           ;main.c: 363: unsigned int sts;
  3549                           ;main.c: 365: if (FMread(0x13, &sts) != 0) return 1;
  3550                           
  3551                           ;incstack = 0
  3552  000FD8  0E36               	movlw	low FMready@sts
  3553  000FDA  6E29               	movwf	FMread@data,c
  3554  000FDC  0E00               	movlw	high FMready@sts
  3555  000FDE  6E2A               	movwf	FMread@data+1,c
  3556  000FE0  0E13               	movlw	19
  3557  000FE2  ECCE  F005         	call	_FMread
  3558  000FE6  0900               	iorlw	0
  3559  000FE8  B4D8               	btfsc	status,2,c
  3560  000FEA  D002               	goto	l2768
  3561  000FEC  0E01               	movlw	1
  3562  000FEE  0012               	return	
  3563  000FF0                     l2768:
  3564                           
  3565                           ;main.c: 366: sts &= 0x0020;
  3566  000FF0  0E20               	movlw	32
  3567  000FF2  1636               	andwf	FMready@sts,f,c
  3568  000FF4  0E00               	movlw	0
  3569  000FF6  1637               	andwf	FMready@sts+1,f,c
  3570                           
  3571                           ;main.c: 367: *rdy = sts ? 1 : 0;
  3572  000FF8  5036               	movf	FMready@sts,w,c
  3573  000FFA  1037               	iorwf	FMready@sts+1,w,c
  3574  000FFC  B4D8               	btfsc	status,2,c
  3575  000FFE  D002               	goto	u930
  3576  001000  0E01               	movlw	1
  3577  001002  D001               	goto	u940
  3578  001004                     u930:
  3579  001004  0E00               	movlw	0
  3580  001006                     u940:
  3581  001006  6E34               	movwf	??_FMready& (0+255),c
  3582  001008  6A35               	clrf	(??_FMready+1)& (0+255),c
  3583  00100A  C032  FFD9         	movff	FMready@rdy,fsr2l
  3584  00100E  C033  FFDA         	movff	FMready@rdy+1,fsr2h
  3585  001012  C034  FFDE         	movff	??_FMready,postinc2
  3586  001016  C035  FFDD         	movff	??_FMready+1,postdec2
  3587                           
  3588                           ;main.c: 368: return 0;
  3589  00101A  0E00               	movlw	0
  3590  00101C  0012               	return	
  3591  00101E                     __end_of_FMready:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           intcon	equ	0xFF2
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           
  3609 ;; *************** function _FMread *****************
  3610 ;; Defined at:
  3611 ;;		line 311 in file "main.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  regAddr         1    wreg     unsigned char 
  3614 ;;  data            2    2[COMRAM] PTR unsigned int 
  3615 ;;		 -> main@ui(2), FMreadChan@newFreq(2), scanNext@STC(2), FMready@sts(2), 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  regAddr         1    8[COMRAM] unsigned char 
  3618 ;;  secndByt        1   10[COMRAM] unsigned char 
  3619 ;;  firstByt        1    9[COMRAM] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      unsigned char 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3629 ;;      Params:         2       0       0       0
  3630 ;;      Locals:         3       0       0       0
  3631 ;;      Temps:          4       0       0       0
  3632 ;;      Totals:         9       0       0       0
  3633 ;;Total ram usage:        9 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    2
  3636 ;; This function calls:
  3637 ;;		_IdleI2C
  3638 ;;		_ReadI2C
  3639 ;;		_WriteI2C
  3640 ;; This function is called by:
  3641 ;;		_FMready
  3642 ;;		_FMvers
  3643 ;;		_scanNext
  3644 ;;		_FMid
  3645 ;;		_FMreadChan
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text15
  3650  000B9C                     __ptext15:
  3651                           	opt stack 0
  3652  000B9C                     _FMread:
  3653                           	opt stack 27
  3654                           
  3655                           ;incstack = 0
  3656                           ;FMread@regAddr stored from wreg
  3657  000B9C  6E2F               	movwf	FMread@regAddr,c
  3658                           
  3659                           ;main.c: 313: unsigned char firstByt;
  3660                           ;main.c: 314: unsigned char secndByt;
  3661                           ;main.c: 316: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3662  000B9E  80C5               	bsf	4037,0,c	;volatile
  3663  000BA0                     l119:
  3664  000BA0  B0C5               	btfsc	4037,0,c	;volatile
  3665  000BA2  D7FE               	goto	l119
  3666                           
  3667                           ;main.c: 317: IdleI2C();
  3668  000BA4  EC5E  F008         	call	_IdleI2C	;wreg free
  3669                           
  3670                           ;main.c: 320: if (WriteI2C(0x20)) return 1;
  3671  000BA8  0E20               	movlw	32
  3672  000BAA  ECBD  F007         	call	_WriteI2C
  3673  000BAE  0900               	iorlw	0
  3674  000BB0  B4D8               	btfsc	status,2,c
  3675  000BB2  D002               	goto	l2718
  3676  000BB4  0E01               	movlw	1
  3677  000BB6  0012               	return	
  3678  000BB8                     l2718:
  3679                           
  3680                           ;main.c: 321: IdleI2C();
  3681  000BB8  EC5E  F008         	call	_IdleI2C	;wreg free
  3682                           
  3683                           ;main.c: 322: WriteI2C(regAddr);
  3684  000BBC  502F               	movf	FMread@regAddr,w,c
  3685  000BBE  ECBD  F007         	call	_WriteI2C
  3686                           
  3687                           ;main.c: 323: IdleI2C();
  3688  000BC2  EC5E  F008         	call	_IdleI2C	;wreg free
  3689                           
  3690                           ;main.c: 324: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  3691  000BC6  82C5               	bsf	4037,1,c	;volatile
  3692  000BC8                     l124:
  3693  000BC8  B2C5               	btfsc	4037,1,c	;volatile
  3694  000BCA  D7FE               	goto	l124
  3695                           
  3696                           ;main.c: 325: IdleI2C();
  3697  000BCC  EC5E  F008         	call	_IdleI2C	;wreg free
  3698                           
  3699                           ;main.c: 326: WriteI2C(0x20 + 0x01);
  3700  000BD0  0E21               	movlw	33
  3701  000BD2  ECBD  F007         	call	_WriteI2C
  3702                           
  3703                           ;main.c: 327: IdleI2C();
  3704  000BD6  EC5E  F008         	call	_IdleI2C	;wreg free
  3705                           
  3706                           ;main.c: 328: firstByt = ReadI2C();
  3707  000BDA  EC45  F008         	call	_ReadI2C	;wreg free
  3708  000BDE  6E30               	movwf	FMread@firstByt,c
  3709                           
  3710                           ;main.c: 329: IdleI2C();
  3711  000BE0  EC5E  F008         	call	_IdleI2C	;wreg free
  3712                           
  3713                           ;main.c: 330: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3714  000BE4  9AC5               	bcf	4037,5,c	;volatile
  3715  000BE6  88C5               	bsf	4037,4,c	;volatile
  3716  000BE8                     l127:
  3717  000BE8  B8C5               	btfsc	4037,4,c	;volatile
  3718  000BEA  D7FE               	goto	l127
  3719                           
  3720                           ;main.c: 331: IdleI2C();
  3721  000BEC  EC5E  F008         	call	_IdleI2C	;wreg free
  3722                           
  3723                           ;main.c: 332: secndByt = ReadI2C();
  3724  000BF0  EC45  F008         	call	_ReadI2C	;wreg free
  3725  000BF4  6E31               	movwf	FMread@secndByt,c
  3726                           
  3727                           ;main.c: 333: IdleI2C();
  3728  000BF6  EC5E  F008         	call	_IdleI2C	;wreg free
  3729                           
  3730                           ;main.c: 334: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3731  000BFA  8AC5               	bsf	4037,5,c	;volatile
  3732  000BFC  88C5               	bsf	4037,4,c	;volatile
  3733  000BFE                     l130:
  3734  000BFE  B8C5               	btfsc	4037,4,c	;volatile
  3735  000C00  D7FE               	goto	l130
  3736                           
  3737                           ;main.c: 335: IdleI2C();
  3738  000C02  EC5E  F008         	call	_IdleI2C	;wreg free
  3739                           
  3740                           ;main.c: 336: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3741  000C06  84C5               	bsf	4037,2,c	;volatile
  3742  000C08                     l133:
  3743  000C08  B4C5               	btfsc	4037,2,c	;volatile
  3744  000C0A  D7FE               	goto	l133
  3745                           
  3746                           ;main.c: 337: IdleI2C();
  3747  000C0C  EC5E  F008         	call	_IdleI2C	;wreg free
  3748                           
  3749                           ;main.c: 338: *data = firstByt;
  3750  000C10  5030               	movf	FMread@firstByt,w,c
  3751  000C12  6E2B               	movwf	??_FMread& (0+255),c
  3752  000C14  6A2C               	clrf	(??_FMread+1)& (0+255),c
  3753  000C16  C029  FFD9         	movff	FMread@data,fsr2l
  3754  000C1A  C02A  FFDA         	movff	FMread@data+1,fsr2h
  3755  000C1E  C02B  FFDE         	movff	??_FMread,postinc2
  3756  000C22  C02C  FFDD         	movff	??_FMread+1,postdec2
  3757                           
  3758                           ;main.c: 339: *data <<= 8;
  3759  000C26  C029  FFD9         	movff	FMread@data,fsr2l
  3760  000C2A  C02A  FFDA         	movff	FMread@data+1,fsr2h
  3761  000C2E  50DE               	movf	postinc2,w,c
  3762  000C30  6EDD               	movwf	postdec2,c
  3763  000C32  6ADF               	clrf	indf2,c
  3764                           
  3765                           ;main.c: 340: *data = *data | secndByt;
  3766  000C34  C029  FFD9         	movff	FMread@data,fsr2l
  3767  000C38  C02A  FFDA         	movff	FMread@data+1,fsr2h
  3768  000C3C  CFDE F02B          	movff	postinc2,??_FMread
  3769  000C40  CFDD F02C          	movff	postdec2,??_FMread+1
  3770  000C44  5031               	movf	FMread@secndByt,w,c
  3771  000C46  6E2D               	movwf	(??_FMread+2)& (0+255),c
  3772  000C48  6A2E               	clrf	(??_FMread+3)& (0+255),c
  3773  000C4A  502B               	movf	??_FMread,w,c
  3774  000C4C  122D               	iorwf	??_FMread+2,f,c
  3775  000C4E  502C               	movf	??_FMread+1,w,c
  3776  000C50  122E               	iorwf	??_FMread+3,f,c
  3777  000C52  C029  FFD9         	movff	FMread@data,fsr2l
  3778  000C56  C02A  FFDA         	movff	FMread@data+1,fsr2h
  3779  000C5A  C02D  FFDE         	movff	??_FMread+2,postinc2
  3780  000C5E  C02E  FFDD         	movff	??_FMread+3,postdec2
  3781                           
  3782                           ;main.c: 342: return 0;
  3783  000C62  0E00               	movlw	0
  3784  000C64  0012               	return	
  3785  000C66                     __end_of_FMread:
  3786                           	opt stack 0
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803 ;; *************** function _WriteI2C *****************
  3804 ;; Defined at:
  3805 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_writ.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  data_out        1    wreg     unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  data_out        1    1[COMRAM] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      char 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3819 ;;      Params:         0       0       0       0
  3820 ;;      Locals:         1       0       0       0
  3821 ;;      Temps:          0       0       0       0
  3822 ;;      Totals:         1       0       0       0
  3823 ;;Total ram usage:        1 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    1
  3826 ;; This function calls:
  3827 ;;		_IdleI2C
  3828 ;; This function is called by:
  3829 ;;		_FMwrite
  3830 ;;		_FMread
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text16
  3835  000F7A                     __ptext16:
  3836                           	opt stack 0
  3837  000F7A                     _WriteI2C:
  3838                           	opt stack 27
  3839                           
  3840                           ;incstack = 0
  3841                           ;WriteI2C@data_out stored from wreg
  3842  000F7A  6E28               	movwf	WriteI2C@data_out,c
  3843  000F7C  C028  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3844  000F80  AEC6               	btfss	4038,7,c	;volatile
  3845  000F82  D002               	goto	l996
  3846  000F84  0EFF               	movlw	255
  3847  000F86  0012               	return	
  3848  000F88                     l996:
  3849  000F88  50C6               	movf	4038,w,c	;volatile
  3850  000F8A  0B0F               	andlw	15
  3851  000F8C  0A08               	xorlw	8
  3852  000F8E  B4D8               	btfsc	status,2,c
  3853  000F90  D00F               	goto	l1014
  3854  000F92  50C6               	movf	4038,w,c	;volatile
  3855  000F94  0B0F               	andlw	15
  3856  000F96  0A0B               	xorlw	11
  3857  000F98  B4D8               	btfsc	status,2,c
  3858  000F9A  D00A               	goto	l1014
  3859  000F9C  88C6               	bsf	4038,4,c	;volatile
  3860  000F9E                     l353:
  3861  000F9E  A69E               	btfss	3998,3,c	;volatile
  3862  000FA0  D7FE               	goto	l353
  3863  000FA2  A4C7               	btfss	4039,2,c	;volatile
  3864  000FA4  B0C7               	btfsc	4039,0,c	;volatile
  3865  000FA6  D002               	goto	l1010
  3866  000FA8  0EFE               	movlw	254
  3867  000FAA  0012               	return	
  3868  000FAC                     l1010:
  3869  000FAC  0E00               	movlw	0
  3870  000FAE  0012               	return	
  3871  000FB0                     l1014:
  3872  000FB0  50C6               	movf	4038,w,c	;volatile
  3873  000FB2  0B0F               	andlw	15
  3874  000FB4  0A08               	xorlw	8
  3875  000FB6  B4D8               	btfsc	status,2,c
  3876  000FB8  D005               	goto	l362
  3877  000FBA  50C6               	movf	4038,w,c	;volatile
  3878  000FBC  0B0F               	andlw	15
  3879  000FBE  0A0B               	xorlw	11
  3880  000FC0  A4D8               	btfss	status,2,c
  3881  000FC2  0012               	return	
  3882  000FC4                     l362:
  3883  000FC4  B0C7               	btfsc	4039,0,c	;volatile
  3884  000FC6  D7FE               	goto	l362
  3885  000FC8  EC5E  F008         	call	_IdleI2C	;wreg free
  3886  000FCC  ACC5               	btfss	4037,6,c	;volatile
  3887  000FCE  D002               	goto	l1028
  3888  000FD0  0EFE               	movlw	254
  3889  000FD2  0012               	return	
  3890  000FD4                     l1028:
  3891  000FD4  0E00               	movlw	0
  3892  000FD6  0012               	return	
  3893  000FD8                     __end_of_WriteI2C:
  3894                           	opt stack 0
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           prodh	equ	0xFF4
  3900                           prodl	equ	0xFF3
  3901                           intcon	equ	0xFF2
  3902                           postinc0	equ	0xFEE
  3903                           wreg	equ	0xFE8
  3904                           indf2	equ	0xFDF
  3905                           postinc2	equ	0xFDE
  3906                           postdec2	equ	0xFDD
  3907                           fsr2h	equ	0xFDA
  3908                           fsr2l	equ	0xFD9
  3909                           status	equ	0xFD8
  3910                           
  3911 ;; *************** function _IdleI2C *****************
  3912 ;; Defined at:
  3913 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_idle.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, status,2, status,0
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3927 ;;      Params:         0       0       0       0
  3928 ;;      Locals:         0       0       0       0
  3929 ;;      Temps:          1       0       0       0
  3930 ;;      Totals:         1       0       0       0
  3931 ;;Total ram usage:        1 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_FMwrite
  3937 ;;		_FMread
  3938 ;;		_WriteI2C
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text17
  3943  0010BC                     __ptext17:
  3944                           	opt stack 0
  3945  0010BC                     _IdleI2C:
  3946                           	opt stack 27
  3947  0010BC                     l982:
  3948  0010BC  CFC5 F027          	movff	4037,??_IdleI2C	;volatile
  3949  0010C0  0E1F               	movlw	31
  3950  0010C2  1627               	andwf	??_IdleI2C,f,c
  3951  0010C4  A4D8               	btfss	status,2,c
  3952  0010C6  D7FA               	goto	l982
  3953  0010C8  A4C7               	btfss	4039,2,c	;volatile
  3954  0010CA  0012               	return	
  3955  0010CC  D7F7               	goto	l982
  3956  0010CE                     __end_of_IdleI2C:
  3957                           	opt stack 0
  3958                           tblptru	equ	0xFF8
  3959                           tblptrh	equ	0xFF7
  3960                           tblptrl	equ	0xFF6
  3961                           tablat	equ	0xFF5
  3962                           prodh	equ	0xFF4
  3963                           prodl	equ	0xFF3
  3964                           intcon	equ	0xFF2
  3965                           postinc0	equ	0xFEE
  3966                           wreg	equ	0xFE8
  3967                           indf2	equ	0xFDF
  3968                           postinc2	equ	0xFDE
  3969                           postdec2	equ	0xFDD
  3970                           fsr2h	equ	0xFDA
  3971                           fsr2l	equ	0xFD9
  3972                           status	equ	0xFD8
  3973                           
  3974 ;; *************** function _ReadI2C *****************
  3975 ;; Defined at:
  3976 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_read.c"
  3977 ;; Parameters:    Size  Location     Type
  3978 ;;		None
  3979 ;; Auto vars:     Size  Location     Type
  3980 ;;		None
  3981 ;; Return value:  Size  Location     Type
  3982 ;;                  1    wreg      unsigned char 
  3983 ;; Registers used:
  3984 ;;		wreg, status,2, status,0
  3985 ;; Tracked objects:
  3986 ;;		On entry : 0/0
  3987 ;;		On exit  : 0/0
  3988 ;;		Unchanged: 0/0
  3989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3990 ;;      Params:         0       0       0       0
  3991 ;;      Locals:         0       0       0       0
  3992 ;;      Temps:          0       0       0       0
  3993 ;;      Totals:         0       0       0       0
  3994 ;;Total ram usage:        0 bytes
  3995 ;; Hardware stack levels used:    1
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_FMread
  4000 ;; This function uses a non-reentrant model
  4001 ;;
  4002                           
  4003                           	psect	text18
  4004  00108A                     __ptext18:
  4005                           	opt stack 0
  4006  00108A                     _ReadI2C:
  4007                           	opt stack 28
  4008                           
  4009                           ;incstack = 0
  4010  00108A  50C6               	movf	4038,w,c	;volatile
  4011  00108C  0B0F               	andlw	15
  4012  00108E  0A08               	xorlw	8
  4013  001090  B4D8               	btfsc	status,2,c
  4014  001092  D004               	goto	l328
  4015  001094  50C6               	movf	4038,w,c	;volatile
  4016  001096  0B0F               	andlw	15
  4017  001098  0A0B               	xorlw	11
  4018  00109A  B4D8               	btfsc	status,2,c
  4019  00109C                     l328:
  4020  00109C  86C5               	bsf	4037,3,c	;volatile
  4021  00109E                     l329:
  4022  00109E  A0C7               	btfss	4039,0,c	;volatile
  4023  0010A0  D7FE               	goto	l329
  4024  0010A2  50C9               	movf	4041,w,c	;volatile
  4025  0010A4  0012               	return	
  4026  0010A6                     __end_of_ReadI2C:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon	equ	0xFF2
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodh	equ	0xFF4
  4048                           prodl	equ	0xFF3
  4049                           intcon	equ	0xFF2
  4050                           postinc0	equ	0xFEE
  4051                           wreg	equ	0xFE8
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059                           	psect	rparam
  4060  0000                     tblptru	equ	0xFF8
  4061                           tblptrh	equ	0xFF7
  4062                           tblptrl	equ	0xFF6
  4063                           tablat	equ	0xFF5
  4064                           prodh	equ	0xFF4
  4065                           prodl	equ	0xFF3
  4066                           intcon	equ	0xFF2
  4067                           postinc0	equ	0xFEE
  4068                           wreg	equ	0xFE8
  4069                           indf2	equ	0xFDF
  4070                           postinc2	equ	0xFDE
  4071                           postdec2	equ	0xFDD
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    36
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     36      74
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           244      0       0

Pointer List with Targets:

    FMvers@vsn	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), 

    FMready@rdy	PTR unsigned int  size(2) Largest target is 2
		 -> FMfrequenc@dat(COMRAM[2]), FMinit@dat(COMRAM[2]), 

    FMread@data	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), FMreadChan@newFreq(COMRAM[2]), scanNext@STC(COMRAM[2]), FMready@sts(COMRAM[2]), 

    butnEvent@btn	PTR unsigned char  size(2) Largest target is 1
		 -> main@btn(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_nextChan
    _setVolume->_FMwrite
    _scanNext->_FMread
    _nextChan->_FMfrequenc
    _mute->_FMwrite
    _FMfrequenc->_FMready
    _butnEvent->_dly
    _Init->_OpenI2C
    _FMvers->_FMread
    _FMinit->_FMready
    _FMwrite->_WriteI2C
    _FMready->_FMread
    _FMread->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10786
                                             32 COMRAM     4     4      0
                         _FMfrequenc
                             _FMinit
                             _FMvers
                            _FMwrite
                               _Init
                          _butnEvent
                                _dly
                              _errfm
                           _nextChan
                           _scanNext
                          _setVolume
 ---------------------------------------------------------------------------------
 (1) _setVolume                                           12    10      2     354
                                              7 COMRAM    10     8      2
                            _FMwrite
 ---------------------------------------------------------------------------------
 (1) _scanNext                                             3     3      0    1640
                                             11 COMRAM     3     3      0
                             _FMread
                            _FMwrite
                                _dly
                               _mute
 ---------------------------------------------------------------------------------
 (1) _nextChan                                             5     5      0    2095
                                             27 COMRAM     5     5      0
                         _FMfrequenc
                               _mute
 ---------------------------------------------------------------------------------
 (2) _mute                                                 1     1      0     105
                                              7 COMRAM     1     1      0
                            _FMwrite
 ---------------------------------------------------------------------------------
 (2) _FMfrequenc                                          10     8      2    1946
                                             17 COMRAM    10     8      2
                            _FMready
                            _FMwrite
                                _dly
 ---------------------------------------------------------------------------------
 (1) _errfm                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _butnEvent                                            2     0      2    1076
                                              4 COMRAM     2     0      2
                                _dly
 ---------------------------------------------------------------------------------
 (1) _Init                                                 2     2      0     108
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _FMvers                                               2     0      2     577
                                             11 COMRAM     2     0      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _FMinit                                               3     3      0    1890
                                             17 COMRAM     3     3      0
                            _FMready
                            _FMwrite
                                _dly
 ---------------------------------------------------------------------------------
 (2) _dly                                                  4     2      2     880
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _FMwrite                                              5     5      0      90
                                              2 COMRAM     5     5      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _FMready                                              6     4      2     693
                                             11 COMRAM     6     4      2
                             _FMread
 ---------------------------------------------------------------------------------
 (2) _FMread                                               9     7      2     491
                                              2 COMRAM     9     7      2
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             1     1      0      15
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (4) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FMfrequenc
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
   _FMinit
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
   _FMvers
     _FMread
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
   _FMwrite
     _IdleI2C
     _WriteI2C
       _IdleI2C
   _Init
     _OpenI2C
   _butnEvent
     _dly
   _dly
   _errfm
   _nextChan
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _dly
     _mute
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _scanNext
     _FMread
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
     _mute
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
   _setVolume
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F3      0       0      10        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2            F4      0       0       8        0.0%
BANK2               F4      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     24      4A       1       77.9%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4A       7        0.0%
DATA                 0      0      4A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue May 08 15:44:27 2018

            __CFG_CP$OFF 000000              _SSPSTATbits 000FC7                       l82 0B78  
                     l75 0B0C                       l79 0B58              __CFG_BORV$3 000000  
                    l130 0BFE                      l114 0E26                      l124 0BC8  
                    l133 0C08                      l109 0DEA                      l127 0BE8  
                    l119 0BA0                      l143 0CA2                      l183 0E62  
                    l328 109C                      l329 109E                      l353 0F9E  
                    l193 10DE                      l362 0FC4                      l982 10BC  
                    l996 0F88                      u930 1004                      u940 1006  
                    _dly 101E                      prod 000FF3                      wreg 000FE8  
           __CFG_WDT$OFF 000000                     l1010 0FAC                     l1014 0FB0  
                   l1102 0E02                     l1028 0FD4                     l3000 0E60  
                   l1170 1080                     l3012 0E94                     l3006 0E72  
                   l3110 04DA                     l3030 035A                     l3200 0784  
                   l3104 04BC                     l3130 052E                     l3122 0516  
                   l3042 0396                     l3220 07D8                     l3116 04F8  
                   l3060 03F0                     l3036 0378                     l3214 07BA  
                   l3206 07A2                     l3054 03D2                     l3232 0814  
                   l3152 069C                     l3072 042C                     l3048 03B4  
                   l3250 086E                     l3226 07F6                     l3170 06EE  
                   l3138 0546                     l3066 040E                     l3146 055C  
                   l4300 0986                     l3244 0850                     l3164 06D0  
                   l3092 0480                     l3148 0692                     l4310 09B8  
                   l4302 0990                     l3238 0832                     l3182 072A  
                   l3158 06B2                     l3086 0462                     l3078 044A  
                   l4312 09C2                     l4304 099A                     l3176 070C  
                   l4240 05DA                     l4314 09CC                     l4306 09A4  
                   l3258 0886                     l3194 0766                     l4250 060C  
                   l4242 05E4                     l3098 049E                     l2900 0C72  
                   l4308 09AE                     l3188 0748                     l3268 089E  
                   l4260 063A                     l4252 0616                     l4244 05EE  
                   l2718 0BB8                     l4270 066C                     l4262 0644  
                   l4254 0620                     l4246 05F8                     l3470 0A6C  
                   l2752 1028                     l2760 1046                     l2920 0CC8  
                   l4280 0922                     l4272 0676                     l4264 064E  
                   l4256 062A                     l4248 0602                     l3472 0A74  
                   l3464 0A54                     ?_dly 0027                     l2754 1032  
                   l2930 0CDC                     l2914 0CBC                     l2826 0AF0  
                   l4290 0954                     l4282 092C                     l4274 0680  
                   l4266 0658                     l4258 0630                     l3474 0A82  
                   l3466 0A5C                     l3458 0A3E                     l2756 1038  
                   l2940 0D04                     l2916 0CC0                     l4292 095E  
                   l4284 0936                     l4276 068A                     l4268 0662  
                   l3468 0A64                     l2942 0D10                     l2926 0CD8  
                   l4294 0968                     l4286 0940                     l4278 091C  
                   l3478 0A90                     l2768 0FF0                     l2872 0B98  
                   l2848 0B3C                     l4296 0972                     l4288 094A  
                   l2938 0CF6                     l4298 097C                     l2896 0C6A  
                   l2968 0D66                     u1240 09FE                     _Init 0F16  
        __end_of_FMready 101E                     _main 09D6                     _freq 0025  
                   dly@d 0027                     dly@i 0029                     _mute 106E  
                   fsr2h 000FDA                     indf2 000FDF                     fsr2l 000FD9  
        __end_of_FMwrite 0E32                     prodh 000FF4                     prodl 000FF3  
                   start 0002            __CFG_IESO$OFF 000000          __end_of_IdleI2C 10CE  
          __CFG_MCLRE$ON 000000             ___param_bank 000000          __end_of_ReadI2C 10A6  
        __end_of_OpenI2C 106E                    ??_dly 0029                    ?_Init 0027  
                  ?_main 0027                    ?_mute 0027                    _T0CON 000FD5  
                  _LCDPS 000F58                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTG 000F86                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISG 000F98            __CFG_PWRT$OFF 000000  
         __CFG_FCMEN$OFF 000000          __end_of_regDflt 0325                    _errfm 10DE  
            ?_FMfrequenc 0038           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  status 000FD8          __initialization 10A6             __end_of_Init 0F7A  
           __end_of_main 0AC0             __end_of_mute 108A                   ??_Init 0029  
                 ??_main 0047                   ??_mute 002E            __activetblptr 000002  
                 _ADCON1 000FC1                ??_FMready 0034                   ?_errfm 0027  
       __end_of_WriteI2C 0FD8                ??_FMwrite 0029                   _LCDCON 000F59  
                 _LCDSE0 000F5A                   _LCDSE1 000F5B                   _LCDSE2 000F5C  
                 _LCDSE3 000F5D              OpenI2C@slew 0027                ??_IdleI2C 0027  
                 _OSCCON 000FD3                   _FMinit 0C66                   _FMread 0B9C  
                 _SSPADD 000FC8                   _SSPBUF 000FC9                   _FMvers 10CE  
              ??_ReadI2C 0027                ??_OpenI2C 0028           __CFG_XINST$OFF 000000  
    __size_of_FMfrequenc 0072                   _regImg 0001                   clear_0 10AC  
       __end_of_scanNext 0EA4         __end_of_nextChan 0DB0                   main@ui 0048  
       setVolume@current 0036             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8              scanNext@STC 0033  
             __accesstop 0060             butnEvent@btn 002B  __end_of__initialization 10B2  
          ___rparam_used 000001           __pcstackCOMRAM 0027            __end_of_errfm 10E0  
        __CFG_OSC$INTIO7 000000                  ??_errfm 0027       __size_of_butnEvent 00DC  
                ?_FMinit 0027                  ?_FMread 0029                  ?_FMvers 0032  
              ?_WriteI2C 0027       __size_of_setVolume 06B0                FMinit@dat 0038  
                _FMready 0FD8                  _SSPCON1 000FC6                  _SSPCON2 000FC5  
           ??_FMfrequenc 003A                  _SSPSTAT 000FC7                  _FMwrite 0DB0  
                _IdleI2C 10BC                ?_scanNext 0027          __size_of_FMinit 00C2  
        __size_of_FMread 00CA                FMvers@vsn 0032                  _ReadI2C 108A  
        __size_of_FMvers 0010                ?_nextChan 0027                  _OpenI2C 1050  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0300  
        __CFG_STVREN$OFF 000000                  __pcinit 10A6               ??_WriteI2C 0028  
      __end_of_butnEvent 0B9C       __end_of_FMfrequenc 0F16                  __ramtop 0300  
                __ptext0 09D6                  __ptext1 0326                  __ptext2 0E32  
                __ptext3 0D28                  __ptext4 106E                  __ptext5 0EA4  
                __ptext6 10DE                  __ptext7 0AC0                  __ptext8 0F16  
                __ptext9 1050                _T0CONbits 000FD5                  _regDflt 0301  
           __size_of_dly 0032                  main@btn 004A                  main@evt 0047  
   end_of_initialization 10B2        setVolume@current1 0034        setVolume@current2 0032  
      __end_of_setVolume 09D6            __Lmediumconst 0000               ??_scanNext 0032  
             ??_nextChan 0042              FMfrequenc@f 0038                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                _PORTAbits 000F80  
              _PORTBbits 000F81                _TRISCbits 000F94           __end_of_FMinit 0D28  
         __end_of_FMread 0C66           __end_of_FMvers 10DE      start_initialization 10A6  
            __end_of_dly 1050         WriteI2C@data_out 0028                 ??_FMinit 0038  
               ??_FMread 002B                 ??_FMvers 0034               scanNext@up 0032  
      __size_of_WriteI2C 005E              __pbssCOMRAM 0001                 ?_FMready 0032  
               ?_FMwrite 0027               nextChan@up 0046                 ?_IdleI2C 0027  
               ?_ReadI2C 0027                 ?_OpenI2C 0027        __size_of_scanNext 0072  
      __size_of_nextChan 0088                 FMinit@ad 003A              __smallconst 0300  
              _butnEvent 0AC0          FMwrite@firstByt 002B                 _LCDDATA0 000F60  
        FMwrite@secndByt 002C           __size_of_errfm 0002           FMread@firstByt 0030  
              _setVolume 0326               FMread@data 0029                 _PIR1bits 000F9E  
         FMread@secndByt 0031               FMready@rdy 0032               FMready@sts 0036  
             ?_butnEvent 002B         __size_of_FMready 0046         __size_of_FMwrite 0082  
       OpenI2C@sync_mode 0028         __size_of_IdleI2C 0012         __size_of_ReadI2C 001C  
               __Hrparam 0000               ?_setVolume 002E         __size_of_OpenI2C 001E  
               __Lrparam 0000               FMwrite@adr 002D                 _WriteI2C 0F7A  
           setVolume@vol 002E                 __ptext10 10CE                 __ptext11 0C66  
               __ptext12 101E                 __ptext13 0DB0                 __ptext14 0FD8  
               __ptext15 0B9C                 __ptext16 0F7A                 __ptext17 10BC  
               __ptext18 108A            __size_of_Init 0064            __size_of_main 00EA  
          __size_of_mute 001C                 _scanNext 0E32                 _nextChan 0D28  
          FMread@regAddr 002F            FMfrequenc@dat 0040              ??_butnEvent 002D  
             _INTCONbits 000FF2              ??_setVolume 0030                 mute@mute 002E  
           FMfrequenc@cn 003E              _SSPCON1bits 000FC6              _SSPCON2bits 000FC5  
             _FMfrequenc 0EA4  
