

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Apr 30 15:51:27 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F6490
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    35  0000                     
    36                           ; Version 1.41
    37                           ; Generated 25/01/2017 GMT
    38                           ; 
    39                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F6490 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     
    71                           	psect	smallconst
    72  000300                     __psmallconst:
    73                           	opt stack 0
    74  000300  00                 	db	0
    75  000301                     _volPresets:
    76                           	opt stack 0
    77  000301  0F                 	db	15
    78  000302  00                 	db	0
    79  000303  0F                 	db	15
    80  000304  0C                 	db	12
    81  000305  0F                 	db	15
    82  000306  0D                 	db	13
    83  000307  0F                 	db	15
    84  000308  0F                 	db	15
    85  000309  0B                 	db	11
    86  00030A  0C                 	db	12
    87  00030B  0B                 	db	11
    88  00030C  0D                 	db	13
    89  00030D  0B                 	db	11
    90  00030E  0F                 	db	15
    91  00030F  0A                 	db	10
    92  000310  0F                 	db	15
    93  000311  09                 	db	9
    94  000312  0F                 	db	15
    95  000313  08                 	db	8
    96  000314  0F                 	db	15
    97  000315  07                 	db	7
    98  000316  0F                 	db	15
    99  000317  06                 	db	6
   100  000318  0D                 	db	13
   101  000319  06                 	db	6
   102  00031A  0E                 	db	14
   103  00031B  06                 	db	6
   104  00031C  0F                 	db	15
   105  00031D  03                 	db	3
   106  00031E  0E                 	db	14
   107  00031F  03                 	db	3
   108  000320  0F                 	db	15
   109  000321  02                 	db	2
   110  000322  0F                 	db	15
   111  000323  01                 	db	1
   112  000324  0F                 	db	15
   113  000325  00                 	db	0
   114  000326  0F                 	db	15
   115  000327                     __end_of_volPresets:
   116                           	opt stack 0
   117  000327                     _regDflt:
   118                           	opt stack 0
   119  000327  FFFF               	dw	65535
   120  000329  5B15               	dw	23317
   121  00032B  D0B9               	dw	53433
   122  00032D  A010               	dw	40976
   123  00032F  0780               	dw	1920
   124  000331  28AB               	dw	10411
   125  000333  6400               	dw	25600
   126  000335  1EE7               	dw	7911
   127  000337  7141               	dw	28993
   128  000339  007D               	dw	125
   129  00033B  82C6               	dw	33478
   130  00033D  4F55               	dw	20309
   131  00033F  970C               	dw	38668
   132  000341  B845               	dw	47173
   133  000343  FC2D               	dw	64557
   134  000345  8097               	dw	32919
   135  000347  04A1               	dw	1185
   136  000349  DF6A               	dw	57194
   137  00034B                     __end_of_regDflt:
   138                           	opt stack 0
   139  00034B                     _chanPresets:
   140                           	opt stack 0
   141  00034B  00                 	db	0
   142  00034C  B6                 	db	182
   143  00034D  42                 	db	66
   144  00034E  00                 	db	0
   145  00034F  C4                 	db	196
   146  000350  42                 	db	66
   147  000351  00                 	db	0
   148  000352  D0                 	db	208
   149  000353  42                 	db	66
   150  000354                     __end_of_chanPresets:
   151                           	opt stack 0
   152  0000                     _LCDPS	set	3928
   153  0000                     _LCDCON	set	3929
   154  0000                     _LCDSE3	set	3933
   155  0000                     _LCDSE2	set	3932
   156  0000                     _LCDSE1	set	3931
   157  0000                     _LCDSE0	set	3930
   158  0000                     _PIR1bits	set	3998
   159  0000                     _SSPCON1bits	set	4038
   160  0000                     _SSPBUF	set	4041
   161  0000                     _TRISCbits	set	3988
   162  0000                     _SSPCON1	set	4038
   163  0000                     _SSPSTAT	set	4039
   164  0000                     _SSPSTATbits	set	4039
   165  0000                     _SSPCON2	set	4037
   166  0000                     _SSPCON2bits	set	4037
   167  0000                     _SSPADD	set	4040
   168  0000                     _T0CONbits	set	4053
   169  0000                     _TMR0L	set	4054
   170  0000                     _TMR0H	set	4055
   171  0000                     _T0CON	set	4053
   172  0000                     _INTCONbits	set	4082
   173  0000                     _PORTG	set	3974
   174  0000                     _PORTB	set	3969
   175  0000                     _PORTA	set	3968
   176  0000                     _TRISG	set	3992
   177  0000                     _TRISC	set	3988
   178  0000                     _TRISB	set	3987
   179  0000                     _TRISA	set	3986
   180  0000                     _ADCON1	set	4033
   181  0000                     _OSCCON	set	4051
   182  0000                     _PORTE	set	3972
   183  0000                     _PORTC	set	3970
   184  0000                     _LCDDATA0	set	3936
   185                           
   186                           ; #config settings
   187  000354  00                 	db	0	; dummy byte at the end
   188  0000                     
   189                           	psect	cinit
   190  000EF6                     __pcinit:
   191                           	opt stack 0
   192  000EF6                     start_initialization:
   193                           	opt stack 0
   194  000EF6                     __initialization:
   195                           	opt stack 0
   196                           
   197                           ; Clear objects allocated to COMRAM (37 bytes)
   198  000EF6  EE00  F02F         	lfsr	0,__pbssCOMRAM
   199  000EFA  0E25               	movlw	37
   200  000EFC                     clear_0:
   201  000EFC  6AEE               	clrf	postinc0,c
   202  000EFE  06E8               	decf	wreg,f,c
   203  000F00  E1FD               	bnz	clear_0
   204  000F02                     end_of_initialization:
   205                           	opt stack 0
   206  000F02                     __end_of__initialization:
   207                           	opt stack 0
   208  000F02  0E00               	movlw	low (__Lmediumconst shr (0+16))
   209  000F04  6EF8               	movwf	tblptru,c
   210  000F06  0100               	movlb	0
   211  000F08  EF2B  F003         	goto	_main	;jump to C main() function
   212                           tblptru	equ	0xFF8
   213                           postinc0	equ	0xFEE
   214                           wreg	equ	0xFE8
   215                           
   216                           	psect	bssCOMRAM
   217  00002F                     __pbssCOMRAM:
   218                           	opt stack 0
   219  00002F                     _regImg:
   220                           	opt stack 0
   221  00002F                     	ds	36
   222  000053                     _vol:
   223                           	opt stack 0
   224  000053                     	ds	1
   225                           tblptru	equ	0xFF8
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	cstackCOMRAM
   230  000001                     __pcstackCOMRAM:
   231                           	opt stack 0
   232  000001                     ??_IdleI2C:
   233  000001                     ?___wmul:
   234                           	opt stack 0
   235  000001                     ?___ftpack:
   236                           	opt stack 0
   237  000001                     OpenI2C@slew:
   238                           	opt stack 0
   239  000001                     butnEvent@butn:
   240                           	opt stack 0
   241  000001                     dly@d:
   242                           	opt stack 0
   243  000001                     ___wmul@multiplier:
   244                           	opt stack 0
   245  000001                     ___ftpack@arg:
   246                           	opt stack 0
   247                           
   248                           ; 3 bytes @ 0x0
   249  000001                     	ds	1
   250  000002                     OpenI2C@sync_mode:
   251                           	opt stack 0
   252  000002                     WriteI2C@data_out:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x1
   256  000002                     	ds	1
   257  000003                     ??_FMwrite:
   258  000003                     butnEvent@butnStat:
   259                           	opt stack 0
   260  000003                     dly@i:
   261                           	opt stack 0
   262  000003                     FMread@data:
   263                           	opt stack 0
   264  000003                     ___wmul@multiplicand:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x2
   268  000003                     	ds	1
   269  000004                     ___ftpack@exp:
   270                           	opt stack 0
   271                           
   272                           ; 1 bytes @ 0x3
   273  000004                     	ds	1
   274  000005                     ??_FMread:
   275  000005                     FMwrite@firstByt:
   276                           	opt stack 0
   277  000005                     ___ftpack@sign:
   278                           	opt stack 0
   279  000005                     ___wmul@product:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x4
   283  000005                     	ds	1
   284  000006                     ??___ftpack:
   285  000006                     FMwrite@secndByt:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x5
   289  000006                     	ds	1
   290  000007                     ?___fttol:
   291                           	opt stack 0
   292  000007                     FMwrite@adr:
   293                           	opt stack 0
   294  000007                     ___fttol@f1:
   295                           	opt stack 0
   296                           
   297                           ; 3 bytes @ 0x6
   298  000007                     	ds	1
   299  000008                     changeVol@up:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x7
   303  000008                     	ds	1
   304  000009                     ?___lwtoft:
   305                           	opt stack 0
   306  000009                     FMread@regAddr:
   307                           	opt stack 0
   308  000009                     changeVol@newRegValue:
   309                           	opt stack 0
   310  000009                     ___lwtoft@c:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x8
   314  000009                     	ds	1
   315  00000A                     FMread@firstByt:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x9
   319  00000A                     	ds	1
   320  00000B                     ??___fttol:
   321  00000B                     FMread@secndByt:
   322                           	opt stack 0
   323                           
   324                           ; 1 bytes @ 0xA
   325  00000B                     	ds	1
   326  00000C                     FMready@rdy:
   327                           	opt stack 0
   328  00000C                     FMvers@vsn:
   329                           	opt stack 0
   330  00000C                     FMchan@chn:
   331                           	opt stack 0
   332  00000C                     ___ftge@ff1:
   333                           	opt stack 0
   334                           
   335                           ; 3 bytes @ 0xB
   336  00000C                     	ds	2
   337  00000E                     ??_FMready:
   338  00000E                     ??_FMchan:
   339                           
   340                           ; 1 bytes @ 0xD
   341  00000E                     	ds	1
   342  00000F                     ___ftge@ff2:
   343                           	opt stack 0
   344                           
   345                           ; 3 bytes @ 0xE
   346  00000F                     	ds	1
   347  000010                     ___fttol@sign1:
   348                           	opt stack 0
   349  000010                     FMready@sts:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0xF
   353  000010                     	ds	1
   354  000011                     ___fttol@lval:
   355                           	opt stack 0
   356                           
   357                           ; 4 bytes @ 0x10
   358  000011                     	ds	1
   359  000012                     ??___ftge:
   360  000012                     FMinit@dat:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x11
   364  000012                     	ds	2
   365  000014                     FMinit@ad:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x13
   369  000014                     	ds	1
   370  000015                     ___fttol@exp1:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x14
   374  000015                     	ds	1
   375  000016                     FMfrequenc@f:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x15
   379  000016                     	ds	2
   380  000018                     ??_FMfrequenc:
   381                           
   382                           ; 1 bytes @ 0x17
   383  000018                     	ds	4
   384  00001C                     FMfrequenc@cn:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x1B
   388  00001C                     	ds	2
   389  00001E                     FMfrequenc@dat:
   390                           	opt stack 0
   391                           
   392                           ; 2 bytes @ 0x1D
   393  00001E                     	ds	2
   394  000020                     nextChanPreset@up:
   395                           	opt stack 0
   396  000020                     nextChan@freq:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0x1F
   400  000020                     	ds	1
   401  000021                     nextChanPreset@frq:
   402                           	opt stack 0
   403                           
   404                           ; 2 bytes @ 0x20
   405  000021                     	ds	1
   406  000022                     ??_nextChan:
   407                           
   408                           ; 1 bytes @ 0x21
   409  000022                     	ds	1
   410  000023                     nextChanPreset@chn:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x22
   414  000023                     	ds	2
   415  000025                     nextChanPreset@i:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x24
   419  000025                     	ds	1
   420  000026                     nextChan@up:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x25
   424  000026                     	ds	1
   425  000027                     nextChan@chn:
   426                           	opt stack 0
   427                           
   428                           ; 2 bytes @ 0x26
   429  000027                     	ds	2
   430  000029                     main@evt:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x28
   434  000029                     	ds	1
   435  00002A                     main@freq:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x29
   439  00002A                     	ds	2
   440  00002C                     main@ui:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x2B
   444  00002C                     	ds	2
   445  00002E                     main@btn:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x2D
   449  00002E                     	ds	1
   450                           tblptru	equ	0xFF8
   451                           postinc0	equ	0xFEE
   452                           wreg	equ	0xFE8
   453                           
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 1250 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  ui              2   43[COMRAM] unsigned int 
   464 ;;  freq            2   41[COMRAM] unsigned int 
   465 ;;  btn             1   45[COMRAM] unsigned char 
   466 ;;  evt             1   40[COMRAM] unsigned char 
   467 ;; Return value:  Size  Location     Type
   468 ;;                  1    wreg      void 
   469 ;; Registers used:
   470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   471 ;; Tracked objects:
   472 ;;		On entry : 0/0
   473 ;;		On exit  : 0/0
   474 ;;		Unchanged: 0/0
   475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   476 ;;      Params:         0       0       0       0
   477 ;;      Locals:         6       0       0       0
   478 ;;      Temps:          0       0       0       0
   479 ;;      Totals:         6       0       0       0
   480 ;;Total ram usage:        6 bytes
   481 ;; Hardware stack levels required when called:    6
   482 ;; This function calls:
   483 ;;		_FMfrequenc
   484 ;;		_FMinit
   485 ;;		_FMvers
   486 ;;		_FMwrite
   487 ;;		_Init
   488 ;;		_butnEvent
   489 ;;		_changeVol
   490 ;;		_dly
   491 ;;		_errfm
   492 ;;		_nextChan
   493 ;;		_nextChanPreset
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           	psect	text0
   500  000656                     __ptext0:
   501                           	opt stack 0
   502  000656                     _main:
   503                           	opt stack 25
   504                           
   505                           ;main.c: 1252: unsigned char btn;
   506                           ;main.c: 1253: unsigned char evt;
   507                           ;main.c: 1254: unsigned int ui;
   508                           ;main.c: 1256: dly(20);
   509                           
   510                           ;incstack = 0
   511  000656  0E00               	movlw	0
   512  000658  6E02               	movwf	dly@d+1,c
   513  00065A  0E14               	movlw	20
   514  00065C  6E01               	movwf	dly@d,c
   515  00065E  EC20  F007         	call	_dly	;wreg free
   516                           
   517                           ;main.c: 1257: Init();
   518  000662  EC80  F006         	call	_Init	;wreg free
   519                           
   520                           ;main.c: 1258: FMvers(&ui);
   521  000666  0E2C               	movlw	low main@ui
   522  000668  6E0C               	movwf	FMvers@vsn,c
   523  00066A  0E00               	movlw	high main@ui
   524  00066C  6E0D               	movwf	FMvers@vsn+1,c
   525  00066E  EC8F  F007         	call	_FMvers	;wreg free
   526                           
   527                           ;main.c: 1259: if (ui != 0x1010) errfm();
   528  000672  0E10               	movlw	16
   529  000674  182C               	xorwf	main@ui,w,c
   530  000676  E103               	bnz	u2070
   531  000678  0E10               	movlw	16
   532  00067A  182D               	xorwf	main@ui+1,w,c
   533  00067C  A4D8               	btfss	status,2,c
   534  00067E                     u2070:
   535  00067E  EC97  F007         	call	_errfm	;wreg free
   536                           
   537                           ;main.c: 1260: if (FMinit() != 0) errfm();
   538  000682  EC89  F004         	call	_FMinit	;wreg free
   539  000686  0900               	iorlw	0
   540  000688  A4D8               	btfss	status,2,c
   541  00068A  EC97  F007         	call	_errfm	;wreg free
   542                           
   543                           ;main.c: 1261: unsigned int freq = 964;
   544  00068E  0E03               	movlw	3
   545  000690  6E2B               	movwf	main@freq+1,c
   546  000692  0EC4               	movlw	196
   547  000694  6E2A               	movwf	main@freq,c
   548                           
   549                           ;main.c: 1262: FMfrequenc(freq);
   550  000696  C02A  F016         	movff	main@freq,FMfrequenc@f
   551  00069A  C02B  F017         	movff	main@freq+1,FMfrequenc@f+1
   552  00069E  EC47  F006         	call	_FMfrequenc	;wreg free
   553                           
   554                           ;main.c: 1263: regImg[3] |= 0x0480;
   555  0006A2  0E80               	movlw	128
   556  0006A4  1235               	iorwf	_regImg+6,f,c
   557  0006A6  0E04               	movlw	4
   558  0006A8  1236               	iorwf	_regImg+7,f,c
   559                           
   560                           ;main.c: 1264: FMwrite(3);
   561  0006AA  0E03               	movlw	3
   562  0006AC  ECCC  F005         	call	_FMwrite
   563                           
   564                           ;main.c: 1265: regImg[14] |= 0xF000;
   565  0006B0  0E00               	movlw	0
   566  0006B2  124B               	iorwf	_regImg+28,f,c
   567  0006B4  0EF0               	movlw	240
   568  0006B6  124C               	iorwf	_regImg+29,f,c
   569                           
   570                           ;main.c: 1266: FMwrite(14);
   571  0006B8  0E0E               	movlw	14
   572  0006BA  ECCC  F005         	call	_FMwrite
   573  0006BE                     l2917:
   574                           
   575                           ;main.c: 1270: evt = butnEvent(&btn);
   576  0006BE  0E2E               	movlw	low main@btn
   577  0006C0  6E01               	movwf	butnEvent@butn,c
   578  0006C2  0E00               	movlw	high main@btn
   579  0006C4  6E02               	movwf	butnEvent@butn+1,c
   580  0006C6  EC72  F002         	call	_butnEvent	;wreg free
   581  0006CA  6E29               	movwf	main@evt,c
   582                           
   583                           ;main.c: 1271: dly(20);
   584  0006CC  0E00               	movlw	0
   585  0006CE  6E02               	movwf	dly@d+1,c
   586  0006D0  0E14               	movlw	20
   587  0006D2  6E01               	movwf	dly@d,c
   588  0006D4  EC20  F007         	call	_dly	;wreg free
   589                           
   590                           ;main.c: 1272: if (evt == 1)
   591  0006D8  0429               	decf	main@evt,w,c
   592  0006DA  B4D8               	btfsc	status,2,c
   593  0006DC  D024               	goto	l2941
   594  0006DE  D7EF               	goto	l2917
   595  0006E0                     l2925:
   596  0006E0  0E01               	movlw	1
   597  0006E2  ECAB  F001         	call	_nextChanPreset
   598  0006E6  D7EB               	goto	l2917
   599  0006E8                     l2927:
   600  0006E8  0E00               	movlw	0
   601  0006EA  ECAB  F001         	call	_nextChanPreset
   602  0006EE  D7E7               	goto	l2917
   603  0006F0                     l2929:
   604  0006F0  C02A  F020         	movff	main@freq,nextChan@freq
   605  0006F4  C02B  F021         	movff	main@freq+1,nextChan@freq+1
   606  0006F8  0E01               	movlw	1
   607  0006FA  EC0D  F006         	call	_nextChan
   608  0006FE  D7DF               	goto	l2917
   609  000700                     l2931:
   610  000700  C02A  F020         	movff	main@freq,nextChan@freq
   611  000704  C02B  F021         	movff	main@freq+1,nextChan@freq+1
   612  000708  0E00               	movlw	0
   613  00070A  EC0D  F006         	call	_nextChan
   614  00070E  D7D7               	goto	l2917
   615  000710                     l2933:
   616  000710  0E01               	movlw	1
   617  000712  EC89  F005         	call	_changeVol
   618  000716  D7D3               	goto	l2917
   619  000718                     l2935:
   620  000718  0E00               	movlw	0
   621  00071A  EC89  F005         	call	_changeVol
   622  00071E  D7CF               	goto	l2917
   623  000720                     l2937:
   624  000720  EC97  F007         	call	_errfm	;wreg free
   625                           
   626                           ;main.c: 1285: }
   627                           
   628                           ;main.c: 1284: default : break;
   629  000724  D7CC               	goto	l2917
   630  000726                     l2941:
   631  000726  502E               	movf	main@btn,w,c
   632                           
   633                           ; Switch size 1, requested type "space"
   634                           ; Number of cases is 7, Range of values is 1 to 128
   635                           ; switch strategies available:
   636                           ; Name         Instructions Cycles
   637                           ; simple_byte           22    12 (average)
   638                           ;	Chosen strategy is simple_byte
   639  000728  0A01               	xorlw	1	; case 1
   640  00072A  B4D8               	btfsc	status,2,c
   641  00072C  D7D9               	goto	l2925
   642  00072E  0A03               	xorlw	3	; case 2
   643  000730  B4D8               	btfsc	status,2,c
   644  000732  D7DA               	goto	l2927
   645  000734  0A06               	xorlw	6	; case 4
   646  000736  B4D8               	btfsc	status,2,c
   647  000738  D7DB               	goto	l2929
   648  00073A  0A0C               	xorlw	12	; case 8
   649  00073C  B4D8               	btfsc	status,2,c
   650  00073E  D7E0               	goto	l2931
   651  000740  0A18               	xorlw	24	; case 16
   652  000742  B4D8               	btfsc	status,2,c
   653  000744  D7E5               	goto	l2933
   654  000746  0A30               	xorlw	48	; case 32
   655  000748  B4D8               	btfsc	status,2,c
   656  00074A  D7E6               	goto	l2935
   657  00074C  0AA0               	xorlw	160	; case 128
   658  00074E  B4D8               	btfsc	status,2,c
   659  000750  D7E7               	goto	l2937
   660                           
   661                           ;main.c: 1286: }
   662  000752  D7B5               	goto	l2917
   663  000754                     __end_of_main:
   664                           	opt stack 0
   665                           tblptru	equ	0xFF8
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           status	equ	0xFD8
   669                           
   670 ;; *************** function _nextChanPreset *****************
   671 ;; Defined at:
   672 ;;		line 709 in file "main.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;  up              1    wreg     unsigned char 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  up              1   31[COMRAM] unsigned char 
   677 ;;  i               2   36[COMRAM] unsigned int 
   678 ;;  chn             2   34[COMRAM] unsigned int 
   679 ;;  frq             2   32[COMRAM] unsigned int 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      unsigned char 
   682 ;; Registers used:
   683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   689 ;;      Params:         0       0       0       0
   690 ;;      Locals:         7       0       0       0
   691 ;;      Temps:          0       0       0       0
   692 ;;      Totals:         7       0       0       0
   693 ;;Total ram usage:        7 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    5
   696 ;; This function calls:
   697 ;;		_FMchan
   698 ;;		_FMfrequenc
   699 ;;		___ftge
   700 ;;		___fttol
   701 ;;		___lwtoft
   702 ;;		___wmul
   703 ;; This function is called by:
   704 ;;		_main
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text1
   709  000356                     __ptext1:
   710                           	opt stack 0
   711  000356                     _nextChanPreset:
   712                           	opt stack 25
   713                           
   714                           ;incstack = 0
   715                           ;nextChanPreset@up stored from wreg
   716  000356  6E20               	movwf	nextChanPreset@up,c
   717                           
   718                           ;main.c: 710: unsigned int i;
   719                           ;main.c: 711: unsigned int chn;
   720                           ;main.c: 712: unsigned int frq;
   721                           ;main.c: 714: if (FMchan(&chn) == 1) return 1;
   722  000358  0E23               	movlw	low nextChanPreset@chn
   723  00035A  6E0C               	movwf	FMchan@chn,c
   724  00035C  0E00               	movlw	high nextChanPreset@chn
   725  00035E  6E0D               	movwf	FMchan@chn+1,c
   726  000360  EC04  F007         	call	_FMchan	;wreg free
   727  000364  06E8               	decf	wreg,f,c
   728  000366  B4D8               	btfsc	status,2,c
   729  000368  0012               	return	
   730                           
   731                           ;main.c: 715: frq = 690 + chn;
   732                           
   733                           ;	Return value of _nextChanPreset is never used
   734  00036A  0EB2               	movlw	178
   735  00036C  2423               	addwf	nextChanPreset@chn,w,c
   736  00036E  6E21               	movwf	nextChanPreset@frq,c
   737  000370  0E02               	movlw	2
   738  000372  2024               	addwfc	nextChanPreset@chn+1,w,c
   739  000374  6E22               	movwf	nextChanPreset@frq+1,c
   740                           
   741                           ;main.c: 717: if(up){
   742  000376  5020               	movf	nextChanPreset@up,w,c
   743  000378  B4D8               	btfsc	status,2,c
   744  00037A  D05C               	goto	l2801
   745                           
   746                           ;main.c: 718: for(i = 0; i < 3; i++){
   747  00037C  0E00               	movlw	0
   748  00037E  6E26               	movwf	nextChanPreset@i+1,c
   749  000380  0E00               	movlw	0
   750  000382  6E25               	movwf	nextChanPreset@i,c
   751  000384  5026               	movf	nextChanPreset@i+1,w,c
   752  000386  E105               	bnz	u1930
   753  000388  0E03               	movlw	3
   754  00038A  5C25               	subwf	nextChanPreset@i,w,c
   755  00038C  B0D8               	btfsc	status,0,c
   756  00038E  0012               	return	
   757  000390  D001               	goto	l2791
   758  000392                     u1930:
   759  000392  0012               	return	
   760  000394                     l2791:
   761                           
   762                           ;main.c: 719: if (chanPresets[i] > frq){
   763  000394  C021  F009         	movff	nextChanPreset@frq,___lwtoft@c
   764  000398  C022  F00A         	movff	nextChanPreset@frq+1,___lwtoft@c+1
   765  00039C  EC4C  F007         	call	___lwtoft	;wreg free
   766  0003A0  C009  F00C         	movff	?___lwtoft,___ftge@ff1
   767  0003A4  C00A  F00D         	movff	?___lwtoft+1,___ftge@ff1+1
   768  0003A8  C00B  F00E         	movff	?___lwtoft+2,___ftge@ff1+2
   769  0003AC  0E00               	movlw	0
   770  0003AE  6E04               	movwf	___wmul@multiplicand+1,c
   771  0003B0  0E03               	movlw	3
   772  0003B2  6E03               	movwf	___wmul@multiplicand,c
   773  0003B4  C025  F001         	movff	nextChanPreset@i,___wmul@multiplier
   774  0003B8  C026  F002         	movff	nextChanPreset@i+1,___wmul@multiplier+1
   775  0003BC  EC39  F007         	call	___wmul	;wreg free
   776  0003C0  0E4B               	movlw	low _chanPresets
   777  0003C2  2401               	addwf	?___wmul,w,c
   778  0003C4  6EF6               	movwf	tblptrl,c
   779  0003C6  0E03               	movlw	high _chanPresets
   780  0003C8  2002               	addwfc	?___wmul+1,w,c
   781  0003CA  6EF7               	movwf	tblptrh,c
   782  0003CC                     	if	0	;There are less than 3 active tblptr bytes
   783  0003CC                     	endif
   784  0003CC  0009               	tblrd		*+
   785  0003CE  CFF5 F00F          	movff	tablat,___ftge@ff2
   786  0003D2  0009               	tblrd		*+
   787  0003D4  CFF5 F010          	movff	tablat,___ftge@ff2+1
   788  0003D8  000A               	tblrd		*-
   789  0003DA  CFF5 F011          	movff	tablat,___ftge@ff2+2
   790  0003DE  EC41  F005         	call	___ftge	;wreg free
   791  0003E2  B0D8               	btfsc	status,0,c
   792  0003E4  D022               	goto	l2797
   793                           
   794                           ;main.c: 720: FMfrequenc(chanPresets[i]);
   795  0003E6  C025  F001         	movff	nextChanPreset@i,___wmul@multiplier
   796  0003EA  C026  F002         	movff	nextChanPreset@i+1,___wmul@multiplier+1
   797  0003EE  0E00               	movlw	0
   798  0003F0  6E04               	movwf	___wmul@multiplicand+1,c
   799  0003F2  0E03               	movlw	3
   800  0003F4  6E03               	movwf	___wmul@multiplicand,c
   801  0003F6  EC39  F007         	call	___wmul	;wreg free
   802  0003FA  0E4B               	movlw	low _chanPresets
   803  0003FC  2401               	addwf	?___wmul,w,c
   804  0003FE  6EF6               	movwf	tblptrl,c
   805  000400  0E03               	movlw	high _chanPresets
   806  000402  2002               	addwfc	?___wmul+1,w,c
   807  000404  6EF7               	movwf	tblptrh,c
   808  000406                     	if	0	;There are less than 3 active tblptr bytes
   809  000406                     	endif
   810  000406  0009               	tblrd		*+
   811  000408  CFF5 F007          	movff	tablat,___fttol@f1
   812  00040C  0009               	tblrd		*+
   813  00040E  CFF5 F008          	movff	tablat,___fttol@f1+1
   814  000412  000A               	tblrd		*-
   815  000414  CFF5 F009          	movff	tablat,___fttol@f1+2
   816  000418  ECAA  F003         	call	___fttol	;wreg free
   817  00041C  C007  F016         	movff	?___fttol,FMfrequenc@f
   818  000420  C008  F017         	movff	?___fttol+1,FMfrequenc@f+1
   819  000424  EC47  F006         	call	_FMfrequenc	;wreg free
   820                           
   821                           ;main.c: 721: return 0;
   822                           ;	Return value of _nextChanPreset is never used
   823  000428  0012               	return	
   824  00042A                     l2797:
   825  00042A  4A25               	infsnz	nextChanPreset@i,f,c
   826  00042C  2A26               	incf	nextChanPreset@i+1,f,c
   827  00042E  5026               	movf	nextChanPreset@i+1,w,c
   828  000430  E158               	bnz	l216
   829  000432  D7AA               	goto	L1
   830  000434                     l2801:
   831                           
   832                           ;main.c: 725: else{
   833                           ;main.c: 726: for (i = 3; i > 0; i--){
   834  000434  0E00               	movlw	0
   835  000436  6E26               	movwf	nextChanPreset@i+1,c
   836  000438  0E03               	movlw	3
   837  00043A  6E25               	movwf	nextChanPreset@i,c
   838  00043C                     l2803:
   839  00043C  5025               	movf	nextChanPreset@i,w,c
   840  00043E  1026               	iorwf	nextChanPreset@i+1,w,c
   841  000440  B4D8               	btfsc	status,2,c
   842  000442  0012               	return	
   843                           
   844                           ;main.c: 727: if (chanPresets[i] < frq){
   845  000444  C025  F001         	movff	nextChanPreset@i,___wmul@multiplier
   846  000448  C026  F002         	movff	nextChanPreset@i+1,___wmul@multiplier+1
   847  00044C  0E00               	movlw	0
   848  00044E  6E04               	movwf	___wmul@multiplicand+1,c
   849  000450  0E03               	movlw	3
   850  000452  6E03               	movwf	___wmul@multiplicand,c
   851  000454  EC39  F007         	call	___wmul	;wreg free
   852  000458  0E4B               	movlw	low _chanPresets
   853  00045A  2401               	addwf	?___wmul,w,c
   854  00045C  6EF6               	movwf	tblptrl,c
   855  00045E  0E03               	movlw	high _chanPresets
   856  000460  2002               	addwfc	?___wmul+1,w,c
   857  000462  6EF7               	movwf	tblptrh,c
   858  000464                     	if	0	;There are less than 3 active tblptr bytes
   859  000464                     	endif
   860  000464  0009               	tblrd		*+
   861  000466  CFF5 F00C          	movff	tablat,___ftge@ff1
   862  00046A  0009               	tblrd		*+
   863  00046C  CFF5 F00D          	movff	tablat,___ftge@ff1+1
   864  000470  000A               	tblrd		*-
   865  000472  CFF5 F00E          	movff	tablat,___ftge@ff1+2
   866  000476  C021  F009         	movff	nextChanPreset@frq,___lwtoft@c
   867  00047A  C022  F00A         	movff	nextChanPreset@frq+1,___lwtoft@c+1
   868  00047E  EC4C  F007         	call	___lwtoft	;wreg free
   869  000482  C009  F00F         	movff	?___lwtoft,___ftge@ff2
   870  000486  C00A  F010         	movff	?___lwtoft+1,___ftge@ff2+1
   871  00048A  C00B  F011         	movff	?___lwtoft+2,___ftge@ff2+2
   872  00048E  EC41  F005         	call	___ftge	;wreg free
   873  000492  B0D8               	btfsc	status,0,c
   874  000494  D022               	goto	l2813
   875                           
   876                           ;main.c: 728: FMfrequenc(chanPresets[i]);
   877  000496  C025  F001         	movff	nextChanPreset@i,___wmul@multiplier
   878  00049A  C026  F002         	movff	nextChanPreset@i+1,___wmul@multiplier+1
   879  00049E  0E00               	movlw	0
   880  0004A0  6E04               	movwf	___wmul@multiplicand+1,c
   881  0004A2  0E03               	movlw	3
   882  0004A4  6E03               	movwf	___wmul@multiplicand,c
   883  0004A6  EC39  F007         	call	___wmul	;wreg free
   884  0004AA  0E4B               	movlw	low _chanPresets
   885  0004AC  2401               	addwf	?___wmul,w,c
   886  0004AE  6EF6               	movwf	tblptrl,c
   887  0004B0  0E03               	movlw	high _chanPresets
   888  0004B2  2002               	addwfc	?___wmul+1,w,c
   889  0004B4  6EF7               	movwf	tblptrh,c
   890  0004B6                     	if	0	;There are less than 3 active tblptr bytes
   891  0004B6                     	endif
   892  0004B6  0009               	tblrd		*+
   893  0004B8  CFF5 F007          	movff	tablat,___fttol@f1
   894  0004BC  0009               	tblrd		*+
   895  0004BE  CFF5 F008          	movff	tablat,___fttol@f1+1
   896  0004C2  000A               	tblrd		*-
   897  0004C4  CFF5 F009          	movff	tablat,___fttol@f1+2
   898  0004C8  ECAA  F003         	call	___fttol	;wreg free
   899  0004CC  C007  F016         	movff	?___fttol,FMfrequenc@f
   900  0004D0  C008  F017         	movff	?___fttol+1,FMfrequenc@f+1
   901  0004D4  EC47  F006         	call	_FMfrequenc	;wreg free
   902                           
   903                           ;main.c: 729: return 0;
   904                           ;	Return value of _nextChanPreset is never used
   905  0004D8  0012               	return	
   906  0004DA                     l2813:
   907  0004DA  0625               	decf	nextChanPreset@i,f,c
   908  0004DC  A0D8               	btfss	status,0,c
   909  0004DE  0626               	decf	nextChanPreset@i+1,f,c
   910  0004E0  D7AD               	goto	l2803
   911  0004E2                     l216:
   912  0004E2  0012               	return		;funcret
   913  0004E4                     __end_of_nextChanPreset:
   914                           	opt stack 0
   915                           tblptru	equ	0xFF8
   916                           tblptrh	equ	0xFF7
   917                           tblptrl	equ	0xFF6
   918                           tablat	equ	0xFF5
   919                           postinc0	equ	0xFEE
   920                           wreg	equ	0xFE8
   921                           status	equ	0xFD8
   922                           
   923 ;; *************** function ___wmul *****************
   924 ;; Defined at:
   925 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  multiplier      2    0[COMRAM] unsigned int 
   928 ;;  multiplicand    2    2[COMRAM] unsigned int 
   929 ;; Auto vars:     Size  Location     Type
   930 ;;  product         2    4[COMRAM] unsigned int 
   931 ;; Return value:  Size  Location     Type
   932 ;;                  2    0[COMRAM] unsigned int 
   933 ;; Registers used:
   934 ;;		wreg, status,2, status,0, prodl, prodh
   935 ;; Tracked objects:
   936 ;;		On entry : 0/0
   937 ;;		On exit  : 0/0
   938 ;;		Unchanged: 0/0
   939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   940 ;;      Params:         4       0       0       0
   941 ;;      Locals:         2       0       0       0
   942 ;;      Temps:          0       0       0       0
   943 ;;      Totals:         6       0       0       0
   944 ;;Total ram usage:        6 bytes
   945 ;; Hardware stack levels used:    1
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_nextChanPreset
   950 ;;		_showFreq
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text2
   955  000E72                     __ptext2:
   956                           	opt stack 0
   957  000E72                     ___wmul:
   958                           	opt stack 29
   959                           
   960                           ;incstack = 0
   961  000E72  5001               	movf	___wmul@multiplier,w,c
   962  000E74  0203               	mulwf	___wmul@multiplicand,c
   963  000E76  CFF3 F005          	movff	prodl,___wmul@product
   964  000E7A  CFF4 F006          	movff	prodh,___wmul@product+1
   965  000E7E  5001               	movf	___wmul@multiplier,w,c
   966  000E80  0204               	mulwf	___wmul@multiplicand+1,c
   967  000E82  50F3               	movf	prodl,w,c
   968  000E84  2606               	addwf	___wmul@product+1,f,c
   969  000E86  5002               	movf	___wmul@multiplier+1,w,c
   970  000E88  0203               	mulwf	___wmul@multiplicand,c
   971  000E8A  50F3               	movf	prodl,w,c
   972  000E8C  2606               	addwf	___wmul@product+1,f,c
   973  000E8E  C005  F001         	movff	___wmul@product,?___wmul
   974  000E92  C006  F002         	movff	___wmul@product+1,?___wmul+1
   975  000E96  0012               	return	
   976  000E98                     __end_of___wmul:
   977                           	opt stack 0
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           prodh	equ	0xFF4
   983                           prodl	equ	0xFF3
   984                           postinc0	equ	0xFEE
   985                           wreg	equ	0xFE8
   986                           status	equ	0xFD8
   987                           
   988 ;; *************** function ___lwtoft *****************
   989 ;; Defined at:
   990 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  c               2    8[COMRAM] unsigned int 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;		None
   995 ;; Return value:  Size  Location     Type
   996 ;;                  3    8[COMRAM] float 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1004 ;;      Params:         3       0       0       0
  1005 ;;      Locals:         0       0       0       0
  1006 ;;      Temps:          0       0       0       0
  1007 ;;      Totals:         3       0       0       0
  1008 ;;Total ram usage:        3 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    1
  1011 ;; This function calls:
  1012 ;;		___ftpack
  1013 ;; This function is called by:
  1014 ;;		_nextChanPreset
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text3
  1019  000E98                     __ptext3:
  1020                           	opt stack 0
  1021  000E98                     ___lwtoft:
  1022                           	opt stack 28
  1023                           
  1024                           ;incstack = 0
  1025  000E98  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  1026  000E9C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  1027  000EA0  6A03               	clrf	___ftpack@arg+2,c
  1028  000EA2  0E8E               	movlw	142
  1029  000EA4  6E04               	movwf	___ftpack@exp,c
  1030  000EA6  0E00               	movlw	0
  1031  000EA8  6E05               	movwf	___ftpack@sign,c
  1032  000EAA  ECEA  F004         	call	___ftpack	;wreg free
  1033  000EAE  C001  F009         	movff	?___ftpack,?___lwtoft
  1034  000EB2  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  1035  000EB6  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  1036  000EBA  0012               	return	
  1037  000EBC                     __end_of___lwtoft:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           prodh	equ	0xFF4
  1044                           prodl	equ	0xFF3
  1045                           postinc0	equ	0xFEE
  1046                           wreg	equ	0xFE8
  1047                           status	equ	0xFD8
  1048                           
  1049 ;; *************** function ___ftpack *****************
  1050 ;; Defined at:
  1051 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  arg             3    0[COMRAM] unsigned um
  1054 ;;  exp             1    3[COMRAM] unsigned char 
  1055 ;;  sign            1    4[COMRAM] unsigned char 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;		None
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  3    0[COMRAM] float 
  1060 ;; Registers used:
  1061 ;;		wreg, status,2, status,0
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1067 ;;      Params:         5       0       0       0
  1068 ;;      Locals:         0       0       0       0
  1069 ;;      Temps:          3       0       0       0
  1070 ;;      Totals:         8       0       0       0
  1071 ;;Total ram usage:        8 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; This function calls:
  1074 ;;		Nothing
  1075 ;; This function is called by:
  1076 ;;		___lwtoft
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text4
  1081  0009D4                     __ptext4:
  1082                           	opt stack 0
  1083  0009D4                     ___ftpack:
  1084                           	opt stack 28
  1085                           
  1086                           ;incstack = 0
  1087  0009D4  5004               	movf	___ftpack@exp,w,c
  1088  0009D6  B4D8               	btfsc	status,2,c
  1089  0009D8  D005               	goto	l2367
  1090  0009DA  5001               	movf	___ftpack@arg,w,c
  1091  0009DC  1002               	iorwf	___ftpack@arg+1,w,c
  1092  0009DE  1003               	iorwf	___ftpack@arg+2,w,c
  1093  0009E0  A4D8               	btfss	status,2,c
  1094  0009E2  D00C               	goto	l2373
  1095  0009E4                     l2367:
  1096  0009E4  0E00               	movlw	0
  1097  0009E6  6E01               	movwf	?___ftpack,c
  1098  0009E8  0E00               	movlw	0
  1099  0009EA  6E02               	movwf	?___ftpack+1,c
  1100  0009EC  0E00               	movlw	0
  1101  0009EE  6E03               	movwf	?___ftpack+2,c
  1102  0009F0  0012               	return	
  1103  0009F2                     l2371:
  1104  0009F2  2A04               	incf	___ftpack@exp,f,c
  1105  0009F4  90D8               	bcf	status,0,c
  1106  0009F6  3203               	rrcf	___ftpack@arg+2,f,c
  1107  0009F8  3202               	rrcf	___ftpack@arg+1,f,c
  1108  0009FA  3201               	rrcf	___ftpack@arg,f,c
  1109  0009FC                     l2373:
  1110  0009FC  0E00               	movlw	0
  1111  0009FE  1401               	andwf	___ftpack@arg,w,c
  1112  000A00  6E06               	movwf	??___ftpack& (0+255),c
  1113  000A02  0E00               	movlw	0
  1114  000A04  1402               	andwf	___ftpack@arg+1,w,c
  1115  000A06  6E07               	movwf	(??___ftpack+1)& (0+255),c
  1116  000A08  0EFE               	movlw	254
  1117  000A0A  1403               	andwf	___ftpack@arg+2,w,c
  1118  000A0C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  1119  000A0E  5006               	movf	??___ftpack,w,c
  1120  000A10  1007               	iorwf	??___ftpack+1,w,c
  1121  000A12  1008               	iorwf	??___ftpack+2,w,c
  1122  000A14  B4D8               	btfsc	status,2,c
  1123  000A16  D00C               	goto	l2379
  1124  000A18  D7EC               	goto	l2371
  1125  000A1A                     l2375:
  1126  000A1A  2A04               	incf	___ftpack@exp,f,c
  1127  000A1C  0E01               	movlw	1
  1128  000A1E  2601               	addwf	___ftpack@arg,f,c
  1129  000A20  0E00               	movlw	0
  1130  000A22  2202               	addwfc	___ftpack@arg+1,f,c
  1131  000A24  0E00               	movlw	0
  1132  000A26  2203               	addwfc	___ftpack@arg+2,f,c
  1133  000A28  90D8               	bcf	status,0,c
  1134  000A2A  3203               	rrcf	___ftpack@arg+2,f,c
  1135  000A2C  3202               	rrcf	___ftpack@arg+1,f,c
  1136  000A2E  3201               	rrcf	___ftpack@arg,f,c
  1137  000A30                     l2379:
  1138  000A30  0E00               	movlw	0
  1139  000A32  1401               	andwf	___ftpack@arg,w,c
  1140  000A34  6E06               	movwf	??___ftpack& (0+255),c
  1141  000A36  0E00               	movlw	0
  1142  000A38  1402               	andwf	___ftpack@arg+1,w,c
  1143  000A3A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  1144  000A3C  0EFF               	movlw	255
  1145  000A3E  1403               	andwf	___ftpack@arg+2,w,c
  1146  000A40  6E08               	movwf	(??___ftpack+2)& (0+255),c
  1147  000A42  5006               	movf	??___ftpack,w,c
  1148  000A44  1007               	iorwf	??___ftpack+1,w,c
  1149  000A46  1008               	iorwf	??___ftpack+2,w,c
  1150  000A48  B4D8               	btfsc	status,2,c
  1151  000A4A  D006               	goto	l2383
  1152  000A4C  D7E6               	goto	l2375
  1153  000A4E                     l2381:
  1154  000A4E  0604               	decf	___ftpack@exp,f,c
  1155  000A50  90D8               	bcf	status,0,c
  1156  000A52  3601               	rlcf	___ftpack@arg,f,c
  1157  000A54  3602               	rlcf	___ftpack@arg+1,f,c
  1158  000A56  3603               	rlcf	___ftpack@arg+2,f,c
  1159  000A58                     l2383:
  1160  000A58  BE02               	btfsc	___ftpack@arg+1,7,c
  1161  000A5A  D003               	goto	l638
  1162  000A5C  0E02               	movlw	2
  1163  000A5E  6004               	cpfslt	___ftpack@exp,c
  1164  000A60  D7F6               	goto	l2381
  1165  000A62                     l638:
  1166  000A62  A004               	btfss	___ftpack@exp,0,c
  1167  000A64  9E02               	bcf	___ftpack@arg+1,7,c
  1168  000A66  90D8               	bcf	status,0,c
  1169  000A68  3204               	rrcf	___ftpack@exp,f,c
  1170  000A6A  5004               	movf	___ftpack@exp,w,c
  1171  000A6C  1203               	iorwf	___ftpack@arg+2,f,c
  1172  000A6E  5005               	movf	___ftpack@sign,w,c
  1173  000A70  A4D8               	btfss	status,2,c
  1174  000A72  8E03               	bsf	___ftpack@arg+2,7,c
  1175  000A74  C001  F001         	movff	___ftpack@arg,?___ftpack
  1176  000A78  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  1177  000A7C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  1178  000A80  0012               	return	
  1179  000A82                     __end_of___ftpack:
  1180                           	opt stack 0
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           prodh	equ	0xFF4
  1186                           prodl	equ	0xFF3
  1187                           postinc0	equ	0xFEE
  1188                           wreg	equ	0xFE8
  1189                           status	equ	0xFD8
  1190                           
  1191 ;; *************** function ___fttol *****************
  1192 ;; Defined at:
  1193 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;  f1              3    6[COMRAM] float 
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;  lval            4   16[COMRAM] unsigned long 
  1198 ;;  exp1            1   20[COMRAM] unsigned char 
  1199 ;;  sign1           1   15[COMRAM] unsigned char 
  1200 ;; Return value:  Size  Location     Type
  1201 ;;                  4    6[COMRAM] long 
  1202 ;; Registers used:
  1203 ;;		wreg, status,2, status,0
  1204 ;; Tracked objects:
  1205 ;;		On entry : 0/0
  1206 ;;		On exit  : 0/0
  1207 ;;		Unchanged: 0/0
  1208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1209 ;;      Params:         4       0       0       0
  1210 ;;      Locals:         6       0       0       0
  1211 ;;      Temps:          5       0       0       0
  1212 ;;      Totals:        15       0       0       0
  1213 ;;Total ram usage:       15 bytes
  1214 ;; Hardware stack levels used:    1
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_nextChanPreset
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text5
  1223  000754                     __ptext5:
  1224                           	opt stack 0
  1225  000754                     ___fttol:
  1226                           	opt stack 29
  1227                           
  1228                           ;incstack = 0
  1229  000754  C009  F00B         	movff	___fttol@f1+2,??___fttol
  1230  000758  6A0C               	clrf	(??___fttol+1)& (0+255),c
  1231  00075A  6A0D               	clrf	(??___fttol+2)& (0+255),c
  1232  00075C  3408               	rlcf	___fttol@f1+1,w,c
  1233  00075E  360B               	rlcf	??___fttol& (0+255),f,c
  1234  000760  E301               	bnc	u1561
  1235  000762  800C               	bsf	(??___fttol+1)& (0+255),0,c
  1236  000764                     u1561:
  1237  000764  500B               	movf	??___fttol,w,c
  1238  000766  6E15               	movwf	___fttol@exp1,c
  1239  000768  5015               	movf	___fttol@exp1,w,c
  1240  00076A  A4D8               	btfss	status,2,c
  1241  00076C  D009               	goto	l2475
  1242  00076E  0E00               	movlw	0
  1243  000770  6E07               	movwf	?___fttol,c
  1244  000772  0E00               	movlw	0
  1245  000774  6E08               	movwf	?___fttol+1,c
  1246  000776  0E00               	movlw	0
  1247  000778  6E09               	movwf	?___fttol+2,c
  1248  00077A  0E00               	movlw	0
  1249  00077C  6E0A               	movwf	?___fttol+3,c
  1250  00077E  0012               	return	
  1251  000780                     l2475:
  1252  000780  0E17               	movlw	23
  1253  000782  6E0B               	movwf	??___fttol& (0+255),c
  1254  000784  C007  F00C         	movff	___fttol@f1,??___fttol+1
  1255  000788  C008  F00D         	movff	___fttol@f1+1,??___fttol+2
  1256  00078C  C009  F00E         	movff	___fttol@f1+2,??___fttol+3
  1257  000790  280B               	incf	??___fttol,w,c
  1258  000792  6E0F               	movwf	(??___fttol+4)& (0+255),c
  1259  000794  D004               	goto	u1580
  1260  000796                     u1585:
  1261  000796  90D8               	bcf	status,0,c
  1262  000798  320E               	rrcf	??___fttol+3,f,c
  1263  00079A  320D               	rrcf	??___fttol+2,f,c
  1264  00079C  320C               	rrcf	??___fttol+1,f,c
  1265  00079E                     u1580:
  1266  00079E  2E0F               	decfsz	(??___fttol+4)& (0+255),f,c
  1267  0007A0  D7FA               	goto	u1585
  1268  0007A2  500C               	movf	??___fttol+1,w,c
  1269  0007A4  6E10               	movwf	___fttol@sign1,c
  1270  0007A6  8E08               	bsf	___fttol@f1+1,7,c
  1271  0007A8  0EFF               	movlw	255
  1272  0007AA  1607               	andwf	___fttol@f1,f,c
  1273  0007AC  0EFF               	movlw	255
  1274  0007AE  1608               	andwf	___fttol@f1+1,f,c
  1275  0007B0  0E00               	movlw	0
  1276  0007B2  1609               	andwf	___fttol@f1+2,f,c
  1277  0007B4  5007               	movf	___fttol@f1,w,c
  1278  0007B6  6E11               	movwf	___fttol@lval,c
  1279  0007B8  5008               	movf	___fttol@f1+1,w,c
  1280  0007BA  6E12               	movwf	___fttol@lval+1,c
  1281  0007BC  5009               	movf	___fttol@f1+2,w,c
  1282  0007BE  6E13               	movwf	___fttol@lval+2,c
  1283  0007C0  6A14               	clrf	___fttol@lval+3,c
  1284  0007C2  0E8E               	movlw	142
  1285  0007C4  5E15               	subwf	___fttol@exp1,f,c
  1286  0007C6  AE15               	btfss	___fttol@exp1,7,c
  1287  0007C8  D016               	goto	l2497
  1288  0007CA  5015               	movf	___fttol@exp1,w,c
  1289  0007CC  0A80               	xorlw	128
  1290  0007CE  0F8F               	addlw	143
  1291  0007D0  B0D8               	btfsc	status,0,c
  1292  0007D2  D009               	goto	l2493
  1293  0007D4  0E00               	movlw	0
  1294  0007D6  6E07               	movwf	?___fttol,c
  1295  0007D8  0E00               	movlw	0
  1296  0007DA  6E08               	movwf	?___fttol+1,c
  1297  0007DC  0E00               	movlw	0
  1298  0007DE  6E09               	movwf	?___fttol+2,c
  1299  0007E0  0E00               	movlw	0
  1300  0007E2  6E0A               	movwf	?___fttol+3,c
  1301  0007E4  0012               	return	
  1302  0007E6                     l2493:
  1303  0007E6  90D8               	bcf	status,0,c
  1304  0007E8  3214               	rrcf	___fttol@lval+3,f,c
  1305  0007EA  3213               	rrcf	___fttol@lval+2,f,c
  1306  0007EC  3212               	rrcf	___fttol@lval+1,f,c
  1307  0007EE  3211               	rrcf	___fttol@lval,f,c
  1308  0007F0  3E15               	incfsz	___fttol@exp1,f,c
  1309  0007F2  D7F9               	goto	l2493
  1310  0007F4  D015               	goto	l2507
  1311  0007F6                     l2497:
  1312  0007F6  0E17               	movlw	23
  1313  0007F8  6415               	cpfsgt	___fttol@exp1,c
  1314  0007FA  D00F               	goto	l2505
  1315  0007FC  0E00               	movlw	0
  1316  0007FE  6E07               	movwf	?___fttol,c
  1317  000800  0E00               	movlw	0
  1318  000802  6E08               	movwf	?___fttol+1,c
  1319  000804  0E00               	movlw	0
  1320  000806  6E09               	movwf	?___fttol+2,c
  1321  000808  0E00               	movlw	0
  1322  00080A  6E0A               	movwf	?___fttol+3,c
  1323  00080C  0012               	return	
  1324  00080E                     l2503:
  1325  00080E  90D8               	bcf	status,0,c
  1326  000810  3611               	rlcf	___fttol@lval,f,c
  1327  000812  3612               	rlcf	___fttol@lval+1,f,c
  1328  000814  3613               	rlcf	___fttol@lval+2,f,c
  1329  000816  3614               	rlcf	___fttol@lval+3,f,c
  1330  000818  0615               	decf	___fttol@exp1,f,c
  1331  00081A                     l2505:
  1332  00081A  5015               	movf	___fttol@exp1,w,c
  1333  00081C  A4D8               	btfss	status,2,c
  1334  00081E  D7F7               	goto	l2503
  1335  000820                     l2507:
  1336  000820  5010               	movf	___fttol@sign1,w,c
  1337  000822  B4D8               	btfsc	status,2,c
  1338  000824  D008               	goto	l2511
  1339  000826  1E14               	comf	___fttol@lval+3,f,c
  1340  000828  1E13               	comf	___fttol@lval+2,f,c
  1341  00082A  1E12               	comf	___fttol@lval+1,f,c
  1342  00082C  6C11               	negf	___fttol@lval,c
  1343  00082E  0E00               	movlw	0
  1344  000830  2212               	addwfc	___fttol@lval+1,f,c
  1345  000832  2213               	addwfc	___fttol@lval+2,f,c
  1346  000834  2214               	addwfc	___fttol@lval+3,f,c
  1347  000836                     l2511:
  1348  000836  C011  F007         	movff	___fttol@lval,?___fttol
  1349  00083A  C012  F008         	movff	___fttol@lval+1,?___fttol+1
  1350  00083E  C013  F009         	movff	___fttol@lval+2,?___fttol+2
  1351  000842  C014  F00A         	movff	___fttol@lval+3,?___fttol+3
  1352  000846  0012               	return	
  1353  000848                     __end_of___fttol:
  1354                           	opt stack 0
  1355                           tblptru	equ	0xFF8
  1356                           tblptrh	equ	0xFF7
  1357                           tblptrl	equ	0xFF6
  1358                           tablat	equ	0xFF5
  1359                           prodh	equ	0xFF4
  1360                           prodl	equ	0xFF3
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function ___ftge *****************
  1366 ;; Defined at:
  1367 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  ff1             3   11[COMRAM] float 
  1370 ;;  ff2             3   14[COMRAM] float 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;		None
  1373 ;; Return value:  Size  Location     Type
  1374 ;;		None               void
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1382 ;;      Params:         6       0       0       0
  1383 ;;      Locals:         0       0       0       0
  1384 ;;      Temps:          3       0       0       0
  1385 ;;      Totals:         9       0       0       0
  1386 ;;Total ram usage:        9 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_nextChanPreset
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text6
  1396  000A82                     __ptext6:
  1397                           	opt stack 0
  1398  000A82                     ___ftge:
  1399                           	opt stack 29
  1400                           
  1401                           ;incstack = 0
  1402  000A82  AE0E               	btfss	___ftge@ff1+2,7,c
  1403  000A84  D016               	goto	l2455
  1404  000A86  C00C  F012         	movff	___ftge@ff1,??___ftge
  1405  000A8A  C00D  F013         	movff	___ftge@ff1+1,??___ftge+1
  1406  000A8E  C00E  F014         	movff	___ftge@ff1+2,??___ftge+2
  1407  000A92  1E12               	comf	??___ftge,f,c
  1408  000A94  1E13               	comf	??___ftge+1,f,c
  1409  000A96  1E14               	comf	??___ftge+2,f,c
  1410  000A98  2A12               	incf	??___ftge,f,c
  1411  000A9A  0E00               	movlw	0
  1412  000A9C  2213               	addwfc	??___ftge+1,f,c
  1413  000A9E  2214               	addwfc	??___ftge+2,f,c
  1414  000AA0  0E00               	movlw	0
  1415  000AA2  2412               	addwf	??___ftge,w,c
  1416  000AA4  6E0C               	movwf	___ftge@ff1,c
  1417  000AA6  0E00               	movlw	0
  1418  000AA8  2013               	addwfc	??___ftge+1,w,c
  1419  000AAA  6E0D               	movwf	___ftge@ff1+1,c
  1420  000AAC  0E80               	movlw	128
  1421  000AAE  2014               	addwfc	??___ftge+2,w,c
  1422  000AB0  6E0E               	movwf	___ftge@ff1+2,c
  1423  000AB2                     l2455:
  1424  000AB2  AE11               	btfss	___ftge@ff2+2,7,c
  1425  000AB4  D016               	goto	l2459
  1426  000AB6  C00F  F012         	movff	___ftge@ff2,??___ftge
  1427  000ABA  C010  F013         	movff	___ftge@ff2+1,??___ftge+1
  1428  000ABE  C011  F014         	movff	___ftge@ff2+2,??___ftge+2
  1429  000AC2  1E12               	comf	??___ftge,f,c
  1430  000AC4  1E13               	comf	??___ftge+1,f,c
  1431  000AC6  1E14               	comf	??___ftge+2,f,c
  1432  000AC8  2A12               	incf	??___ftge,f,c
  1433  000ACA  0E00               	movlw	0
  1434  000ACC  2213               	addwfc	??___ftge+1,f,c
  1435  000ACE  2214               	addwfc	??___ftge+2,f,c
  1436  000AD0  0E00               	movlw	0
  1437  000AD2  2412               	addwf	??___ftge,w,c
  1438  000AD4  6E0F               	movwf	___ftge@ff2,c
  1439  000AD6  0E00               	movlw	0
  1440  000AD8  2013               	addwfc	??___ftge+1,w,c
  1441  000ADA  6E10               	movwf	___ftge@ff2+1,c
  1442  000ADC  0E80               	movlw	128
  1443  000ADE  2014               	addwfc	??___ftge+2,w,c
  1444  000AE0  6E11               	movwf	___ftge@ff2+2,c
  1445  000AE2                     l2459:
  1446  000AE2  0E00               	movlw	0
  1447  000AE4  1A0C               	xorwf	___ftge@ff1,f,c
  1448  000AE6  0E00               	movlw	0
  1449  000AE8  1A0D               	xorwf	___ftge@ff1+1,f,c
  1450  000AEA  0E80               	movlw	128
  1451  000AEC  1A0E               	xorwf	___ftge@ff1+2,f,c
  1452  000AEE  0E00               	movlw	0
  1453  000AF0  1A0F               	xorwf	___ftge@ff2,f,c
  1454  000AF2  0E00               	movlw	0
  1455  000AF4  1A10               	xorwf	___ftge@ff2+1,f,c
  1456  000AF6  0E80               	movlw	128
  1457  000AF8  1A11               	xorwf	___ftge@ff2+2,f,c
  1458  000AFA  500F               	movf	___ftge@ff2,w,c
  1459  000AFC  5C0C               	subwf	___ftge@ff1,w,c
  1460  000AFE  5010               	movf	___ftge@ff2+1,w,c
  1461  000B00  580D               	subwfb	___ftge@ff1+1,w,c
  1462  000B02  5011               	movf	___ftge@ff2+2,w,c
  1463  000B04  580E               	subwfb	___ftge@ff1+2,w,c
  1464  000B06  B0D8               	btfsc	status,0,c
  1465  000B08  D002               	goto	l2465
  1466  000B0A  90D8               	bcf	status,0,c
  1467  000B0C  0012               	return	
  1468  000B0E                     l2465:
  1469  000B0E  80D8               	bsf	status,0,c
  1470  000B10  0012               	return	
  1471  000B12                     __end_of___ftge:
  1472                           	opt stack 0
  1473                           tblptru	equ	0xFF8
  1474                           tblptrh	equ	0xFF7
  1475                           tblptrl	equ	0xFF6
  1476                           tablat	equ	0xFF5
  1477                           prodh	equ	0xFF4
  1478                           prodl	equ	0xFF3
  1479                           postinc0	equ	0xFEE
  1480                           wreg	equ	0xFE8
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _nextChan *****************
  1484 ;; Defined at:
  1485 ;;		line 668 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  up              1    wreg     unsigned char 
  1488 ;;  freq            2   31[COMRAM] int 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;  up              1   37[COMRAM] unsigned char 
  1491 ;;  chn             2   38[COMRAM] unsigned int 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      unsigned char 
  1494 ;; Registers used:
  1495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1501 ;;      Params:         2       0       0       0
  1502 ;;      Locals:         3       0       0       0
  1503 ;;      Temps:          4       0       0       0
  1504 ;;      Totals:         9       0       0       0
  1505 ;;Total ram usage:        9 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    5
  1508 ;; This function calls:
  1509 ;;		_FMchan
  1510 ;;		_FMfrequenc
  1511 ;; This function is called by:
  1512 ;;		_main
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text7
  1517  000C1A                     __ptext7:
  1518                           	opt stack 0
  1519  000C1A                     _nextChan:
  1520                           	opt stack 25
  1521                           
  1522                           ;incstack = 0
  1523                           ;nextChan@up stored from wreg
  1524  000C1A  6E26               	movwf	nextChan@up,c
  1525                           
  1526                           ;main.c: 670: unsigned int chn;
  1527                           ;main.c: 672: if (FMchan(&chn) == 1) return 1;
  1528  000C1C  0E27               	movlw	low nextChan@chn
  1529  000C1E  6E0C               	movwf	FMchan@chn,c
  1530  000C20  0E00               	movlw	high nextChan@chn
  1531  000C22  6E0D               	movwf	FMchan@chn+1,c
  1532  000C24  EC04  F007         	call	_FMchan	;wreg free
  1533  000C28  06E8               	decf	wreg,f,c
  1534  000C2A  B4D8               	btfsc	status,2,c
  1535  000C2C  0012               	return	
  1536                           
  1537                           ;main.c: 674: if(up){
  1538                           
  1539                           ;	Return value of _nextChan is never used
  1540  000C2E  5026               	movf	nextChan@up,w,c
  1541  000C30  B4D8               	btfsc	status,2,c
  1542  000C32  D00F               	goto	l2769
  1543                           
  1544                           ;main.c: 675: if (chn + 1 <= (1080)) chn++;
  1545  000C34  0E01               	movlw	1
  1546  000C36  2427               	addwf	nextChan@chn,w,c
  1547  000C38  6E22               	movwf	??_nextChan& (0+255),c
  1548  000C3A  0E00               	movlw	0
  1549  000C3C  2028               	addwfc	nextChan@chn+1,w,c
  1550  000C3E  6E23               	movwf	(??_nextChan+1)& (0+255),c
  1551  000C40  0E39               	movlw	57
  1552  000C42  5C22               	subwf	??_nextChan,w,c
  1553  000C44  0E04               	movlw	4
  1554  000C46  5823               	subwfb	??_nextChan+1,w,c
  1555  000C48  B0D8               	btfsc	status,0,c
  1556  000C4A  D018               	goto	l2773
  1557  000C4C  4A27               	infsnz	nextChan@chn,f,c
  1558  000C4E  2A28               	incf	nextChan@chn+1,f,c
  1559                           
  1560                           ;main.c: 676: }
  1561  000C50  D015               	goto	l2773
  1562  000C52                     l2769:
  1563                           
  1564                           ;main.c: 677: else{
  1565                           ;main.c: 678: if (chn - 1 >= (875)) chn--;
  1566  000C52  0EFF               	movlw	255
  1567  000C54  6E22               	movwf	??_nextChan& (0+255),c
  1568  000C56  0EFF               	movlw	255
  1569  000C58  6E23               	movwf	(??_nextChan+1)& (0+255),c
  1570  000C5A  C027  F024         	movff	nextChan@chn,??_nextChan+2
  1571  000C5E  C028  F025         	movff	nextChan@chn+1,??_nextChan+3
  1572  000C62  5022               	movf	??_nextChan,w,c
  1573  000C64  2624               	addwf	??_nextChan+2,f,c
  1574  000C66  5023               	movf	??_nextChan+1,w,c
  1575  000C68  2225               	addwfc	??_nextChan+3,f,c
  1576  000C6A  0E6B               	movlw	107
  1577  000C6C  5C24               	subwf	??_nextChan+2,w,c
  1578  000C6E  0E03               	movlw	3
  1579  000C70  5825               	subwfb	??_nextChan+3,w,c
  1580  000C72  A0D8               	btfss	status,0,c
  1581  000C74  D003               	goto	l2773
  1582  000C76  0627               	decf	nextChan@chn,f,c
  1583  000C78  A0D8               	btfss	status,0,c
  1584  000C7A  0628               	decf	nextChan@chn+1,f,c
  1585  000C7C                     l2773:
  1586                           
  1587                           ;main.c: 679: }
  1588                           ;main.c: 681: FMfrequenc(chn + 690);
  1589  000C7C  0EB2               	movlw	178
  1590  000C7E  2427               	addwf	nextChan@chn,w,c
  1591  000C80  6E16               	movwf	FMfrequenc@f,c
  1592  000C82  0E02               	movlw	2
  1593  000C84  2028               	addwfc	nextChan@chn+1,w,c
  1594  000C86  6E17               	movwf	FMfrequenc@f+1,c
  1595  000C88  EC47  F006         	call	_FMfrequenc	;wreg free
  1596  000C8C  0012               	return	
  1597  000C8E                     __end_of_nextChan:
  1598                           	opt stack 0
  1599                           tblptru	equ	0xFF8
  1600                           tblptrh	equ	0xFF7
  1601                           tblptrl	equ	0xFF6
  1602                           tablat	equ	0xFF5
  1603                           prodh	equ	0xFF4
  1604                           prodl	equ	0xFF3
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           status	equ	0xFD8
  1608                           
  1609 ;; *************** function _FMfrequenc *****************
  1610 ;; Defined at:
  1611 ;;		line 582 in file "main.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  f               2   21[COMRAM] unsigned int 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  dat             2   29[COMRAM] unsigned int 
  1616 ;;  cn              2   27[COMRAM] unsigned int 
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      unsigned char 
  1619 ;; Registers used:
  1620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1626 ;;      Params:         2       0       0       0
  1627 ;;      Locals:         4       0       0       0
  1628 ;;      Temps:          4       0       0       0
  1629 ;;      Totals:        10       0       0       0
  1630 ;;Total ram usage:       10 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; Hardware stack levels required when called:    4
  1633 ;; This function calls:
  1634 ;;		_FMready
  1635 ;;		_FMwrite
  1636 ;;		_dly
  1637 ;; This function is called by:
  1638 ;;		_nextChan
  1639 ;;		_nextChanPreset
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text8
  1645  000C8E                     __ptext8:
  1646                           	opt stack 0
  1647  000C8E                     _FMfrequenc:
  1648                           	opt stack 25
  1649                           
  1650                           ;main.c: 584: unsigned int dat;
  1651                           ;main.c: 585: unsigned int cn;
  1652                           ;main.c: 587: cn = f - 690;
  1653                           
  1654                           ;incstack = 0
  1655  000C8E  0E4E               	movlw	78
  1656  000C90  2416               	addwf	FMfrequenc@f,w,c
  1657  000C92  6E1C               	movwf	FMfrequenc@cn,c
  1658  000C94  0EFD               	movlw	253
  1659  000C96  2017               	addwfc	FMfrequenc@f+1,w,c
  1660  000C98  6E1D               	movwf	FMfrequenc@cn+1,c
  1661                           
  1662                           ;main.c: 590: regImg[2] &= ~0x0200;
  1663  000C9A  9234               	bcf	_regImg+5,1,c
  1664                           
  1665                           ;main.c: 591: if (FMwrite(2) != 0) return 1;
  1666  000C9C  0E02               	movlw	2
  1667  000C9E  ECCC  F005         	call	_FMwrite
  1668  000CA2  0900               	iorlw	0
  1669  000CA4  A4D8               	btfss	status,2,c
  1670  000CA6  0012               	return	
  1671                           
  1672                           ;main.c: 592: regImg[2] &= 0xfe00;
  1673                           
  1674                           ;	Return value of _FMfrequenc is never used
  1675  000CA8  0E00               	movlw	0
  1676  000CAA  1633               	andwf	_regImg+4,f,c
  1677  000CAC  0EFE               	movlw	254
  1678  000CAE  1634               	andwf	_regImg+5,f,c
  1679                           
  1680                           ;main.c: 593: regImg[2] |= (cn | 0x0200);
  1681  000CB0  0E00               	movlw	0
  1682  000CB2  6E18               	movwf	??_FMfrequenc& (0+255),c
  1683  000CB4  0E02               	movlw	2
  1684  000CB6  6E19               	movwf	(??_FMfrequenc+1)& (0+255),c
  1685  000CB8  C01C  F01A         	movff	FMfrequenc@cn,??_FMfrequenc+2
  1686  000CBC  C01D  F01B         	movff	FMfrequenc@cn+1,??_FMfrequenc+3
  1687  000CC0  5018               	movf	??_FMfrequenc,w,c
  1688  000CC2  121A               	iorwf	??_FMfrequenc+2,f,c
  1689  000CC4  5019               	movf	??_FMfrequenc+1,w,c
  1690  000CC6  121B               	iorwf	??_FMfrequenc+3,f,c
  1691  000CC8  501A               	movf	??_FMfrequenc+2,w,c
  1692  000CCA  1233               	iorwf	_regImg+4,f,c
  1693  000CCC  501B               	movf	??_FMfrequenc+3,w,c
  1694  000CCE  1234               	iorwf	_regImg+5,f,c
  1695                           
  1696                           ;main.c: 594: if (FMwrite(2) != 0) return 1;
  1697  000CD0  0E02               	movlw	2
  1698  000CD2  ECCC  F005         	call	_FMwrite
  1699  000CD6  0900               	iorlw	0
  1700  000CD8  A4D8               	btfss	status,2,c
  1701  000CDA  0012               	return	
  1702                           
  1703                           ;main.c: 596: dly(2);
  1704                           
  1705                           ;main.c: 595: do {
  1706                           
  1707                           ;	Return value of _FMfrequenc is never used
  1708  000CDC  0E00               	movlw	0
  1709  000CDE  6E02               	movwf	dly@d+1,c
  1710  000CE0  0E02               	movlw	2
  1711  000CE2  6E01               	movwf	dly@d,c
  1712  000CE4  EC20  F007         	call	_dly	;wreg free
  1713                           
  1714                           ;main.c: 597: if (FMready(&dat) != 0) return 1;
  1715  000CE8  0E1E               	movlw	low FMfrequenc@dat
  1716  000CEA  6E0C               	movwf	FMready@rdy,c
  1717  000CEC  0E00               	movlw	high FMfrequenc@dat
  1718  000CEE  6E0D               	movwf	FMready@rdy+1,c
  1719  000CF0  ECE1  F006         	call	_FMready	;wreg free
  1720  000CF4  0900               	iorlw	0
  1721  000CF6  A4D8               	btfss	status,2,c
  1722  000CF8  0012               	return	
  1723                           
  1724                           ;main.c: 598: } while (!dat);
  1725                           
  1726                           ;	Return value of _FMfrequenc is never used
  1727  000CFA  501E               	movf	FMfrequenc@dat,w,c
  1728  000CFC  101F               	iorwf	FMfrequenc@dat+1,w,c
  1729  000CFE  D7EC               	goto	L2
  1730  000D00                     __end_of_FMfrequenc:
  1731                           	opt stack 0
  1732                           tblptru	equ	0xFF8
  1733                           tblptrh	equ	0xFF7
  1734                           tblptrl	equ	0xFF6
  1735                           tablat	equ	0xFF5
  1736                           prodh	equ	0xFF4
  1737                           prodl	equ	0xFF3
  1738                           postinc0	equ	0xFEE
  1739                           wreg	equ	0xFE8
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _FMchan *****************
  1743 ;; Defined at:
  1744 ;;		line 648 in file "main.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  chn             2   11[COMRAM] PTR unsigned int 
  1747 ;;		 -> nextChanPreset@chn(2), nextChan@chn(2), 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;		None
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      unsigned char 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1759 ;;      Params:         2       0       0       0
  1760 ;;      Locals:         0       0       0       0
  1761 ;;      Temps:          1       0       0       0
  1762 ;;      Totals:         3       0       0       0
  1763 ;;Total ram usage:        3 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    3
  1766 ;; This function calls:
  1767 ;;		_FMread
  1768 ;; This function is called by:
  1769 ;;		_nextChan
  1770 ;;		_nextChanPreset
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           	psect	text9
  1775  000E08                     __ptext9:
  1776                           	opt stack 0
  1777  000E08                     _FMchan:
  1778                           	opt stack 26
  1779                           
  1780                           ;main.c: 650: if (FMread(0x13, chn) != 0) return 1;
  1781                           
  1782                           ;incstack = 0
  1783  000E08  C00C  F003         	movff	FMchan@chn,FMread@data
  1784  000E0C  C00D  F004         	movff	FMchan@chn+1,FMread@data+1
  1785  000E10  0E13               	movlw	19
  1786  000E12  EC24  F004         	call	_FMread
  1787  000E16  0900               	iorlw	0
  1788  000E18  B4D8               	btfsc	status,2,c
  1789  000E1A  D002               	goto	l2439
  1790  000E1C  0E01               	movlw	1
  1791  000E1E  0012               	return	
  1792  000E20                     l2439:
  1793                           
  1794                           ;main.c: 651: *chn >>= 7;
  1795  000E20  0E07               	movlw	7
  1796  000E22  6E0E               	movwf	??_FMchan& (0+255),c
  1797  000E24  C00C  FFD9         	movff	FMchan@chn,fsr2l
  1798  000E28  C00D  FFDA         	movff	FMchan@chn+1,fsr2h
  1799  000E2C  280E               	incf	??_FMchan,w,c
  1800  000E2E  D004               	goto	u1520
  1801  000E30                     u1525:
  1802  000E30  2AD9               	incf	fsr2l,f,c
  1803  000E32  90D8               	bcf	status,0,c
  1804  000E34  32DD               	rrcf	postdec2,f,c
  1805  000E36  32DF               	rrcf	indf2,f,c
  1806  000E38                     u1520:
  1807  000E38  2EE8               	decfsz	wreg,f,c
  1808  000E3A  D7FA               	goto	u1525
  1809                           
  1810                           ;main.c: 652: return 0;
  1811  000E3C  0E00               	movlw	0
  1812  000E3E  0012               	return	
  1813  000E40                     __end_of_FMchan:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           prodh	equ	0xFF4
  1820                           prodl	equ	0xFF3
  1821                           postinc0	equ	0xFEE
  1822                           wreg	equ	0xFE8
  1823                           indf2	equ	0xFDF
  1824                           postdec2	equ	0xFDD
  1825                           fsr2h	equ	0xFDA
  1826                           fsr2l	equ	0xFD9
  1827                           status	equ	0xFD8
  1828                           
  1829 ;; *************** function _errfm *****************
  1830 ;; Defined at:
  1831 ;;		line 784 in file "main.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		None
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1845 ;;      Params:         0       0       0       0
  1846 ;;      Locals:         0       0       0       0
  1847 ;;      Temps:          0       0       0       0
  1848 ;;      Totals:         0       0       0       0
  1849 ;;Total ram usage:        0 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text10
  1859  000F2E                     __ptext10:
  1860                           	opt stack 0
  1861  000F2E                     _errfm:
  1862                           	opt stack 30
  1863  000F2E                     l241:
  1864  000F2E  D7FF               	goto	l241
  1865  000F30                     __end_of_errfm:
  1866                           	opt stack 0
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           prodh	equ	0xFF4
  1872                           prodl	equ	0xFF3
  1873                           postinc0	equ	0xFEE
  1874                           wreg	equ	0xFE8
  1875                           indf2	equ	0xFDF
  1876                           postdec2	equ	0xFDD
  1877                           fsr2h	equ	0xFDA
  1878                           fsr2l	equ	0xFD9
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function _changeVol *****************
  1882 ;; Defined at:
  1883 ;;		line 99 in file "main.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  up              1    wreg     unsigned char 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  up              1    7[COMRAM] unsigned char 
  1888 ;;  newRegValue     2    8[COMRAM] unsigned int 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      unsigned char 
  1891 ;; Registers used:
  1892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1898 ;;      Params:         0       0       0       0
  1899 ;;      Locals:         3       0       0       0
  1900 ;;      Temps:          0       0       0       0
  1901 ;;      Totals:         3       0       0       0
  1902 ;;Total ram usage:        3 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; Hardware stack levels required when called:    3
  1905 ;; This function calls:
  1906 ;;		_FMwrite
  1907 ;; This function is called by:
  1908 ;;		_main
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text11
  1913  000B12                     __ptext11:
  1914                           	opt stack 0
  1915  000B12                     _changeVol:
  1916                           	opt stack 27
  1917                           
  1918                           ;incstack = 0
  1919                           ;changeVol@up stored from wreg
  1920  000B12  6E08               	movwf	changeVol@up,c
  1921                           
  1922                           ;main.c: 102: unsigned int newRegValue;
  1923                           ;main.c: 104: if(up){
  1924  000B14  5008               	movf	changeVol@up,w,c
  1925  000B16  B4D8               	btfsc	status,2,c
  1926  000B18  D005               	goto	l1347
  1927                           
  1928                           ;main.c: 105: if(vol < 12){
  1929  000B1A  0E0C               	movlw	12
  1930  000B1C  6053               	cpfslt	_vol,c
  1931  000B1E  0012               	return	
  1932                           
  1933                           ;main.c: 106: vol++;
  1934  000B20  2A53               	incf	_vol,f,c
  1935                           
  1936                           ;main.c: 107: }
  1937  000B22  D004               	goto	l1351
  1938  000B24                     l1347:
  1939                           
  1940                           ;main.c: 110: else{
  1941                           ;main.c: 111: if(vol > 0){
  1942  000B24  5053               	movf	_vol,w,c
  1943  000B26  B4D8               	btfsc	status,2,c
  1944  000B28  0012               	return	
  1945                           
  1946                           ;main.c: 112: vol--;
  1947  000B2A  0653               	decf	_vol,f,c
  1948  000B2C                     l1351:
  1949                           
  1950                           ;main.c: 115: }
  1951                           ;main.c: 117: newRegValue = volPresets[vol][0];
  1952  000B2C  5053               	movf	_vol,w,c
  1953  000B2E  0D02               	mullw	2
  1954  000B30  0E01               	movlw	low _volPresets
  1955  000B32  24F3               	addwf	prodl,w,c
  1956  000B34  6EF6               	movwf	tblptrl,c
  1957  000B36  0E03               	movlw	high _volPresets
  1958  000B38  20F4               	addwfc	prodh,w,c
  1959  000B3A  6EF7               	movwf	tblptrh,c
  1960  000B3C                     	if	0	;There are less than 3 active tblptr bytes
  1961  000B3C                     	endif
  1962  000B3C  0008               	tblrd		*
  1963  000B3E  50F5               	movf	tablat,w,c
  1964  000B40  6E09               	movwf	changeVol@newRegValue,c
  1965  000B42  6A0A               	clrf	changeVol@newRegValue+1,c
  1966                           
  1967                           ;main.c: 118: newRegValue <<= 7;
  1968  000B44  0E07               	movlw	7
  1969  000B46                     u585:
  1970  000B46  90D8               	bcf	status,0,c
  1971  000B48  3609               	rlcf	changeVol@newRegValue,f,c
  1972  000B4A  360A               	rlcf	changeVol@newRegValue+1,f,c
  1973  000B4C  2EE8               	decfsz	wreg,f,c
  1974  000B4E  D7FB               	goto	u585
  1975                           
  1976                           ;main.c: 119: regImg[3] |= newRegValue;
  1977  000B50  5009               	movf	changeVol@newRegValue,w,c
  1978  000B52  1235               	iorwf	_regImg+6,f,c
  1979  000B54  500A               	movf	changeVol@newRegValue+1,w,c
  1980  000B56  1236               	iorwf	_regImg+7,f,c
  1981                           
  1982                           ;main.c: 120: if(FMwrite(3) != 0) return 1;
  1983  000B58  0E03               	movlw	3
  1984  000B5A  ECCC  F005         	call	_FMwrite
  1985  000B5E  0900               	iorlw	0
  1986  000B60  A4D8               	btfss	status,2,c
  1987  000B62  0012               	return	
  1988                           
  1989                           ;main.c: 122: newRegValue = volPresets[vol][0];
  1990                           
  1991                           ;	Return value of _changeVol is never used
  1992  000B64  5053               	movf	_vol,w,c
  1993  000B66  0D02               	mullw	2
  1994  000B68  0E01               	movlw	low _volPresets
  1995  000B6A  24F3               	addwf	prodl,w,c
  1996  000B6C  6EF6               	movwf	tblptrl,c
  1997  000B6E  0E03               	movlw	high _volPresets
  1998  000B70  20F4               	addwfc	prodh,w,c
  1999  000B72  6EF7               	movwf	tblptrh,c
  2000  000B74                     	if	0	;There are less than 3 active tblptr bytes
  2001  000B74                     	endif
  2002  000B74  0008               	tblrd		*
  2003  000B76  50F5               	movf	tablat,w,c
  2004  000B78  6E09               	movwf	changeVol@newRegValue,c
  2005  000B7A  6A0A               	clrf	changeVol@newRegValue+1,c
  2006                           
  2007                           ;main.c: 123: newRegValue <<= 12;
  2008  000B7C  0E0C               	movlw	12
  2009  000B7E                     u605:
  2010  000B7E  90D8               	bcf	status,0,c
  2011  000B80  3609               	rlcf	changeVol@newRegValue,f,c
  2012  000B82  360A               	rlcf	changeVol@newRegValue+1,f,c
  2013  000B84  2EE8               	decfsz	wreg,f,c
  2014  000B86  D7FB               	goto	u605
  2015                           
  2016                           ;main.c: 124: regImg[14] |= newRegValue;
  2017  000B88  5009               	movf	changeVol@newRegValue,w,c
  2018  000B8A  124B               	iorwf	_regImg+28,f,c
  2019  000B8C  500A               	movf	changeVol@newRegValue+1,w,c
  2020  000B8E  124C               	iorwf	_regImg+29,f,c
  2021                           
  2022                           ;main.c: 125: if(FMwrite(14) != 0) return 1;
  2023  000B90  0E0E               	movlw	14
  2024  000B92  ECCC  F005         	call	_FMwrite
  2025                           
  2026                           ;	Return value of _changeVol is never used
  2027  000B96  0012               	return	
  2028  000B98                     __end_of_changeVol:
  2029                           	opt stack 0
  2030                           tblptru	equ	0xFF8
  2031                           tblptrh	equ	0xFF7
  2032                           tblptrl	equ	0xFF6
  2033                           tablat	equ	0xFF5
  2034                           prodh	equ	0xFF4
  2035                           prodl	equ	0xFF3
  2036                           postinc0	equ	0xFEE
  2037                           wreg	equ	0xFE8
  2038                           indf2	equ	0xFDF
  2039                           postdec2	equ	0xFDD
  2040                           fsr2h	equ	0xFDA
  2041                           fsr2l	equ	0xFD9
  2042                           status	equ	0xFD8
  2043                           
  2044 ;; *************** function _butnEvent *****************
  2045 ;; Defined at:
  2046 ;;		line 150 in file "main.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;  butn            2    0[COMRAM] PTR unsigned char 
  2049 ;;		 -> main@btn(1), 
  2050 ;; Auto vars:     Size  Location     Type
  2051 ;;  butnStat        1    2[COMRAM] unsigned char 
  2052 ;; Return value:  Size  Location     Type
  2053 ;;                  1    wreg      unsigned char 
  2054 ;; Registers used:
  2055 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2056 ;; Tracked objects:
  2057 ;;		On entry : 0/0
  2058 ;;		On exit  : 0/0
  2059 ;;		Unchanged: 0/0
  2060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2061 ;;      Params:         2       0       0       0
  2062 ;;      Locals:         1       0       0       0
  2063 ;;      Temps:          0       0       0       0
  2064 ;;      Totals:         3       0       0       0
  2065 ;;Total ram usage:        3 bytes
  2066 ;; Hardware stack levels used:    1
  2067 ;; This function calls:
  2068 ;;		Nothing
  2069 ;; This function is called by:
  2070 ;;		_main
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text12
  2075  0004E4                     __ptext12:
  2076                           	opt stack 0
  2077  0004E4                     _butnEvent:
  2078                           	opt stack 30
  2079                           
  2080                           ;main.c: 152: unsigned char butnStat;
  2081                           ;main.c: 154: if ((PORTC & 0b00000001) == 0b00000001){
  2082                           
  2083                           ;incstack = 0
  2084  0004E4  A082               	btfss	3970,0,c	;volatile
  2085  0004E6  D009               	goto	l89
  2086                           
  2087                           ;main.c: 155: butnStat |= 0b00000001;
  2088  0004E8  8003               	bsf	butnEvent@butnStat,0,c
  2089                           
  2090                           ;main.c: 156: *butn = 0b00000001;
  2091  0004EA  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2092  0004EE  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2093  0004F2  0E01               	movlw	1
  2094  0004F4  6EDF               	movwf	indf2,c
  2095                           
  2096                           ;main.c: 157: return 1;
  2097  0004F6  0E01               	movlw	1
  2098  0004F8  0012               	return	
  2099  0004FA                     l89:
  2100                           
  2101                           ;main.c: 159: else if ((butnStat & 0b00000001) != 0b00000001){
  2102  0004FA  B003               	btfsc	butnEvent@butnStat,0,c
  2103  0004FC  D009               	goto	l93
  2104                           
  2105                           ;main.c: 160: butnStat |= 0b00000001;
  2106  0004FE  8003               	bsf	butnEvent@butnStat,0,c
  2107                           
  2108                           ;main.c: 161: *butn = 0b00000001;
  2109  000500  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2110  000504  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2111  000508  0E01               	movlw	1
  2112  00050A  6EDF               	movwf	indf2,c
  2113                           
  2114                           ;main.c: 162: return 2;
  2115  00050C  0E02               	movlw	2
  2116  00050E  0012               	return	
  2117  000510                     l93:
  2118                           
  2119                           ;main.c: 170: else if ((butnStat & 0b00000010) != 0b00000010){
  2120  000510  B203               	btfsc	butnEvent@butnStat,1,c
  2121  000512  D009               	goto	l2557
  2122                           
  2123                           ;main.c: 171: butnStat |= 0b00000010;
  2124  000514  8203               	bsf	butnEvent@butnStat,1,c
  2125                           
  2126                           ;main.c: 172: *butn = 0b00000010;
  2127  000516  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2128  00051A  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2129  00051E  0E02               	movlw	2
  2130  000520  6EDF               	movwf	indf2,c
  2131                           
  2132                           ;main.c: 173: return 2;
  2133  000522  0E02               	movlw	2
  2134  000524  0012               	return	
  2135  000526                     l2557:
  2136                           
  2137                           ;main.c: 174: }
  2138                           ;main.c: 176: if ((PORTC & 0b00000110) == 0b00000100){
  2139  000526  5082               	movf	3970,w,c	;volatile
  2140  000528  0B06               	andlw	6
  2141  00052A  0A04               	xorlw	4
  2142  00052C  A4D8               	btfss	status,2,c
  2143  00052E  D009               	goto	l96
  2144                           
  2145                           ;main.c: 177: butnStat |= 0b00000100;
  2146  000530  8403               	bsf	butnEvent@butnStat,2,c
  2147                           
  2148                           ;main.c: 178: *butn = 0b00000100;
  2149  000532  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2150  000536  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2151  00053A  0E04               	movlw	4
  2152  00053C  6EDF               	movwf	indf2,c
  2153                           
  2154                           ;main.c: 179: return 1;
  2155  00053E  0E01               	movlw	1
  2156  000540  0012               	return	
  2157  000542                     l96:
  2158                           
  2159                           ;main.c: 181: else if ((butnStat & 0b00000100) != 0b00000100){
  2160  000542  B403               	btfsc	butnEvent@butnStat,2,c
  2161  000544  D009               	goto	l2577
  2162                           
  2163                           ;main.c: 182: butnStat |= 0b00000100;
  2164  000546  8403               	bsf	butnEvent@butnStat,2,c
  2165                           
  2166                           ;main.c: 183: *butn = 0b00000100;
  2167  000548  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2168  00054C  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2169  000550  0E04               	movlw	4
  2170  000552  6EDF               	movwf	indf2,c
  2171                           
  2172                           ;main.c: 184: return 2;
  2173  000554  0E02               	movlw	2
  2174  000556  0012               	return	
  2175  000558                     l2577:
  2176                           
  2177                           ;main.c: 185: }
  2178                           ;main.c: 187: if ((PORTC & 0b00000111) == 0b00001000){
  2179  000558  5082               	movf	3970,w,c	;volatile
  2180  00055A  0B07               	andlw	7
  2181  00055C  0A08               	xorlw	8
  2182  00055E  A4D8               	btfss	status,2,c
  2183  000560  D009               	goto	l99
  2184                           
  2185                           ;main.c: 188: butnStat |= 0b00001000;
  2186  000562  8603               	bsf	butnEvent@butnStat,3,c
  2187                           
  2188                           ;main.c: 189: *butn = 0b00001000;
  2189  000564  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2190  000568  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2191  00056C  0E08               	movlw	8
  2192  00056E  6EDF               	movwf	indf2,c
  2193                           
  2194                           ;main.c: 190: return 1;
  2195  000570  0E01               	movlw	1
  2196  000572  0012               	return	
  2197  000574                     l99:
  2198                           
  2199                           ;main.c: 192: else if ((butnStat & 0b00001000) != 0b00001000){
  2200  000574  B603               	btfsc	butnEvent@butnStat,3,c
  2201  000576  D009               	goto	l2597
  2202                           
  2203                           ;main.c: 193: butnStat |= 0b00001000;
  2204  000578  8603               	bsf	butnEvent@butnStat,3,c
  2205                           
  2206                           ;main.c: 194: *butn = 0b00001000;
  2207  00057A  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2208  00057E  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2209  000582  0E08               	movlw	8
  2210  000584  6EDF               	movwf	indf2,c
  2211                           
  2212                           ;main.c: 195: return 2;
  2213  000586  0E02               	movlw	2
  2214  000588  0012               	return	
  2215  00058A                     l2597:
  2216                           
  2217                           ;main.c: 196: }
  2218                           ;main.c: 198: if ((PORTE & 0b00000100) == 0b00010000){
  2219  00058A  5084               	movf	3972,w,c	;volatile
  2220  00058C  0B04               	andlw	4
  2221  00058E  0A10               	xorlw	16
  2222  000590  A4D8               	btfss	status,2,c
  2223  000592  D009               	goto	l102
  2224                           
  2225                           ;main.c: 199: butnStat |= 0b00010000;
  2226  000594  8803               	bsf	butnEvent@butnStat,4,c
  2227                           
  2228                           ;main.c: 200: *butn = 0b00010000;
  2229  000596  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2230  00059A  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2231  00059E  0E10               	movlw	16
  2232  0005A0  6EDF               	movwf	indf2,c
  2233                           
  2234                           ;main.c: 201: return 1;
  2235  0005A2  0E01               	movlw	1
  2236  0005A4  0012               	return	
  2237  0005A6                     l102:
  2238                           
  2239                           ;main.c: 203: else if ((butnStat & 0b00010000) != 0b00010000){
  2240  0005A6  B803               	btfsc	butnEvent@butnStat,4,c
  2241  0005A8  D009               	goto	l2617
  2242                           
  2243                           ;main.c: 204: butnStat |= 0b00010000;
  2244  0005AA  8803               	bsf	butnEvent@butnStat,4,c
  2245                           
  2246                           ;main.c: 205: *butn = 0b00010000;
  2247  0005AC  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2248  0005B0  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2249  0005B4  0E10               	movlw	16
  2250  0005B6  6EDF               	movwf	indf2,c
  2251                           
  2252                           ;main.c: 206: return 2;
  2253  0005B8  0E02               	movlw	2
  2254  0005BA  0012               	return	
  2255  0005BC                     l2617:
  2256                           
  2257                           ;main.c: 207: }
  2258                           ;main.c: 209: if ((PORTE & 0b00000101) == 0b00100000){
  2259  0005BC  5084               	movf	3972,w,c	;volatile
  2260  0005BE  0B05               	andlw	5
  2261  0005C0  0A20               	xorlw	32
  2262  0005C2  A4D8               	btfss	status,2,c
  2263  0005C4  D009               	goto	l105
  2264                           
  2265                           ;main.c: 210: butnStat |= 0b00100000;
  2266  0005C6  8A03               	bsf	butnEvent@butnStat,5,c
  2267                           
  2268                           ;main.c: 211: *butn = 0b00100000;
  2269  0005C8  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2270  0005CC  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2271  0005D0  0E20               	movlw	32
  2272  0005D2  6EDF               	movwf	indf2,c
  2273                           
  2274                           ;main.c: 212: return 1;
  2275  0005D4  0E01               	movlw	1
  2276  0005D6  0012               	return	
  2277  0005D8                     l105:
  2278                           
  2279                           ;main.c: 214: else if ((butnStat & 0b00100000) != 0b00100000){
  2280  0005D8  BA03               	btfsc	butnEvent@butnStat,5,c
  2281  0005DA  D009               	goto	l2637
  2282                           
  2283                           ;main.c: 215: butnStat |= 0b00100000;
  2284  0005DC  8A03               	bsf	butnEvent@butnStat,5,c
  2285                           
  2286                           ;main.c: 216: *butn = 0b00100000;
  2287  0005DE  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2288  0005E2  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2289  0005E6  0E20               	movlw	32
  2290  0005E8  6EDF               	movwf	indf2,c
  2291                           
  2292                           ;main.c: 217: return 2;
  2293  0005EA  0E02               	movlw	2
  2294  0005EC  0012               	return	
  2295  0005EE                     l2637:
  2296                           
  2297                           ;main.c: 218: }
  2298                           ;main.c: 220: if ((PORTE & 0b00000110) == 0b01000000){
  2299  0005EE  5084               	movf	3972,w,c	;volatile
  2300  0005F0  0B06               	andlw	6
  2301  0005F2  0A40               	xorlw	64
  2302  0005F4  A4D8               	btfss	status,2,c
  2303  0005F6  D009               	goto	l108
  2304                           
  2305                           ;main.c: 221: butnStat |= 0b01000000;
  2306  0005F8  8C03               	bsf	butnEvent@butnStat,6,c
  2307                           
  2308                           ;main.c: 222: *butn = 0b01000000;
  2309  0005FA  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2310  0005FE  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2311  000602  0E40               	movlw	64
  2312  000604  6EDF               	movwf	indf2,c
  2313                           
  2314                           ;main.c: 223: return 1;
  2315  000606  0E01               	movlw	1
  2316  000608  0012               	return	
  2317  00060A                     l108:
  2318                           
  2319                           ;main.c: 225: else if ((butnStat & 0b01000000) != 0b01000000){
  2320  00060A  BC03               	btfsc	butnEvent@butnStat,6,c
  2321  00060C  D009               	goto	l2657
  2322                           
  2323                           ;main.c: 226: butnStat |= 0b01000000;
  2324  00060E  8C03               	bsf	butnEvent@butnStat,6,c
  2325                           
  2326                           ;main.c: 227: *butn = 0b01000000;
  2327  000610  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2328  000614  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2329  000618  0E40               	movlw	64
  2330  00061A  6EDF               	movwf	indf2,c
  2331                           
  2332                           ;main.c: 228: return 2;
  2333  00061C  0E02               	movlw	2
  2334  00061E  0012               	return	
  2335  000620                     l2657:
  2336                           
  2337                           ;main.c: 229: }
  2338                           ;main.c: 231: if ((PORTE & 0b00000111) == 0b10000000){
  2339  000620  5084               	movf	3972,w,c	;volatile
  2340  000622  0B07               	andlw	7
  2341  000624  0A80               	xorlw	128
  2342  000626  A4D8               	btfss	status,2,c
  2343  000628  D009               	goto	l111
  2344                           
  2345                           ;main.c: 232: butnStat |= 0b10000000;
  2346  00062A  8E03               	bsf	butnEvent@butnStat,7,c
  2347                           
  2348                           ;main.c: 233: *butn = 0b10000000;
  2349  00062C  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2350  000630  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2351  000634  0E80               	movlw	128
  2352  000636  6EDF               	movwf	indf2,c
  2353                           
  2354                           ;main.c: 234: return 1;
  2355  000638  0E01               	movlw	1
  2356  00063A  0012               	return	
  2357  00063C                     l111:
  2358                           
  2359                           ;main.c: 236: else if ((butnStat & 0b10000000) != 0b10000000){
  2360  00063C  BE03               	btfsc	butnEvent@butnStat,7,c
  2361  00063E  D009               	goto	l2677
  2362                           
  2363                           ;main.c: 237: butnStat |= 0b10000000;
  2364  000640  8E03               	bsf	butnEvent@butnStat,7,c
  2365                           
  2366                           ;main.c: 238: *butn = 0b10000000;
  2367  000642  C001  FFD9         	movff	butnEvent@butn,fsr2l
  2368  000646  C002  FFDA         	movff	butnEvent@butn+1,fsr2h
  2369  00064A  0E80               	movlw	128
  2370  00064C  6EDF               	movwf	indf2,c
  2371                           
  2372                           ;main.c: 239: return 2;
  2373  00064E  0E02               	movlw	2
  2374  000650  0012               	return	
  2375  000652                     l2677:
  2376                           
  2377                           ;main.c: 240: }
  2378                           ;main.c: 314: return 0;
  2379  000652  0E00               	movlw	0
  2380  000654  0012               	return	
  2381  000656                     __end_of_butnEvent:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           indf2	equ	0xFDF
  2392                           postdec2	equ	0xFDD
  2393                           fsr2h	equ	0xFDA
  2394                           fsr2l	equ	0xFD9
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _Init *****************
  2398 ;; Defined at:
  2399 ;;		line 352 in file "main.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  i               2    0        int 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2, status,0, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2413 ;;      Params:         0       0       0       0
  2414 ;;      Locals:         0       0       0       0
  2415 ;;      Temps:          0       0       0       0
  2416 ;;      Totals:         0       0       0       0
  2417 ;;Total ram usage:        0 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    1
  2420 ;; This function calls:
  2421 ;;		_OpenI2C
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text13
  2428  000D00                     __ptext13:
  2429                           	opt stack 0
  2430  000D00                     _Init:
  2431                           	opt stack 29
  2432                           
  2433                           ;main.c: 354: int i;
  2434                           ;main.c: 356: OSCCON = 0b01110010;
  2435                           
  2436                           ;incstack = 0
  2437  000D00  0E72               	movlw	114
  2438  000D02  6ED3               	movwf	4051,c	;volatile
  2439                           
  2440                           ;main.c: 357: LCDSE0 = 0b11111111;
  2441  000D04  010F               	movlb	15	; () banked
  2442  000D06  695A               	setf	90,b	;volatile
  2443                           
  2444                           ; BSR set to: 15
  2445                           ;main.c: 358: LCDSE1 = 0b11111111;
  2446  000D08  010F               	movlb	15	; () banked
  2447  000D0A  695B               	setf	91,b	;volatile
  2448                           
  2449                           ; BSR set to: 15
  2450                           ;main.c: 359: LCDSE2 = 0b11111111;
  2451  000D0C  010F               	movlb	15	; () banked
  2452  000D0E  695C               	setf	92,b	;volatile
  2453                           
  2454                           ;main.c: 360: LCDSE3 = 0b00000000;
  2455  000D10  0E00               	movlw	0
  2456  000D12  010F               	movlb	15	; () banked
  2457  000D14  6F5D               	movwf	93,b	;volatile
  2458                           
  2459                           ;main.c: 361: LCDCON = 0b10001000;
  2460  000D16  0E88               	movlw	136
  2461  000D18  010F               	movlb	15	; () banked
  2462  000D1A  6F59               	movwf	89,b	;volatile
  2463                           
  2464                           ;main.c: 362: LCDPS = 0b00110110;
  2465  000D1C  0E36               	movlw	54
  2466  000D1E  010F               	movlb	15	; () banked
  2467  000D20  6F58               	movwf	88,b	;volatile
  2468                           
  2469                           ;main.c: 363: ADCON1 = 0b00111111;
  2470  000D22  0E3F               	movlw	63
  2471  000D24  6EC1               	movwf	4033,c	;volatile
  2472                           
  2473                           ;main.c: 364: TRISA = 0b00000011;
  2474  000D26  0E03               	movlw	3
  2475  000D28  6E92               	movwf	3986,c	;volatile
  2476                           
  2477                           ;main.c: 365: TRISB = 0b00100001;
  2478  000D2A  0E21               	movlw	33
  2479  000D2C  6E93               	movwf	3987,c	;volatile
  2480                           
  2481                           ;main.c: 366: TRISC = 0b00011000;
  2482  000D2E  0E18               	movlw	24
  2483  000D30  6E94               	movwf	3988,c	;volatile
  2484                           
  2485                           ; BSR set to: 15
  2486                           ;main.c: 367: TRISG = 0b11111111;
  2487  000D32  6898               	setf	3992,c	;volatile
  2488                           
  2489                           ;main.c: 368: PORTA = 0;
  2490  000D34  0E00               	movlw	0
  2491  000D36  6E80               	movwf	3968,c	;volatile
  2492                           
  2493                           ;main.c: 369: PORTB = 0;
  2494  000D38  0E00               	movlw	0
  2495  000D3A  6E81               	movwf	3969,c	;volatile
  2496                           
  2497                           ;main.c: 370: PORTC = 0;
  2498  000D3C  0E00               	movlw	0
  2499  000D3E  6E82               	movwf	3970,c	;volatile
  2500                           
  2501                           ;main.c: 371: PORTG = 0;
  2502  000D40  0E00               	movlw	0
  2503  000D42  6E86               	movwf	3974,c	;volatile
  2504                           
  2505                           ; BSR set to: 15
  2506                           ;main.c: 372: INTCONbits.TMR0IF = 0;
  2507  000D44  94F2               	bcf	intcon,2,c	;volatile
  2508                           
  2509                           ;main.c: 374: T0CON = 0b00001000;
  2510  000D46  0E08               	movlw	8
  2511  000D48  6ED5               	movwf	4053,c	;volatile
  2512                           
  2513                           ;main.c: 375: TMR0H = 0;
  2514  000D4A  0E00               	movlw	0
  2515  000D4C  6ED7               	movwf	4055,c	;volatile
  2516                           
  2517                           ;main.c: 376: TMR0L = 0;
  2518  000D4E  0E00               	movlw	0
  2519  000D50  6ED6               	movwf	4054,c	;volatile
  2520                           
  2521                           ; BSR set to: 15
  2522                           ;main.c: 377: T0CONbits.TMR0ON = 1;
  2523  000D52  8ED5               	bsf	4053,7,c	;volatile
  2524                           
  2525                           ; BSR set to: 15
  2526                           ;main.c: 378: OpenI2C( 0b00001000, 0b10000000);
  2527  000D54  0E80               	movlw	128
  2528  000D56  6E01               	movwf	OpenI2C@slew,c
  2529  000D58  0E08               	movlw	8
  2530  000D5A  EC5E  F007         	call	_OpenI2C
  2531                           
  2532                           ;main.c: 379: SSPADD = 0x3F;
  2533  000D5E  0E3F               	movlw	63
  2534  000D60  6EC8               	movwf	4040,c	;volatile
  2535  000D62  0012               	return		;funcret
  2536  000D64                     __end_of_Init:
  2537                           	opt stack 0
  2538                           tblptru	equ	0xFF8
  2539                           tblptrh	equ	0xFF7
  2540                           tblptrl	equ	0xFF6
  2541                           tablat	equ	0xFF5
  2542                           prodh	equ	0xFF4
  2543                           prodl	equ	0xFF3
  2544                           intcon	equ	0xFF2
  2545                           postinc0	equ	0xFEE
  2546                           wreg	equ	0xFE8
  2547                           indf2	equ	0xFDF
  2548                           postdec2	equ	0xFDD
  2549                           fsr2h	equ	0xFDA
  2550                           fsr2l	equ	0xFD9
  2551                           status	equ	0xFD8
  2552                           
  2553 ;; *************** function _OpenI2C *****************
  2554 ;; Defined at:
  2555 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_open.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;  sync_mode       1    wreg     unsigned char 
  2558 ;;  slew            1    0[COMRAM] unsigned char 
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;  sync_mode       1    1[COMRAM] unsigned char 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg, status,2, status,0
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : 0/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2570 ;;      Params:         1       0       0       0
  2571 ;;      Locals:         1       0       0       0
  2572 ;;      Temps:          0       0       0       0
  2573 ;;      Totals:         2       0       0       0
  2574 ;;Total ram usage:        2 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; This function calls:
  2577 ;;		Nothing
  2578 ;; This function is called by:
  2579 ;;		_Init
  2580 ;; This function uses a non-reentrant model
  2581 ;;
  2582                           
  2583                           	psect	text14
  2584  000EBC                     __ptext14:
  2585                           	opt stack 0
  2586  000EBC                     _OpenI2C:
  2587                           	opt stack 29
  2588                           
  2589                           ;incstack = 0
  2590                           ;OpenI2C@sync_mode stored from wreg
  2591  000EBC  6E02               	movwf	OpenI2C@sync_mode,c
  2592  000EBE  0E3F               	movlw	63
  2593  000EC0  16C7               	andwf	4039,f,c	;volatile
  2594  000EC2  0E00               	movlw	0
  2595  000EC4  6EC6               	movwf	4038,c	;volatile
  2596  000EC6  0E00               	movlw	0
  2597  000EC8  6EC5               	movwf	4037,c	;volatile
  2598  000ECA  5002               	movf	OpenI2C@sync_mode,w,c
  2599  000ECC  12C6               	iorwf	4038,f,c	;volatile
  2600  000ECE  5001               	movf	OpenI2C@slew,w,c
  2601  000ED0  12C7               	iorwf	4039,f,c	;volatile
  2602  000ED2  8694               	bsf	3988,3,c	;volatile
  2603  000ED4  8894               	bsf	3988,4,c	;volatile
  2604  000ED6  8AC6               	bsf	4038,5,c	;volatile
  2605  000ED8  0012               	return		;funcret
  2606  000EDA                     __end_of_OpenI2C:
  2607                           	opt stack 0
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           prodh	equ	0xFF4
  2613                           prodl	equ	0xFF3
  2614                           intcon	equ	0xFF2
  2615                           postinc0	equ	0xFEE
  2616                           wreg	equ	0xFE8
  2617                           indf2	equ	0xFDF
  2618                           postdec2	equ	0xFDD
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           
  2623 ;; *************** function _FMvers *****************
  2624 ;; Defined at:
  2625 ;;		line 616 in file "main.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  vsn             2   11[COMRAM] PTR unsigned int 
  2628 ;;		 -> main@ui(2), 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;		None
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      unsigned char 
  2633 ;; Registers used:
  2634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2640 ;;      Params:         2       0       0       0
  2641 ;;      Locals:         0       0       0       0
  2642 ;;      Temps:          0       0       0       0
  2643 ;;      Totals:         2       0       0       0
  2644 ;;Total ram usage:        2 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    3
  2647 ;; This function calls:
  2648 ;;		_FMread
  2649 ;; This function is called by:
  2650 ;;		_main
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text15
  2655  000F1E                     __ptext15:
  2656                           	opt stack 0
  2657  000F1E                     _FMvers:
  2658                           	opt stack 27
  2659                           
  2660                           ;main.c: 617: if (FMread(0x1C, vsn) != 0) return 1;
  2661                           
  2662                           ;incstack = 0
  2663  000F1E  C00C  F003         	movff	FMvers@vsn,FMread@data
  2664  000F22  C00D  F004         	movff	FMvers@vsn+1,FMread@data+1
  2665  000F26  0E1C               	movlw	28
  2666  000F28  EC24  F004         	call	_FMread
  2667                           
  2668                           ;	Return value of _FMvers is never used
  2669  000F2C  0012               	return	
  2670  000F2E                     __end_of_FMvers:
  2671                           	opt stack 0
  2672                           tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           prodh	equ	0xFF4
  2677                           prodl	equ	0xFF3
  2678                           intcon	equ	0xFF2
  2679                           postinc0	equ	0xFEE
  2680                           wreg	equ	0xFE8
  2681                           indf2	equ	0xFDF
  2682                           postdec2	equ	0xFDD
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _FMinit *****************
  2688 ;; Defined at:
  2689 ;;		line 543 in file "main.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  dat             2   17[COMRAM] unsigned int 
  2694 ;;  ad              1   19[COMRAM] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      unsigned char 
  2697 ;; Registers used:
  2698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2704 ;;      Params:         0       0       0       0
  2705 ;;      Locals:         3       0       0       0
  2706 ;;      Temps:          0       0       0       0
  2707 ;;      Totals:         3       0       0       0
  2708 ;;Total ram usage:        3 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    4
  2711 ;; This function calls:
  2712 ;;		_FMready
  2713 ;;		_FMwrite
  2714 ;;		_dly
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text16
  2721  000912                     __ptext16:
  2722                           	opt stack 0
  2723  000912                     _FMinit:
  2724                           	opt stack 26
  2725                           
  2726                           ;main.c: 545: unsigned char ad;
  2727                           ;main.c: 546: unsigned int dat;
  2728                           ;main.c: 549: for(ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];
  2729                           
  2730                           ;incstack = 0
  2731  000912  0E00               	movlw	0
  2732  000914  6E14               	movwf	FMinit@ad,c
  2733  000916                     l2701:
  2734  000916  0E11               	movlw	17
  2735  000918  6414               	cpfsgt	FMinit@ad,c
  2736  00091A  D001               	goto	l2705
  2737  00091C  D018               	goto	l175
  2738  00091E                     l2705:
  2739  00091E  5014               	movf	FMinit@ad,w,c
  2740  000920  0D02               	mullw	2
  2741  000922  0E27               	movlw	low _regDflt
  2742  000924  24F3               	addwf	prodl,w,c
  2743  000926  6EF6               	movwf	tblptrl,c
  2744  000928  0E03               	movlw	high _regDflt
  2745  00092A  20F4               	addwfc	prodh,w,c
  2746  00092C  6EF7               	movwf	tblptrh,c
  2747  00092E                     	if	0	;There are less than 3 active tblptr bytes
  2748  00092E                     	endif
  2749  00092E  5014               	movf	FMinit@ad,w,c
  2750  000930  0D02               	mullw	2
  2751  000932  0E2F               	movlw	low _regImg
  2752  000934  24F3               	addwf	prodl,w,c
  2753  000936  6ED9               	movwf	fsr2l,c
  2754  000938  0E00               	movlw	high _regImg
  2755  00093A  20F4               	addwfc	prodh,w,c
  2756  00093C  6EDA               	movwf	fsr2h,c
  2757  00093E  0009               	tblrd		*+
  2758  000940  CFF5 FFDE          	movff	tablat,postinc2
  2759  000944  0008               	tblrd		*
  2760  000946  CFF5 FFDD          	movff	tablat,postdec2
  2761  00094A  2A14               	incf	FMinit@ad,f,c
  2762  00094C  D7E4               	goto	l2701
  2763  00094E                     l175:
  2764                           
  2765                           ;main.c: 551: dat = regImg[0];
  2766  00094E  C02F  F012         	movff	_regImg,FMinit@dat
  2767  000952  C030  F013         	movff	_regImg+1,FMinit@dat+1
  2768                           
  2769                           ;main.c: 552: regImg[0] &= ~1;
  2770  000956  902F               	bcf	_regImg,0,c
  2771                           
  2772                           ;main.c: 553: if (FMwrite(0) != 0) return 1;
  2773  000958  0E00               	movlw	0
  2774  00095A  ECCC  F005         	call	_FMwrite
  2775  00095E  0900               	iorlw	0
  2776  000960  B4D8               	btfsc	status,2,c
  2777  000962  D002               	goto	l2719
  2778  000964  0E01               	movlw	1
  2779  000966  0012               	return	
  2780  000968                     l2719:
  2781                           
  2782                           ;main.c: 554: for(ad = 1; ad < 18; ad++) {
  2783  000968  0E01               	movlw	1
  2784  00096A  6E14               	movwf	FMinit@ad,c
  2785  00096C                     l2721:
  2786  00096C  0E11               	movlw	17
  2787  00096E  6414               	cpfsgt	FMinit@ad,c
  2788  000970  D001               	goto	l2725
  2789  000972  D00A               	goto	l2735
  2790  000974                     l2725:
  2791                           
  2792                           ;main.c: 555: if (FMwrite(ad) != 0)return 1;
  2793  000974  5014               	movf	FMinit@ad,w,c
  2794  000976  ECCC  F005         	call	_FMwrite
  2795  00097A  0900               	iorlw	0
  2796  00097C  B4D8               	btfsc	status,2,c
  2797  00097E  D002               	goto	l2731
  2798  000980  0E01               	movlw	1
  2799  000982  0012               	return	
  2800  000984                     l2731:
  2801  000984  2A14               	incf	FMinit@ad,f,c
  2802  000986  D7F2               	goto	l2721
  2803  000988                     l2735:
  2804                           
  2805                           ;main.c: 556: }
  2806                           ;main.c: 558: regImg[0] = dat | 1;
  2807  000988  0E01               	movlw	1
  2808  00098A  1012               	iorwf	FMinit@dat,w,c
  2809  00098C  6E2F               	movwf	_regImg,c
  2810  00098E  5013               	movf	FMinit@dat+1,w,c
  2811  000990  6E30               	movwf	_regImg+1,c
  2812                           
  2813                           ;main.c: 559: if (FMwrite(0) != 0) return 1;
  2814  000992  0E00               	movlw	0
  2815  000994  ECCC  F005         	call	_FMwrite
  2816  000998  0900               	iorlw	0
  2817  00099A  B4D8               	btfsc	status,2,c
  2818  00099C  D002               	goto	l2743
  2819  00099E  0E01               	movlw	1
  2820  0009A0  0012               	return	
  2821  0009A2                     l2743:
  2822                           
  2823                           ;main.c: 560: dly(20);
  2824  0009A2  0E00               	movlw	0
  2825  0009A4  6E02               	movwf	dly@d+1,c
  2826  0009A6  0E14               	movlw	20
  2827  0009A8  6E01               	movwf	dly@d,c
  2828  0009AA  EC20  F007         	call	_dly	;wreg free
  2829                           
  2830                           ;main.c: 561: while (FMready(&dat), !dat) dly(2);
  2831  0009AE  D006               	goto	l2747
  2832  0009B0                     l2745:
  2833  0009B0  0E00               	movlw	0
  2834  0009B2  6E02               	movwf	dly@d+1,c
  2835  0009B4  0E02               	movlw	2
  2836  0009B6  6E01               	movwf	dly@d,c
  2837  0009B8  EC20  F007         	call	_dly	;wreg free
  2838  0009BC                     l2747:
  2839  0009BC  0E12               	movlw	low FMinit@dat
  2840  0009BE  6E0C               	movwf	FMready@rdy,c
  2841  0009C0  0E00               	movlw	high FMinit@dat
  2842  0009C2  6E0D               	movwf	FMready@rdy+1,c
  2843  0009C4  ECE1  F006         	call	_FMready	;wreg free
  2844  0009C8  5012               	movf	FMinit@dat,w,c
  2845  0009CA  1013               	iorwf	FMinit@dat+1,w,c
  2846  0009CC  B4D8               	btfsc	status,2,c
  2847  0009CE  D7F0               	goto	l2745
  2848                           
  2849                           ;main.c: 563: return 0;
  2850  0009D0  0E00               	movlw	0
  2851  0009D2  0012               	return	
  2852  0009D4                     __end_of_FMinit:
  2853                           	opt stack 0
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           prodh	equ	0xFF4
  2859                           prodl	equ	0xFF3
  2860                           intcon	equ	0xFF2
  2861                           postinc0	equ	0xFEE
  2862                           wreg	equ	0xFE8
  2863                           indf2	equ	0xFDF
  2864                           postinc2	equ	0xFDE
  2865                           postdec2	equ	0xFDD
  2866                           fsr2h	equ	0xFDA
  2867                           fsr2l	equ	0xFD9
  2868                           status	equ	0xFD8
  2869                           
  2870 ;; *************** function _dly *****************
  2871 ;; Defined at:
  2872 ;;		line 321 in file "main.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  d               2    0[COMRAM] int 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  i               2    2[COMRAM] int 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2886 ;;      Params:         2       0       0       0
  2887 ;;      Locals:         2       0       0       0
  2888 ;;      Temps:          0       0       0       0
  2889 ;;      Totals:         4       0       0       0
  2890 ;;Total ram usage:        4 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; This function calls:
  2893 ;;		Nothing
  2894 ;; This function is called by:
  2895 ;;		_FMinit
  2896 ;;		_FMfrequenc
  2897 ;;		_main
  2898 ;;		_scanNext
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text17
  2903  000E40                     __ptext17:
  2904                           	opt stack 0
  2905  000E40                     _dly:
  2906                           	opt stack 28
  2907                           
  2908                           ;main.c: 323: int i = 0;
  2909                           
  2910                           ;incstack = 0
  2911  000E40  0E00               	movlw	0
  2912  000E42  6E04               	movwf	dly@i+1,c
  2913  000E44  0E00               	movlw	0
  2914  000E46  6E03               	movwf	dly@i,c
  2915                           
  2916                           ;main.c: 325: for ( ; d; --d)
  2917  000E48  D00F               	goto	l2347
  2918  000E4A                     l2339:
  2919                           
  2920                           ;main.c: 326: for (i = 1000; i; --i) ;
  2921  000E4A  0E03               	movlw	3
  2922  000E4C  6E04               	movwf	dly@i+1,c
  2923  000E4E  0EE8               	movlw	232
  2924  000E50  6E03               	movwf	dly@i,c
  2925  000E52  D003               	goto	l2343
  2926  000E54                     l2341:
  2927  000E54  0603               	decf	dly@i,f,c
  2928  000E56  A0D8               	btfss	status,0,c
  2929  000E58  0604               	decf	dly@i+1,f,c
  2930  000E5A                     l2343:
  2931  000E5A  5003               	movf	dly@i,w,c
  2932  000E5C  1004               	iorwf	dly@i+1,w,c
  2933  000E5E  A4D8               	btfss	status,2,c
  2934  000E60  D7F9               	goto	l2341
  2935  000E62  0601               	decf	dly@d,f,c
  2936  000E64  A0D8               	btfss	status,0,c
  2937  000E66  0602               	decf	dly@d+1,f,c
  2938  000E68                     l2347:
  2939  000E68  5001               	movf	dly@d,w,c
  2940  000E6A  1002               	iorwf	dly@d+1,w,c
  2941  000E6C  B4D8               	btfsc	status,2,c
  2942  000E6E  0012               	return	
  2943  000E70  D7EC               	goto	l2339
  2944  000E72                     __end_of_dly:
  2945                           	opt stack 0
  2946                           tblptru	equ	0xFF8
  2947                           tblptrh	equ	0xFF7
  2948                           tblptrl	equ	0xFF6
  2949                           tablat	equ	0xFF5
  2950                           prodh	equ	0xFF4
  2951                           prodl	equ	0xFF3
  2952                           intcon	equ	0xFF2
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           indf2	equ	0xFDF
  2956                           postinc2	equ	0xFDE
  2957                           postdec2	equ	0xFDD
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _FMwrite *****************
  2963 ;; Defined at:
  2964 ;;		line 423 in file "main.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  adr             1    wreg     unsigned char 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  adr             1    6[COMRAM] unsigned char 
  2969 ;;  secndByt        1    5[COMRAM] unsigned char 
  2970 ;;  firstByt        1    4[COMRAM] unsigned char 
  2971 ;; Return value:  Size  Location     Type
  2972 ;;                  1    wreg      unsigned char 
  2973 ;; Registers used:
  2974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2975 ;; Tracked objects:
  2976 ;;		On entry : 0/0
  2977 ;;		On exit  : 0/0
  2978 ;;		Unchanged: 0/0
  2979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2980 ;;      Params:         0       0       0       0
  2981 ;;      Locals:         3       0       0       0
  2982 ;;      Temps:          2       0       0       0
  2983 ;;      Totals:         5       0       0       0
  2984 ;;Total ram usage:        5 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    2
  2987 ;; This function calls:
  2988 ;;		_IdleI2C
  2989 ;;		_WriteI2C
  2990 ;; This function is called by:
  2991 ;;		_changeVol
  2992 ;;		_FMinit
  2993 ;;		_FMfrequenc
  2994 ;;		_main
  2995 ;;		_scanNext
  2996 ;;		_mute
  2997 ;;		_setVolume
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001                           	psect	text18
  3002  000B98                     __ptext18:
  3003                           	opt stack 0
  3004  000B98                     _FMwrite:
  3005                           	opt stack 26
  3006                           
  3007                           ;incstack = 0
  3008                           ;FMwrite@adr stored from wreg
  3009  000B98  6E07               	movwf	FMwrite@adr,c
  3010                           
  3011                           ;main.c: 425: unsigned char firstByt;
  3012                           ;main.c: 426: unsigned char secndByt;
  3013                           ;main.c: 428: firstByt = regImg[adr] >> 8;
  3014  000B9A  5007               	movf	FMwrite@adr,w,c
  3015  000B9C  0D02               	mullw	2
  3016  000B9E  0E2F               	movlw	low _regImg
  3017  000BA0  24F3               	addwf	prodl,w,c
  3018  000BA2  6ED9               	movwf	fsr2l,c
  3019  000BA4  0E00               	movlw	high _regImg
  3020  000BA6  20F4               	addwfc	prodh,w,c
  3021  000BA8  6EDA               	movwf	fsr2h,c
  3022  000BAA  CFDE F003          	movff	postinc2,??_FMwrite
  3023  000BAE  CFDD F004          	movff	postdec2,??_FMwrite+1
  3024  000BB2  C004  F003         	movff	??_FMwrite+1,??_FMwrite
  3025  000BB6  6A04               	clrf	??_FMwrite+1,c
  3026  000BB8  5003               	movf	??_FMwrite,w,c
  3027  000BBA  6E05               	movwf	FMwrite@firstByt,c
  3028                           
  3029                           ;main.c: 429: secndByt = regImg[adr];
  3030  000BBC  5007               	movf	FMwrite@adr,w,c
  3031  000BBE  0D02               	mullw	2
  3032  000BC0  0E2F               	movlw	low _regImg
  3033  000BC2  24F3               	addwf	prodl,w,c
  3034  000BC4  6ED9               	movwf	fsr2l,c
  3035  000BC6  0E00               	movlw	high _regImg
  3036  000BC8  20F4               	addwfc	prodh,w,c
  3037  000BCA  6EDA               	movwf	fsr2h,c
  3038  000BCC  50DF               	movf	indf2,w,c
  3039  000BCE  6E06               	movwf	FMwrite@secndByt,c
  3040                           
  3041                           ;main.c: 431: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3042  000BD0  80C5               	bsf	4037,0,c	;volatile
  3043  000BD2                     l139:
  3044  000BD2  B0C5               	btfsc	4037,0,c	;volatile
  3045  000BD4  D7FE               	goto	l139
  3046                           
  3047                           ;main.c: 432: IdleI2C();
  3048  000BD6  EC86  F007         	call	_IdleI2C	;wreg free
  3049                           
  3050                           ;main.c: 435: if (WriteI2C(0x20)) return 1;
  3051  000BDA  0E20               	movlw	32
  3052  000BDC  ECB2  F006         	call	_WriteI2C
  3053  000BE0  0900               	iorlw	0
  3054  000BE2  B4D8               	btfsc	status,2,c
  3055  000BE4  D002               	goto	l1149
  3056  000BE6  0E01               	movlw	1
  3057  000BE8  0012               	return	
  3058  000BEA                     l1149:
  3059                           
  3060                           ;main.c: 436: IdleI2C();
  3061  000BEA  EC86  F007         	call	_IdleI2C	;wreg free
  3062                           
  3063                           ;main.c: 437: WriteI2C(adr);
  3064  000BEE  5007               	movf	FMwrite@adr,w,c
  3065  000BF0  ECB2  F006         	call	_WriteI2C
  3066                           
  3067                           ;main.c: 438: IdleI2C();
  3068  000BF4  EC86  F007         	call	_IdleI2C	;wreg free
  3069                           
  3070                           ;main.c: 439: WriteI2C(firstByt);
  3071  000BF8  5005               	movf	FMwrite@firstByt,w,c
  3072  000BFA  ECB2  F006         	call	_WriteI2C
  3073                           
  3074                           ;main.c: 440: IdleI2C();
  3075  000BFE  EC86  F007         	call	_IdleI2C	;wreg free
  3076                           
  3077                           ;main.c: 441: WriteI2C(secndByt);
  3078  000C02  5006               	movf	FMwrite@secndByt,w,c
  3079  000C04  ECB2  F006         	call	_WriteI2C
  3080                           
  3081                           ;main.c: 442: IdleI2C();
  3082  000C08  EC86  F007         	call	_IdleI2C	;wreg free
  3083                           
  3084                           ;main.c: 443: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3085  000C0C  84C5               	bsf	4037,2,c	;volatile
  3086  000C0E                     l144:
  3087  000C0E  B4C5               	btfsc	4037,2,c	;volatile
  3088  000C10  D7FE               	goto	l144
  3089                           
  3090                           ;main.c: 444: IdleI2C();
  3091  000C12  EC86  F007         	call	_IdleI2C	;wreg free
  3092                           
  3093                           ;main.c: 445: return 0;
  3094  000C16  0E00               	movlw	0
  3095  000C18  0012               	return	
  3096  000C1A                     __end_of_FMwrite:
  3097                           	opt stack 0
  3098                           tblptru	equ	0xFF8
  3099                           tblptrh	equ	0xFF7
  3100                           tblptrl	equ	0xFF6
  3101                           tablat	equ	0xFF5
  3102                           prodh	equ	0xFF4
  3103                           prodl	equ	0xFF3
  3104                           intcon	equ	0xFF2
  3105                           postinc0	equ	0xFEE
  3106                           wreg	equ	0xFE8
  3107                           indf2	equ	0xFDF
  3108                           postinc2	equ	0xFDE
  3109                           postdec2	equ	0xFDD
  3110                           fsr2h	equ	0xFDA
  3111                           fsr2l	equ	0xFD9
  3112                           status	equ	0xFD8
  3113                           
  3114 ;; *************** function _FMready *****************
  3115 ;; Defined at:
  3116 ;;		line 515 in file "main.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;  rdy             2   11[COMRAM] PTR unsigned int 
  3119 ;;		 -> FMfrequenc@dat(2), FMinit@dat(2), 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;  sts             2   15[COMRAM] unsigned int 
  3122 ;; Return value:  Size  Location     Type
  3123 ;;                  1    wreg      unsigned char 
  3124 ;; Registers used:
  3125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3126 ;; Tracked objects:
  3127 ;;		On entry : 0/0
  3128 ;;		On exit  : 0/0
  3129 ;;		Unchanged: 0/0
  3130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3131 ;;      Params:         2       0       0       0
  3132 ;;      Locals:         2       0       0       0
  3133 ;;      Temps:          2       0       0       0
  3134 ;;      Totals:         6       0       0       0
  3135 ;;Total ram usage:        6 bytes
  3136 ;; Hardware stack levels used:    1
  3137 ;; Hardware stack levels required when called:    3
  3138 ;; This function calls:
  3139 ;;		_FMread
  3140 ;; This function is called by:
  3141 ;;		_FMinit
  3142 ;;		_FMfrequenc
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text19
  3147  000DC2                     __ptext19:
  3148                           	opt stack 0
  3149  000DC2                     _FMready:
  3150                           	opt stack 25
  3151                           
  3152                           ;main.c: 517: unsigned int sts;
  3153                           ;main.c: 519: if (FMread(0x13, &sts) != 0) return 1;
  3154                           
  3155                           ;incstack = 0
  3156  000DC2  0E10               	movlw	low FMready@sts
  3157  000DC4  6E03               	movwf	FMread@data,c
  3158  000DC6  0E00               	movlw	high FMready@sts
  3159  000DC8  6E04               	movwf	FMread@data+1,c
  3160  000DCA  0E13               	movlw	19
  3161  000DCC  EC24  F004         	call	_FMread
  3162  000DD0  0900               	iorlw	0
  3163  000DD2  B4D8               	btfsc	status,2,c
  3164  000DD4  D002               	goto	l2355
  3165  000DD6  0E01               	movlw	1
  3166  000DD8  0012               	return	
  3167  000DDA                     l2355:
  3168                           
  3169                           ;main.c: 520: sts &= 0x0020;
  3170  000DDA  0E20               	movlw	32
  3171  000DDC  1610               	andwf	FMready@sts,f,c
  3172  000DDE  0E00               	movlw	0
  3173  000DE0  1611               	andwf	FMready@sts+1,f,c
  3174                           
  3175                           ;main.c: 521: *rdy = sts ? 1 : 0;
  3176  000DE2  5010               	movf	FMready@sts,w,c
  3177  000DE4  1011               	iorwf	FMready@sts+1,w,c
  3178  000DE6  B4D8               	btfsc	status,2,c
  3179  000DE8  D002               	goto	u1370
  3180  000DEA  0E01               	movlw	1
  3181  000DEC  D001               	goto	u1380
  3182  000DEE                     u1370:
  3183  000DEE  0E00               	movlw	0
  3184  000DF0                     u1380:
  3185  000DF0  6E0E               	movwf	??_FMready& (0+255),c
  3186  000DF2  6A0F               	clrf	(??_FMready+1)& (0+255),c
  3187  000DF4  C00C  FFD9         	movff	FMready@rdy,fsr2l
  3188  000DF8  C00D  FFDA         	movff	FMready@rdy+1,fsr2h
  3189  000DFC  C00E  FFDE         	movff	??_FMready,postinc2
  3190  000E00  C00F  FFDD         	movff	??_FMready+1,postdec2
  3191                           
  3192                           ;main.c: 522: return 0;
  3193  000E04  0E00               	movlw	0
  3194  000E06  0012               	return	
  3195  000E08                     __end_of_FMready:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           prodh	equ	0xFF4
  3202                           prodl	equ	0xFF3
  3203                           intcon	equ	0xFF2
  3204                           postinc0	equ	0xFEE
  3205                           wreg	equ	0xFE8
  3206                           indf2	equ	0xFDF
  3207                           postinc2	equ	0xFDE
  3208                           postdec2	equ	0xFDD
  3209                           fsr2h	equ	0xFDA
  3210                           fsr2l	equ	0xFD9
  3211                           status	equ	0xFD8
  3212                           
  3213 ;; *************** function _FMread *****************
  3214 ;; Defined at:
  3215 ;;		line 465 in file "main.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  regAddr         1    wreg     unsigned char 
  3218 ;;  data            2    2[COMRAM] PTR unsigned int 
  3219 ;;		 -> main@ui(2), FMreadChan@newFreq(2), scanNext@STC(2), nextChanPreset@chn(2), 
  3220 ;;		 -> nextChan@chn(2), FMready@sts(2), 
  3221 ;; Auto vars:     Size  Location     Type
  3222 ;;  regAddr         1    8[COMRAM] unsigned char 
  3223 ;;  secndByt        1   10[COMRAM] unsigned char 
  3224 ;;  firstByt        1    9[COMRAM] unsigned char 
  3225 ;; Return value:  Size  Location     Type
  3226 ;;                  1    wreg      unsigned char 
  3227 ;; Registers used:
  3228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3234 ;;      Params:         2       0       0       0
  3235 ;;      Locals:         3       0       0       0
  3236 ;;      Temps:          4       0       0       0
  3237 ;;      Totals:         9       0       0       0
  3238 ;;Total ram usage:        9 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    2
  3241 ;; This function calls:
  3242 ;;		_IdleI2C
  3243 ;;		_ReadI2C
  3244 ;;		_WriteI2C
  3245 ;; This function is called by:
  3246 ;;		_FMready
  3247 ;;		_FMvers
  3248 ;;		_FMchan
  3249 ;;		_FMid
  3250 ;;		_scanNext
  3251 ;;		_FMreadChan
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text20
  3256  000848                     __ptext20:
  3257                           	opt stack 0
  3258  000848                     _FMread:
  3259                           	opt stack 25
  3260                           
  3261                           ;incstack = 0
  3262                           ;FMread@regAddr stored from wreg
  3263  000848  6E09               	movwf	FMread@regAddr,c
  3264                           
  3265                           ;main.c: 467: unsigned char firstByt;
  3266                           ;main.c: 468: unsigned char secndByt;
  3267                           ;main.c: 470: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  3268  00084A  80C5               	bsf	4037,0,c	;volatile
  3269  00084C                     l149:
  3270  00084C  B0C5               	btfsc	4037,0,c	;volatile
  3271  00084E  D7FE               	goto	l149
  3272                           
  3273                           ;main.c: 471: IdleI2C();
  3274  000850  EC86  F007         	call	_IdleI2C	;wreg free
  3275                           
  3276                           ;main.c: 474: if (WriteI2C(0x20)) return 1;
  3277  000854  0E20               	movlw	32
  3278  000856  ECB2  F006         	call	_WriteI2C
  3279  00085A  0900               	iorlw	0
  3280  00085C  B4D8               	btfsc	status,2,c
  3281  00085E  D002               	goto	l2305
  3282  000860  0E01               	movlw	1
  3283  000862  0012               	return	
  3284  000864                     l2305:
  3285                           
  3286                           ;main.c: 475: IdleI2C();
  3287  000864  EC86  F007         	call	_IdleI2C	;wreg free
  3288                           
  3289                           ;main.c: 476: WriteI2C(regAddr);
  3290  000868  5009               	movf	FMread@regAddr,w,c
  3291  00086A  ECB2  F006         	call	_WriteI2C
  3292                           
  3293                           ;main.c: 477: IdleI2C();
  3294  00086E  EC86  F007         	call	_IdleI2C	;wreg free
  3295                           
  3296                           ;main.c: 478: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  3297  000872  82C5               	bsf	4037,1,c	;volatile
  3298  000874                     l154:
  3299  000874  B2C5               	btfsc	4037,1,c	;volatile
  3300  000876  D7FE               	goto	l154
  3301                           
  3302                           ;main.c: 479: IdleI2C();
  3303  000878  EC86  F007         	call	_IdleI2C	;wreg free
  3304                           
  3305                           ;main.c: 480: WriteI2C(0x20 + 0x01);
  3306  00087C  0E21               	movlw	33
  3307  00087E  ECB2  F006         	call	_WriteI2C
  3308                           
  3309                           ;main.c: 481: IdleI2C();
  3310  000882  EC86  F007         	call	_IdleI2C	;wreg free
  3311                           
  3312                           ;main.c: 482: firstByt = ReadI2C();
  3313  000886  EC6D  F007         	call	_ReadI2C	;wreg free
  3314  00088A  6E0A               	movwf	FMread@firstByt,c
  3315                           
  3316                           ;main.c: 483: IdleI2C();
  3317  00088C  EC86  F007         	call	_IdleI2C	;wreg free
  3318                           
  3319                           ;main.c: 484: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3320  000890  9AC5               	bcf	4037,5,c	;volatile
  3321  000892  88C5               	bsf	4037,4,c	;volatile
  3322  000894                     l157:
  3323  000894  B8C5               	btfsc	4037,4,c	;volatile
  3324  000896  D7FE               	goto	l157
  3325                           
  3326                           ;main.c: 485: IdleI2C();
  3327  000898  EC86  F007         	call	_IdleI2C	;wreg free
  3328                           
  3329                           ;main.c: 486: secndByt = ReadI2C();
  3330  00089C  EC6D  F007         	call	_ReadI2C	;wreg free
  3331  0008A0  6E0B               	movwf	FMread@secndByt,c
  3332                           
  3333                           ;main.c: 487: IdleI2C();
  3334  0008A2  EC86  F007         	call	_IdleI2C	;wreg free
  3335                           
  3336                           ;main.c: 488: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  3337  0008A6  8AC5               	bsf	4037,5,c	;volatile
  3338  0008A8  88C5               	bsf	4037,4,c	;volatile
  3339  0008AA                     l160:
  3340  0008AA  B8C5               	btfsc	4037,4,c	;volatile
  3341  0008AC  D7FE               	goto	l160
  3342                           
  3343                           ;main.c: 489: IdleI2C();
  3344  0008AE  EC86  F007         	call	_IdleI2C	;wreg free
  3345                           
  3346                           ;main.c: 490: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  3347  0008B2  84C5               	bsf	4037,2,c	;volatile
  3348  0008B4                     l163:
  3349  0008B4  B4C5               	btfsc	4037,2,c	;volatile
  3350  0008B6  D7FE               	goto	l163
  3351                           
  3352                           ;main.c: 491: IdleI2C();
  3353  0008B8  EC86  F007         	call	_IdleI2C	;wreg free
  3354                           
  3355                           ;main.c: 492: *data = firstByt;
  3356  0008BC  500A               	movf	FMread@firstByt,w,c
  3357  0008BE  6E05               	movwf	??_FMread& (0+255),c
  3358  0008C0  6A06               	clrf	(??_FMread+1)& (0+255),c
  3359  0008C2  C003  FFD9         	movff	FMread@data,fsr2l
  3360  0008C6  C004  FFDA         	movff	FMread@data+1,fsr2h
  3361  0008CA  C005  FFDE         	movff	??_FMread,postinc2
  3362  0008CE  C006  FFDD         	movff	??_FMread+1,postdec2
  3363                           
  3364                           ;main.c: 493: *data <<= 8;
  3365  0008D2  C003  FFD9         	movff	FMread@data,fsr2l
  3366  0008D6  C004  FFDA         	movff	FMread@data+1,fsr2h
  3367  0008DA  50DE               	movf	postinc2,w,c
  3368  0008DC  6EDD               	movwf	postdec2,c
  3369  0008DE  6ADF               	clrf	indf2,c
  3370                           
  3371                           ;main.c: 494: *data = *data | secndByt;
  3372  0008E0  C003  FFD9         	movff	FMread@data,fsr2l
  3373  0008E4  C004  FFDA         	movff	FMread@data+1,fsr2h
  3374  0008E8  CFDE F005          	movff	postinc2,??_FMread
  3375  0008EC  CFDD F006          	movff	postdec2,??_FMread+1
  3376  0008F0  500B               	movf	FMread@secndByt,w,c
  3377  0008F2  6E07               	movwf	(??_FMread+2)& (0+255),c
  3378  0008F4  6A08               	clrf	(??_FMread+3)& (0+255),c
  3379  0008F6  5005               	movf	??_FMread,w,c
  3380  0008F8  1207               	iorwf	??_FMread+2,f,c
  3381  0008FA  5006               	movf	??_FMread+1,w,c
  3382  0008FC  1208               	iorwf	??_FMread+3,f,c
  3383  0008FE  C003  FFD9         	movff	FMread@data,fsr2l
  3384  000902  C004  FFDA         	movff	FMread@data+1,fsr2h
  3385  000906  C007  FFDE         	movff	??_FMread+2,postinc2
  3386  00090A  C008  FFDD         	movff	??_FMread+3,postdec2
  3387                           
  3388                           ;main.c: 496: return 0;
  3389  00090E  0E00               	movlw	0
  3390  000910  0012               	return	
  3391  000912                     __end_of_FMread:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409 ;; *************** function _WriteI2C *****************
  3410 ;; Defined at:
  3411 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_writ.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  data_out        1    wreg     unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  data_out        1    1[COMRAM] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      char 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3425 ;;      Params:         0       0       0       0
  3426 ;;      Locals:         1       0       0       0
  3427 ;;      Temps:          0       0       0       0
  3428 ;;      Totals:         1       0       0       0
  3429 ;;Total ram usage:        1 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    1
  3432 ;; This function calls:
  3433 ;;		_IdleI2C
  3434 ;; This function is called by:
  3435 ;;		_FMwrite
  3436 ;;		_FMread
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text21
  3441  000D64                     __ptext21:
  3442                           	opt stack 0
  3443  000D64                     _WriteI2C:
  3444                           	opt stack 26
  3445                           
  3446                           ;incstack = 0
  3447                           ;WriteI2C@data_out stored from wreg
  3448  000D64  6E02               	movwf	WriteI2C@data_out,c
  3449  000D66  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  3450  000D6A  AEC6               	btfss	4038,7,c	;volatile
  3451  000D6C  D002               	goto	l1055
  3452  000D6E  0EFF               	movlw	255
  3453  000D70  0012               	return	
  3454  000D72                     l1055:
  3455  000D72  50C6               	movf	4038,w,c	;volatile
  3456  000D74  0B0F               	andlw	15
  3457  000D76  0A08               	xorlw	8
  3458  000D78  B4D8               	btfsc	status,2,c
  3459  000D7A  D00F               	goto	l1073
  3460  000D7C  50C6               	movf	4038,w,c	;volatile
  3461  000D7E  0B0F               	andlw	15
  3462  000D80  0A0B               	xorlw	11
  3463  000D82  B4D8               	btfsc	status,2,c
  3464  000D84  D00A               	goto	l1073
  3465  000D86  88C6               	bsf	4038,4,c	;volatile
  3466  000D88                     l400:
  3467  000D88  A69E               	btfss	3998,3,c	;volatile
  3468  000D8A  D7FE               	goto	l400
  3469  000D8C  A4C7               	btfss	4039,2,c	;volatile
  3470  000D8E  B0C7               	btfsc	4039,0,c	;volatile
  3471  000D90  D002               	goto	l1069
  3472  000D92  0EFE               	movlw	254
  3473  000D94  0012               	return	
  3474  000D96                     l1069:
  3475  000D96  0E00               	movlw	0
  3476  000D98  0012               	return	
  3477  000D9A                     l1073:
  3478  000D9A  50C6               	movf	4038,w,c	;volatile
  3479  000D9C  0B0F               	andlw	15
  3480  000D9E  0A08               	xorlw	8
  3481  000DA0  B4D8               	btfsc	status,2,c
  3482  000DA2  D005               	goto	l409
  3483  000DA4  50C6               	movf	4038,w,c	;volatile
  3484  000DA6  0B0F               	andlw	15
  3485  000DA8  0A0B               	xorlw	11
  3486  000DAA  A4D8               	btfss	status,2,c
  3487  000DAC  0012               	return	
  3488  000DAE                     l409:
  3489  000DAE  B0C7               	btfsc	4039,0,c	;volatile
  3490  000DB0  D7FE               	goto	l409
  3491  000DB2  EC86  F007         	call	_IdleI2C	;wreg free
  3492  000DB6  ACC5               	btfss	4037,6,c	;volatile
  3493  000DB8  D002               	goto	l1087
  3494  000DBA  0EFE               	movlw	254
  3495  000DBC  0012               	return	
  3496  000DBE                     l1087:
  3497  000DBE  0E00               	movlw	0
  3498  000DC0  0012               	return	
  3499  000DC2                     __end_of_WriteI2C:
  3500                           	opt stack 0
  3501                           tblptru	equ	0xFF8
  3502                           tblptrh	equ	0xFF7
  3503                           tblptrl	equ	0xFF6
  3504                           tablat	equ	0xFF5
  3505                           prodh	equ	0xFF4
  3506                           prodl	equ	0xFF3
  3507                           intcon	equ	0xFF2
  3508                           postinc0	equ	0xFEE
  3509                           wreg	equ	0xFE8
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           fsr2h	equ	0xFDA
  3514                           fsr2l	equ	0xFD9
  3515                           status	equ	0xFD8
  3516                           
  3517 ;; *************** function _IdleI2C *****************
  3518 ;; Defined at:
  3519 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_idle.c"
  3520 ;; Parameters:    Size  Location     Type
  3521 ;;		None
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;		None
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  1    wreg      void 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3533 ;;      Params:         0       0       0       0
  3534 ;;      Locals:         0       0       0       0
  3535 ;;      Temps:          1       0       0       0
  3536 ;;      Totals:         1       0       0       0
  3537 ;;Total ram usage:        1 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_FMwrite
  3543 ;;		_FMread
  3544 ;;		_WriteI2C
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text22
  3549  000F0C                     __ptext22:
  3550                           	opt stack 0
  3551  000F0C                     _IdleI2C:
  3552                           	opt stack 26
  3553  000F0C                     l1041:
  3554  000F0C  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  3555  000F10  0E1F               	movlw	31
  3556  000F12  1601               	andwf	??_IdleI2C,f,c
  3557  000F14  A4D8               	btfss	status,2,c
  3558  000F16  D7FA               	goto	l1041
  3559  000F18  A4C7               	btfss	4039,2,c	;volatile
  3560  000F1A  0012               	return	
  3561  000F1C  D7F7               	goto	l1041
  3562  000F1E                     __end_of_IdleI2C:
  3563                           	opt stack 0
  3564                           tblptru	equ	0xFF8
  3565                           tblptrh	equ	0xFF7
  3566                           tblptrl	equ	0xFF6
  3567                           tablat	equ	0xFF5
  3568                           prodh	equ	0xFF4
  3569                           prodl	equ	0xFF3
  3570                           intcon	equ	0xFF2
  3571                           postinc0	equ	0xFEE
  3572                           wreg	equ	0xFE8
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           postdec2	equ	0xFDD
  3576                           fsr2h	equ	0xFDA
  3577                           fsr2l	equ	0xFD9
  3578                           status	equ	0xFD8
  3579                           
  3580 ;; *************** function _ReadI2C *****************
  3581 ;; Defined at:
  3582 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\pic18\plib\i2c\i2c_read.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;		None
  3587 ;; Return value:  Size  Location     Type
  3588 ;;                  1    wreg      unsigned char 
  3589 ;; Registers used:
  3590 ;;		wreg, status,2, status,0
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3596 ;;      Params:         0       0       0       0
  3597 ;;      Locals:         0       0       0       0
  3598 ;;      Temps:          0       0       0       0
  3599 ;;      Totals:         0       0       0       0
  3600 ;;Total ram usage:        0 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; This function calls:
  3603 ;;		Nothing
  3604 ;; This function is called by:
  3605 ;;		_FMread
  3606 ;; This function uses a non-reentrant model
  3607 ;;
  3608                           
  3609                           	psect	text23
  3610  000EDA                     __ptext23:
  3611                           	opt stack 0
  3612  000EDA                     _ReadI2C:
  3613                           	opt stack 26
  3614                           
  3615                           ;incstack = 0
  3616  000EDA  50C6               	movf	4038,w,c	;volatile
  3617  000EDC  0B0F               	andlw	15
  3618  000EDE  0A08               	xorlw	8
  3619  000EE0  B4D8               	btfsc	status,2,c
  3620  000EE2  D004               	goto	l375
  3621  000EE4  50C6               	movf	4038,w,c	;volatile
  3622  000EE6  0B0F               	andlw	15
  3623  000EE8  0A0B               	xorlw	11
  3624  000EEA  B4D8               	btfsc	status,2,c
  3625  000EEC                     l375:
  3626  000EEC  86C5               	bsf	4037,3,c	;volatile
  3627  000EEE                     l376:
  3628  000EEE  A0C7               	btfss	4039,0,c	;volatile
  3629  000EF0  D7FE               	goto	l376
  3630  000EF2  50C9               	movf	4041,w,c	;volatile
  3631  000EF4  0012               	return	
  3632  000EF6                     __end_of_ReadI2C:
  3633                           	opt stack 0
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           intcon	equ	0xFF2
  3641                           postinc0	equ	0xFEE
  3642                           wreg	equ	0xFE8
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           postdec2	equ	0xFDD
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           intcon	equ	0xFF2
  3656                           postinc0	equ	0xFEE
  3657                           wreg	equ	0xFE8
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665                           	psect	rparam
  3666  0000                     tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           fsr2h	equ	0xFDA
  3679                           fsr2l	equ	0xFD9
  3680                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    83
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     46      83
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    FMchan@chn	PTR unsigned int  size(2) Largest target is 2
		 -> nextChanPreset@chn(COMRAM[2]), nextChan@chn(COMRAM[2]), 

    FMvers@vsn	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), 

    FMready@rdy	PTR unsigned int  size(2) Largest target is 2
		 -> FMfrequenc@dat(COMRAM[2]), FMinit@dat(COMRAM[2]), 

    FMread@data	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), FMreadChan@newFreq(COMRAM[2]), scanNext@STC(COMRAM[2]), nextChanPreset@chn(COMRAM[2]), 
		 -> nextChan@chn(COMRAM[2]), FMready@sts(COMRAM[2]), 

    butnEvent@butn	PTR unsigned char  size(2) Largest target is 1
		 -> main@btn(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_nextChan
    _nextChanPreset->_FMfrequenc
    ___lwtoft->___ftpack
    ___fttol->___wmul
    ___ftge->___lwtoft
    _nextChan->_FMfrequenc
    _FMfrequenc->___fttol
    _FMchan->_FMread
    _changeVol->_FMwrite
    _Init->_OpenI2C
    _FMvers->_FMread
    _FMinit->_FMready
    _FMwrite->_WriteI2C
    _FMready->_FMread
    _FMread->_WriteI2C
    _WriteI2C->_IdleI2C

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   14292
                                             40 COMRAM     6     6      0
                         _FMfrequenc
                             _FMinit
                             _FMvers
                            _FMwrite
                               _Init
                          _butnEvent
                          _changeVol
                                _dly
                              _errfm
                           _nextChan
                     _nextChanPreset
 ---------------------------------------------------------------------------------
 (1) _nextChanPreset                                       7     7      0    6327
                                             31 COMRAM     7     7      0
                             _FMchan
                         _FMfrequenc
                             ___ftge
                            ___fttol
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     799
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2103
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1953
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     380
                                              6 COMRAM    15    11      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     392
                                             11 COMRAM     9     3      6
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _nextChan                                             9     7      2    2602
                                             31 COMRAM     9     7      2
                             _FMchan
                         _FMfrequenc
 ---------------------------------------------------------------------------------
 (2) _FMfrequenc                                          10     8      2    1626
                                             21 COMRAM    10     8      2
                            _FMready
                            _FMwrite
                            ___fttol (ARG)
                             ___wmul (ARG)
                                _dly
 ---------------------------------------------------------------------------------
 (2) _FMchan                                               3     1      2     727
                                             11 COMRAM     3     1      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _errfm                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _changeVol                                            3     3      0     135
                                              7 COMRAM     3     3      0
                            _FMwrite
 ---------------------------------------------------------------------------------
 (1) _butnEvent                                            3     1      2     608
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init                                                 2     2      0     108
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     1      1     108
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _FMvers                                               2     0      2     641
                                             11 COMRAM     2     0      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _FMinit                                               3     3      0    1506
                                             17 COMRAM     3     3      0
                            _FMready
                            _FMwrite
                                _dly
 ---------------------------------------------------------------------------------
 (3) _dly                                                  4     2      2     432
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _FMwrite                                              5     5      0      90
                                              2 COMRAM     5     5      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (3) _FMready                                              6     4      2     757
                                             11 COMRAM     6     4      2
                             _FMread
 ---------------------------------------------------------------------------------
 (4) _FMread                                               9     7      2     555
                                              2 COMRAM     9     7      2
                            _IdleI2C
                            _ReadI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     1      0      15
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FMfrequenc
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     ___fttol (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
     _dly (ARG)
   _FMinit
     _FMready
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _dly
   _FMvers
     _FMread
       _IdleI2C
       _ReadI2C
       _WriteI2C
         _IdleI2C
   _FMwrite
     _IdleI2C
     _WriteI2C
       _IdleI2C
   _Init
     _OpenI2C
   _butnEvent
   _changeVol
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
   _dly
   _errfm
   _nextChan
     _FMchan
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       ___fttol (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
       _dly (ARG)
   _nextChanPreset
     _FMchan
       _FMread
         _IdleI2C
         _ReadI2C
         _WriteI2C
           _IdleI2C
     _FMfrequenc
       _FMready
         _FMread
           _IdleI2C
           _ReadI2C
           _WriteI2C
             _IdleI2C
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       ___fttol (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
       _dly (ARG)
     ___ftge
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
     ___fttol
       ___wmul (ARG)
     ___lwtoft
       ___ftpack
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2E      53       1       87.4%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      53       8        0.0%
DATA                 0      0      53      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Apr 30 15:51:27 2019

            __CFG_CP$OFF 000000              _SSPSTATbits 000FC7                       l93 0510  
                     l96 0542                       l89 04FA                       l99 0574  
    ___wmul@multiplicand 0003              __CFG_BORV$3 000000                      l102 05A6  
                    l111 063C                      l105 05D8                      l108 060A  
                    l400 0D88                      l160 08AA                      l144 0C0E  
                    l216 04E2                      l241 0F2E                      l154 0874  
                    l163 08B4                      l139 0BD2                      l157 0894  
                    l149 084C                      l175 094E                      l409 0DAE  
                    l375 0EEC                      l376 0EEE                      l638 0A62  
                    u605 0B7E                      u585 0B46                      _dly 0E40  
                    fsr2 000FD9                      _vol 0053                      prod 000FF3  
                    wreg 000FE8        butnEvent@butnStat 0003        nextChanPreset@chn 0023  
           __CFG_WDT$OFF 000000        nextChanPreset@frq 0021                     l1041 0F0C  
                   l1055 0D72                     l1073 0D9A                     l1069 0D96  
                   l1149 0BEA                     l1087 0DBE                     l1351 0B2C  
                   l2305 0864                     l1347 0B24                     l2341 0E54  
                   l2343 0E5A                     l2511 0836                     l2503 080E  
                   l2505 081A                     l2355 0DDA                     l2339 0E4A  
                   l2347 0E68                     l2507 0820                     l2371 09F2  
                   l2701 0916                     l2381 0A4E                     l2373 09FC  
                   l2439 0E20                     l2455 0AB2                     l2383 0A58  
                   l2375 0A1A                     l2367 09E4                     l2721 096C  
                   l2705 091E                     l2617 05BC                     l2465 0B0E  
                   l2801 0434                     l2731 0984                     l2459 0AE2  
                   l2475 0780                     l2379 0A30                     l2803 043C  
                   l2725 0974                     l2637 05EE                     l2557 0526  
                   l2493 07E6                     l2813 04DA                     l2743 09A2  
                   l2735 0988                     l2719 0968                     l2745 09B0  
                   l2657 0620                     l2577 0558                     l2497 07F6  
                   ?_dly 0001                     l2747 09BC                     l2931 0700  
                   l2677 0652                     l2597 058A                     l2773 0C7C  
                   l2933 0710                     l2925 06E0                     l2941 0726  
                   l2917 06BE                     l2791 0394                     l2935 0718  
                   l2927 06E8                     l2769 0C52                     l2937 0720  
                   l2929 06F0                     l2797 042A                     u2070 067E  
                   u1520 0E38                     u1370 0DEE                     u1380 0DF0  
                   u1525 0E30                     u1561 0764                     u1580 079E  
                   u1585 0796                     u1930 0392          ?_nextChanPreset 0001  
                   _Init 0D00          __end_of_FMready 0E08                     _main 0656  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     dly@d 0001  
                   dly@i 0003                     fsr2h 000FDA                     indf2 000FDF  
                   fsr2l 000FD9          __end_of_FMwrite 0C1A                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_IESO$OFF 000000  
        __end_of_IdleI2C 0F1E            __CFG_MCLRE$ON 000000             ___param_bank 000000  
        __end_of_ReadI2C 0EF6          __end_of_OpenI2C 0EDA             ___fttol@exp1 0015  
                  ??_dly 0003             ___fttol@lval 0011                    ?_Init 0001  
                  ?_main 0001                    _T0CON 000FD5          __end_of___fttol 0848  
                  _LCDPS 000F58                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTE 000F84                    _PORTG 000F86                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISG 000F98  
          __CFG_PWRT$OFF 000000           __CFG_FCMEN$OFF 000000          __end_of_regDflt 034B  
                  _errfm 0F2E              ?_FMfrequenc 0016            ___ftpack@sign 0005  
         __CFG_BOREN$OFF 000000                    tablat 000FF5                    status 000FD8  
        __initialization 0EF6             __end_of_Init 0D64             __end_of_main 0754  
                 ??_Init 0003                   ??_main 0029            ___fttol@sign1 0010  
          __activetblptr 000002                   _ADCON1 000FC1                ??_FMready 000E  
                 ?_errfm 0001         __end_of_WriteI2C 0DC2                ??_FMwrite 0003  
       __end_of___ftpack 0A82                   _LCDCON 000F59                   _LCDSE0 000F5A  
                 _LCDSE1 000F5B                   _LCDSE2 000F5C                   _LCDSE3 000F5D  
            OpenI2C@slew 0001         __end_of___lwtoft 0EBC                ??_IdleI2C 0001  
                 _OSCCON 000FD3                   _FMchan 0E08                   _FMinit 0912  
                 _FMread 0848                   _SSPADD 000FC8                   _SSPBUF 000FC9  
                 _FMvers 0F1E                ??_ReadI2C 0001                ??_OpenI2C 0002  
         __CFG_XINST$OFF 000000                   ___ftge 0A82                   ___wmul 0E72  
              ??___fttol 000B      __size_of_FMfrequenc 0072                   _regImg 002F  
                 clear_0 0EFC         __end_of_nextChan 0C8E                   main@ui 002C  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0F02  
             ___ftge@ff1 000C               ___ftge@ff2 000F            ___rparam_used 000001  
             ___fttol@f1 0007           __pcstackCOMRAM 0001       __size_of_changeVol 0086  
          __end_of_errfm 0F30               ___lwtoft@c 0009              nextChan@chn 0027  
        __CFG_OSC$INTIO7 000000         ??_nextChanPreset 0020                  ??_errfm 0001  
     __size_of_butnEvent 0172                  ?_FMchan 000C                  ?_FMinit 0001  
                ?_FMread 0003                  ?_FMvers 000C                  ?___ftge 000C  
                ?___wmul 0001                FMchan@chn 000C                ?_WriteI2C 0001  
              ?___ftpack 0001                ?___lwtoft 0009                FMinit@dat 0012  
                _FMready 0DC2                  _SSPCON1 000FC6                  _SSPCON2 000FC5  
           ??_FMfrequenc 0018                  _SSPSTAT 000FC7                  _FMwrite 0B98  
      __end_of_changeVol 0B98                  _IdleI2C 0F0C          __size_of_FMchan 0038  
        __size_of_FMinit 00C2          __size_of_FMread 00CA                FMvers@vsn 000C  
                _ReadI2C 0EDA          __size_of_FMvers 0010                ?_nextChan 0020  
                _OpenI2C 0EBC                  __Hparam 0000                  __Lparam 0000  
        __size_of___ftge 0090          __size_of___wmul 0026                  ___fttol 0754  
           __psmallconst 0300          __CFG_STVREN$OFF 000000                  __pcinit 0EF6  
             ??_WriteI2C 0002        __end_of_butnEvent 0656               ??___ftpack 0006  
     __end_of_FMfrequenc 0D00                  __ramtop 0300                  __ptext0 0656  
                __ptext1 0356                  __ptext2 0E72                  __ptext3 0E98  
                __ptext4 09D4                  __ptext5 0754                  __ptext6 0A82  
                __ptext7 0C1A                  __ptext8 0C8E                  __ptext9 0E08  
             ??___lwtoft 000C                _T0CONbits 000FD5                  _regDflt 0327  
           __size_of_dly 0032                  main@btn 002E                  main@evt 0029  
   end_of_initialization 0F02            __Lmediumconst 0000               ??_nextChan 0022  
            FMfrequenc@f 0016                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE      __end_of_chanPresets 0354                _TRISCbits 000F94  
          butnEvent@butn 0001               _volPresets 0301         nextChanPreset@up 0020  
         __end_of_FMchan 0E40           __end_of_FMinit 09D4           __end_of_FMread 0912  
         __end_of_FMvers 0F2E           __end_of___ftge 0B12           __end_of___wmul 0E98  
    start_initialization 0EF6              __end_of_dly 0E72         WriteI2C@data_out 0002  
               ??_FMchan 000E                 ??_FMinit 0012                 ??_FMread 0005  
               ??_FMvers 000E             nextChan@freq 0020                 ??___ftge 0012  
               ??___wmul 0005              _chanPresets 034B        __size_of_WriteI2C 005E  
      __size_of___ftpack 00AE              __pbssCOMRAM 002F        __size_of___lwtoft 0024  
               ?_FMready 000C                 ?_FMwrite 0001               nextChan@up 0026  
               ?_IdleI2C 0001                 ?_ReadI2C 0001                _changeVol 0B12  
               ?_OpenI2C 0001        __size_of_nextChan 0074                 ?___fttol 0007  
               FMinit@ad 0014              __smallconst 0300                _butnEvent 04E4  
        FMwrite@firstByt 0005                 _LCDDATA0 000F60          FMwrite@secndByt 0006  
         __size_of_errfm 0002           ___wmul@product 0005  __size_of_nextChanPreset 018E  
             ?_changeVol 0001           FMread@firstByt 000A               FMread@data 0003  
               _PIR1bits 000F9E           FMread@secndByt 000B               FMready@rdy 000C  
             FMready@sts 0010        ___wmul@multiplier 0001          nextChanPreset@i 0025  
             ?_butnEvent 0001         __size_of_FMready 0046         __size_of_FMwrite 0082  
       OpenI2C@sync_mode 0002         __size_of_IdleI2C 0012         __size_of_ReadI2C 001C  
               __Hrparam 0000         __size_of_OpenI2C 001E                 __Lrparam 0000  
   changeVol@newRegValue 0009               FMwrite@adr 0007         __size_of___fttol 00F4  
               _WriteI2C 0D64                 ___ftpack 09D4                 ___lwtoft 0E98  
            changeVol@up 0008                 __ptext10 0F2E                 __ptext11 0B12  
               __ptext20 0848                 __ptext12 04E4                 __ptext21 0D64  
               __ptext13 0D00                 __ptext22 0F0C                 __ptext14 0EBC  
               __ptext23 0EDA                 __ptext15 0F1E                 __ptext16 0912  
               __ptext17 0E40                 __ptext18 0B98                 __ptext19 0DC2  
          __size_of_Init 0064            __size_of_main 00FE              ??_changeVol 0008  
               _nextChan 0C1A            FMread@regAddr 0009            FMfrequenc@dat 001E  
               main@freq 002A              ??_butnEvent 0003               _INTCONbits 000FF2  
         _nextChanPreset 0356             FMfrequenc@cn 001C       __end_of_volPresets 0327  
            _SSPCON1bits 000FC6              _SSPCON2bits 000FC5               _FMfrequenc 0C8E  
 __end_of_nextChanPreset 04E4  
